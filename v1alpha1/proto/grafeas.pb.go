// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1alpha1/proto/grafeas.proto

package grafeas

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Public key formats
type BuildSignature_KeyType int32

const (
	// `KeyType` is not set.
	BuildSignature_KEY_TYPE_UNSPECIFIED BuildSignature_KeyType = 0
	// `PGP ASCII Armored` public key.
	BuildSignature_PGP_ASCII_ARMORED BuildSignature_KeyType = 1
	// `PKIX PEM` public key.
	BuildSignature_PKIX_PEM BuildSignature_KeyType = 2
)

var BuildSignature_KeyType_name = map[int32]string{
	0: "KEY_TYPE_UNSPECIFIED",
	1: "PGP_ASCII_ARMORED",
	2: "PKIX_PEM",
}

var BuildSignature_KeyType_value = map[string]int32{
	"KEY_TYPE_UNSPECIFIED": 0,
	"PGP_ASCII_ARMORED":    1,
	"PKIX_PEM":             2,
}

func (x BuildSignature_KeyType) String() string {
	return proto.EnumName(BuildSignature_KeyType_name, int32(x))
}

func (BuildSignature_KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{24, 0}
}

// Types of platforms.
type Deployable_DeploymentDetails_Platform int32

const (
	// Unknown
	Deployable_DeploymentDetails_PLATFORM_UNSPECIFIED Deployable_DeploymentDetails_Platform = 0
	// Google Container Engine
	Deployable_DeploymentDetails_GKE Deployable_DeploymentDetails_Platform = 1
	// Google App Engine: Flexible Environment
	Deployable_DeploymentDetails_FLEX Deployable_DeploymentDetails_Platform = 2
	// Custom user-defined platform
	Deployable_DeploymentDetails_CUSTOM Deployable_DeploymentDetails_Platform = 3
)

var Deployable_DeploymentDetails_Platform_name = map[int32]string{
	0: "PLATFORM_UNSPECIFIED",
	1: "GKE",
	2: "FLEX",
	3: "CUSTOM",
}

var Deployable_DeploymentDetails_Platform_value = map[string]int32{
	"PLATFORM_UNSPECIFIED": 0,
	"GKE":                  1,
	"FLEX":                 2,
	"CUSTOM":               3,
}

func (x Deployable_DeploymentDetails_Platform) String() string {
	return proto.EnumName(Deployable_DeploymentDetails_Platform_name, int32(x))
}

func (Deployable_DeploymentDetails_Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{27, 0, 0}
}

// Instructions from dockerfile
type DockerImage_Layer_Directive int32

const (
	// Default value for unsupported/missing directive
	DockerImage_Layer_DIRECTIVE_UNSPECIFIED DockerImage_Layer_Directive = 0
	// https://docs.docker.com/reference/builder/#maintainer
	DockerImage_Layer_MAINTAINER DockerImage_Layer_Directive = 1
	// https://docs.docker.com/reference/builder/#run
	DockerImage_Layer_RUN DockerImage_Layer_Directive = 2
	// https://docs.docker.com/reference/builder/#cmd
	DockerImage_Layer_CMD DockerImage_Layer_Directive = 3
	// https://docs.docker.com/reference/builder/#label
	DockerImage_Layer_LABEL DockerImage_Layer_Directive = 4
	// https://docs.docker.com/reference/builder/#expose
	DockerImage_Layer_EXPOSE DockerImage_Layer_Directive = 5
	// https://docs.docker.com/reference/builder/#env
	DockerImage_Layer_ENV DockerImage_Layer_Directive = 6
	// https://docs.docker.com/reference/builder/#add
	DockerImage_Layer_ADD DockerImage_Layer_Directive = 7
	// https://docs.docker.com/reference/builder/#copy
	DockerImage_Layer_COPY DockerImage_Layer_Directive = 8
	// https://docs.docker.com/reference/builder/#entrypoint
	DockerImage_Layer_ENTRYPOINT DockerImage_Layer_Directive = 9
	// https://docs.docker.com/reference/builder/#volume
	DockerImage_Layer_VOLUME DockerImage_Layer_Directive = 10
	// https://docs.docker.com/reference/builder/#user
	DockerImage_Layer_USER DockerImage_Layer_Directive = 11
	// https://docs.docker.com/reference/builder/#workdir
	DockerImage_Layer_WORKDIR DockerImage_Layer_Directive = 12
	// https://docs.docker.com/reference/builder/#arg
	DockerImage_Layer_ARG DockerImage_Layer_Directive = 13
	// https://docs.docker.com/reference/builder/#onbuild
	DockerImage_Layer_ONBUILD DockerImage_Layer_Directive = 14
	// https://docs.docker.com/reference/builder/#stopsignal
	DockerImage_Layer_STOPSIGNAL DockerImage_Layer_Directive = 15
	// https://docs.docker.com/reference/builder/#healthcheck
	DockerImage_Layer_HEALTHCHECK DockerImage_Layer_Directive = 16
	// https://docs.docker.com/reference/builder/#shell
	DockerImage_Layer_SHELL DockerImage_Layer_Directive = 17
)

var DockerImage_Layer_Directive_name = map[int32]string{
	0:  "DIRECTIVE_UNSPECIFIED",
	1:  "MAINTAINER",
	2:  "RUN",
	3:  "CMD",
	4:  "LABEL",
	5:  "EXPOSE",
	6:  "ENV",
	7:  "ADD",
	8:  "COPY",
	9:  "ENTRYPOINT",
	10: "VOLUME",
	11: "USER",
	12: "WORKDIR",
	13: "ARG",
	14: "ONBUILD",
	15: "STOPSIGNAL",
	16: "HEALTHCHECK",
	17: "SHELL",
}

var DockerImage_Layer_Directive_value = map[string]int32{
	"DIRECTIVE_UNSPECIFIED": 0,
	"MAINTAINER":            1,
	"RUN":                   2,
	"CMD":                   3,
	"LABEL":                 4,
	"EXPOSE":                5,
	"ENV":                   6,
	"ADD":                   7,
	"COPY":                  8,
	"ENTRYPOINT":            9,
	"VOLUME":                10,
	"USER":                  11,
	"WORKDIR":               12,
	"ARG":                   13,
	"ONBUILD":               14,
	"STOPSIGNAL":            15,
	"HEALTHCHECK":           16,
	"SHELL":                 17,
}

func (x DockerImage_Layer_Directive) String() string {
	return proto.EnumName(DockerImage_Layer_Directive_name, int32(x))
}

func (DockerImage_Layer_Directive) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{28, 0, 0}
}

// Specifies the hash algorithm, if any.
type Hash_HashType int32

const (
	// No hash requested.
	Hash_NONE Hash_HashType = 0
	// A sha256 hash.
	Hash_SHA256 Hash_HashType = 1
)

var Hash_HashType_name = map[int32]string{
	0: "NONE",
	1: "SHA256",
}

var Hash_HashType_value = map[string]int32{
	"NONE":   0,
	"SHA256": 1,
}

func (x Hash_HashType) String() string {
	return proto.EnumName(Hash_HashType_name, int32(x))
}

func (Hash_HashType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{31, 0}
}

// This must be 1:1 with members of our oneofs, it can be used for filtering
// Note and Occurrence on their kind.
type Note_Kind int32

const (
	// Unknown
	Note_KIND_UNSPECIFIED Note_Kind = 0
	// The note and occurrence represent a package vulnerability.
	Note_PACKAGE_VULNERABILITY Note_Kind = 2
	// The note and occurrence assert build provenance.
	Note_BUILD_DETAILS Note_Kind = 3
	// This represents an image basis relationship.
	Note_IMAGE_BASIS Note_Kind = 4
	// This represents a package installed via a package manager.
	Note_PACKAGE_MANAGER Note_Kind = 5
	// The note and occurrence track deployment events.
	Note_DEPLOYABLE Note_Kind = 6
	// The note and occurrence track the initial discovery status of a resource.
	Note_DISCOVERY Note_Kind = 7
	// This represents a logical "role" that can attest to artifacts.
	Note_ATTESTATION_AUTHORITY Note_Kind = 8
)

var Note_Kind_name = map[int32]string{
	0: "KIND_UNSPECIFIED",
	2: "PACKAGE_VULNERABILITY",
	3: "BUILD_DETAILS",
	4: "IMAGE_BASIS",
	5: "PACKAGE_MANAGER",
	6: "DEPLOYABLE",
	7: "DISCOVERY",
	8: "ATTESTATION_AUTHORITY",
}

var Note_Kind_value = map[string]int32{
	"KIND_UNSPECIFIED":      0,
	"PACKAGE_VULNERABILITY": 2,
	"BUILD_DETAILS":         3,
	"IMAGE_BASIS":           4,
	"PACKAGE_MANAGER":       5,
	"DEPLOYABLE":            6,
	"DISCOVERY":             7,
	"ATTESTATION_AUTHORITY": 8,
}

func (x Note_Kind) String() string {
	return proto.EnumName(Note_Kind_name, int32(x))
}

func (Note_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{32, 0}
}

// Instruction set architectures supported by various package managers.
type PackageManager_Architecture int32

const (
	// Unknown architecture
	PackageManager_ARCHITECTURE_UNSPECIFIED PackageManager_Architecture = 0
	// X86 architecture
	PackageManager_X86 PackageManager_Architecture = 1
	// X64 architecture
	PackageManager_X64 PackageManager_Architecture = 2
)

var PackageManager_Architecture_name = map[int32]string{
	0: "ARCHITECTURE_UNSPECIFIED",
	1: "X86",
	2: "X64",
}

var PackageManager_Architecture_value = map[string]int32{
	"ARCHITECTURE_UNSPECIFIED": 0,
	"X86":                      1,
	"X64":                      2,
}

func (x PackageManager_Architecture) String() string {
	return proto.EnumName(PackageManager_Architecture_name, int32(x))
}

func (PackageManager_Architecture) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{34, 0}
}

// Type (e.g. schema) of the attestation payload that was signed.
type PgpSignedAttestation_ContentType int32

const (
	// ContentType is not set.
	PgpSignedAttestation_CONTENT_TYPE_UNSPECIFIED PgpSignedAttestation_ContentType = 0
	// Atomic format attestation signature. See
	// https://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md
	// The payload extracted from `signature` is a JSON blob conforming to the
	// linked schema.
	PgpSignedAttestation_SIMPLE_SIGNING_JSON PgpSignedAttestation_ContentType = 1
)

var PgpSignedAttestation_ContentType_name = map[int32]string{
	0: "CONTENT_TYPE_UNSPECIFIED",
	1: "SIMPLE_SIGNING_JSON",
}

var PgpSignedAttestation_ContentType_value = map[string]int32{
	"CONTENT_TYPE_UNSPECIFIED": 0,
	"SIMPLE_SIGNING_JSON":      1,
}

func (x PgpSignedAttestation_ContentType) String() string {
	return proto.EnumName(PgpSignedAttestation_ContentType_name, int32(x))
}

func (PgpSignedAttestation_ContentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{35, 0}
}

// Note provider-assigned severity/impact ranking
type VulnerabilityType_Severity int32

const (
	// Unknown Impact
	VulnerabilityType_SEVERITY_UNSPECIFIED VulnerabilityType_Severity = 0
	// Minimal Impact
	VulnerabilityType_MINIMAL VulnerabilityType_Severity = 1
	// Low Impact
	VulnerabilityType_LOW VulnerabilityType_Severity = 2
	// Medium Impact
	VulnerabilityType_MEDIUM VulnerabilityType_Severity = 3
	// High Impact
	VulnerabilityType_HIGH VulnerabilityType_Severity = 4
	// Critical Impact
	VulnerabilityType_CRITICAL VulnerabilityType_Severity = 5
)

var VulnerabilityType_Severity_name = map[int32]string{
	0: "SEVERITY_UNSPECIFIED",
	1: "MINIMAL",
	2: "LOW",
	3: "MEDIUM",
	4: "HIGH",
	5: "CRITICAL",
}

var VulnerabilityType_Severity_value = map[string]int32{
	"SEVERITY_UNSPECIFIED": 0,
	"MINIMAL":              1,
	"LOW":                  2,
	"MEDIUM":               3,
	"HIGH":                 4,
	"CRITICAL":             5,
}

func (x VulnerabilityType_Severity) String() string {
	return proto.EnumName(VulnerabilityType_Severity_name, int32(x))
}

func (VulnerabilityType_Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{39, 0}
}

// Whether this is an ordinary package version or a
// sentinel MIN/MAX version.
type VulnerabilityType_Version_VersionKind int32

const (
	// A standard package version, defined by the other fields.
	VulnerabilityType_Version_NORMAL VulnerabilityType_Version_VersionKind = 0
	// A special version representing negative infinity,
	// other fields are ignored.
	VulnerabilityType_Version_MINIMUM VulnerabilityType_Version_VersionKind = 1
	// A special version representing positive infinity,
	// other fields are ignored.
	VulnerabilityType_Version_MAXIMUM VulnerabilityType_Version_VersionKind = 2
)

var VulnerabilityType_Version_VersionKind_name = map[int32]string{
	0: "NORMAL",
	1: "MINIMUM",
	2: "MAXIMUM",
}

var VulnerabilityType_Version_VersionKind_value = map[string]int32{
	"NORMAL":  0,
	"MINIMUM": 1,
	"MAXIMUM": 2,
}

func (x VulnerabilityType_Version_VersionKind) String() string {
	return proto.EnumName(VulnerabilityType_Version_VersionKind_name, int32(x))
}

func (VulnerabilityType_Version_VersionKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{39, 0, 0}
}

// The type of an alias.
type AliasContext_Kind int32

const (
	// Unknown.
	AliasContext_KIND_UNSPECIFIED AliasContext_Kind = 0
	// Git tag.
	AliasContext_FIXED AliasContext_Kind = 1
	// Git branch.
	AliasContext_MOVABLE AliasContext_Kind = 2
	// Used to specify non-standard aliases. For example, if a Git repo has a
	// ref named "refs/foo/bar".
	AliasContext_OTHER AliasContext_Kind = 4
)

var AliasContext_Kind_name = map[int32]string{
	0: "KIND_UNSPECIFIED",
	1: "FIXED",
	2: "MOVABLE",
	4: "OTHER",
}

var AliasContext_Kind_value = map[string]int32{
	"KIND_UNSPECIFIED": 0,
	"FIXED":            1,
	"MOVABLE":          2,
	"OTHER":            4,
}

func (x AliasContext_Kind) String() string {
	return proto.EnumName(AliasContext_Kind_name, int32(x))
}

func (AliasContext_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{41, 0}
}

// Request to get an occurrence.
type GetOccurrenceRequest struct {
	// The name of the occurrence of the form
	// "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOccurrenceRequest) Reset()         { *m = GetOccurrenceRequest{} }
func (m *GetOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*GetOccurrenceRequest) ProtoMessage()    {}
func (*GetOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{0}
}

func (m *GetOccurrenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOccurrenceRequest.Unmarshal(m, b)
}
func (m *GetOccurrenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOccurrenceRequest.Marshal(b, m, deterministic)
}
func (m *GetOccurrenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOccurrenceRequest.Merge(m, src)
}
func (m *GetOccurrenceRequest) XXX_Size() int {
	return xxx_messageInfo_GetOccurrenceRequest.Size(m)
}
func (m *GetOccurrenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOccurrenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOccurrenceRequest proto.InternalMessageInfo

func (m *GetOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to list occurrences.
type ListOccurrencesRequest struct {
	// This contains the project Id for example: projects/{project_id}.
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of occurrences to return in the list.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOccurrencesRequest) Reset()         { *m = ListOccurrencesRequest{} }
func (m *ListOccurrencesRequest) String() string { return proto.CompactTextString(m) }
func (*ListOccurrencesRequest) ProtoMessage()    {}
func (*ListOccurrencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{1}
}

func (m *ListOccurrencesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOccurrencesRequest.Unmarshal(m, b)
}
func (m *ListOccurrencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOccurrencesRequest.Marshal(b, m, deterministic)
}
func (m *ListOccurrencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOccurrencesRequest.Merge(m, src)
}
func (m *ListOccurrencesRequest) XXX_Size() int {
	return xxx_messageInfo_ListOccurrencesRequest.Size(m)
}
func (m *ListOccurrencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOccurrencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOccurrencesRequest proto.InternalMessageInfo

func (m *ListOccurrencesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListOccurrencesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListOccurrencesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListOccurrencesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Request to delete an occurrence.
type DeleteOccurrenceRequest struct {
	// The name of the occurrence in the form of
	// "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOccurrenceRequest) Reset()         { *m = DeleteOccurrenceRequest{} }
func (m *DeleteOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteOccurrenceRequest) ProtoMessage()    {}
func (*DeleteOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{2}
}

func (m *DeleteOccurrenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteOccurrenceRequest.Unmarshal(m, b)
}
func (m *DeleteOccurrenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteOccurrenceRequest.Marshal(b, m, deterministic)
}
func (m *DeleteOccurrenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOccurrenceRequest.Merge(m, src)
}
func (m *DeleteOccurrenceRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteOccurrenceRequest.Size(m)
}
func (m *DeleteOccurrenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOccurrenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOccurrenceRequest proto.InternalMessageInfo

func (m *DeleteOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to insert a new occurrence.
type CreateOccurrenceRequest struct {
	// This field contains the project Id for example: "projects/{project_id}"
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	// The occurrence to be inserted.
	Occurrence           *Occurrence `protobuf:"bytes,2,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateOccurrenceRequest) Reset()         { *m = CreateOccurrenceRequest{} }
func (m *CreateOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOccurrenceRequest) ProtoMessage()    {}
func (*CreateOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{3}
}

func (m *CreateOccurrenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOccurrenceRequest.Unmarshal(m, b)
}
func (m *CreateOccurrenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOccurrenceRequest.Marshal(b, m, deterministic)
}
func (m *CreateOccurrenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOccurrenceRequest.Merge(m, src)
}
func (m *CreateOccurrenceRequest) XXX_Size() int {
	return xxx_messageInfo_CreateOccurrenceRequest.Size(m)
}
func (m *CreateOccurrenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOccurrenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOccurrenceRequest proto.InternalMessageInfo

func (m *CreateOccurrenceRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateOccurrenceRequest) GetOccurrence() *Occurrence {
	if m != nil {
		return m.Occurrence
	}
	return nil
}

// Request to update an existing occurrence.
type UpdateOccurrenceRequest struct {
	// The name of the occurrence.
	// Should be of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The updated occurrence.
	Occurrence *Occurrence `protobuf:"bytes,2,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// The fields to update.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateOccurrenceRequest) Reset()         { *m = UpdateOccurrenceRequest{} }
func (m *UpdateOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOccurrenceRequest) ProtoMessage()    {}
func (*UpdateOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{4}
}

func (m *UpdateOccurrenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateOccurrenceRequest.Unmarshal(m, b)
}
func (m *UpdateOccurrenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateOccurrenceRequest.Marshal(b, m, deterministic)
}
func (m *UpdateOccurrenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOccurrenceRequest.Merge(m, src)
}
func (m *UpdateOccurrenceRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateOccurrenceRequest.Size(m)
}
func (m *UpdateOccurrenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOccurrenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOccurrenceRequest proto.InternalMessageInfo

func (m *UpdateOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOccurrenceRequest) GetOccurrence() *Occurrence {
	if m != nil {
		return m.Occurrence
	}
	return nil
}

func (m *UpdateOccurrenceRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// Request to get a note.
type GetNoteRequest struct {
	// The name of the note in the form of
	// "providers/{provider_id}/notes/{NOTE_ID}"
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNoteRequest) Reset()         { *m = GetNoteRequest{} }
func (m *GetNoteRequest) String() string { return proto.CompactTextString(m) }
func (*GetNoteRequest) ProtoMessage()    {}
func (*GetNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{5}
}

func (m *GetNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNoteRequest.Unmarshal(m, b)
}
func (m *GetNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNoteRequest.Marshal(b, m, deterministic)
}
func (m *GetNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNoteRequest.Merge(m, src)
}
func (m *GetNoteRequest) XXX_Size() int {
	return xxx_messageInfo_GetNoteRequest.Size(m)
}
func (m *GetNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNoteRequest proto.InternalMessageInfo

func (m *GetNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to get the note to which this occurrence is attached.
type GetOccurrenceNoteRequest struct {
	// The name of the occurrence in the form
	// "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOccurrenceNoteRequest) Reset()         { *m = GetOccurrenceNoteRequest{} }
func (m *GetOccurrenceNoteRequest) String() string { return proto.CompactTextString(m) }
func (*GetOccurrenceNoteRequest) ProtoMessage()    {}
func (*GetOccurrenceNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{6}
}

func (m *GetOccurrenceNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOccurrenceNoteRequest.Unmarshal(m, b)
}
func (m *GetOccurrenceNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOccurrenceNoteRequest.Marshal(b, m, deterministic)
}
func (m *GetOccurrenceNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOccurrenceNoteRequest.Merge(m, src)
}
func (m *GetOccurrenceNoteRequest) XXX_Size() int {
	return xxx_messageInfo_GetOccurrenceNoteRequest.Size(m)
}
func (m *GetOccurrenceNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOccurrenceNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOccurrenceNoteRequest proto.InternalMessageInfo

func (m *GetOccurrenceNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to list notes.
type ListNotesRequest struct {
	// This field contains the project ID for example: "projects/{project_id}".
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of notes to return in the list.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNotesRequest) Reset()         { *m = ListNotesRequest{} }
func (m *ListNotesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNotesRequest) ProtoMessage()    {}
func (*ListNotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{7}
}

func (m *ListNotesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNotesRequest.Unmarshal(m, b)
}
func (m *ListNotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNotesRequest.Marshal(b, m, deterministic)
}
func (m *ListNotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNotesRequest.Merge(m, src)
}
func (m *ListNotesRequest) XXX_Size() int {
	return xxx_messageInfo_ListNotesRequest.Size(m)
}
func (m *ListNotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNotesRequest proto.InternalMessageInfo

func (m *ListNotesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListNotesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListNotesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNotesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Request to delete a note
type DeleteNoteRequest struct {
	// The name of the note in the form of
	// "providers/{provider_id}/notes/{NOTE_ID}"
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNoteRequest) Reset()         { *m = DeleteNoteRequest{} }
func (m *DeleteNoteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNoteRequest) ProtoMessage()    {}
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{8}
}

func (m *DeleteNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNoteRequest.Unmarshal(m, b)
}
func (m *DeleteNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNoteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNoteRequest.Merge(m, src)
}
func (m *DeleteNoteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteNoteRequest.Size(m)
}
func (m *DeleteNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNoteRequest proto.InternalMessageInfo

func (m *DeleteNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to insert a new note
type CreateNoteRequest struct {
	// This field contains the project Id for example:
	// "project/{project_id}
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// The ID to use for this note.
	NoteId string `protobuf:"bytes,2,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// The Note to be inserted
	Note                 *Note    `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNoteRequest) Reset()         { *m = CreateNoteRequest{} }
func (m *CreateNoteRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNoteRequest) ProtoMessage()    {}
func (*CreateNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{9}
}

func (m *CreateNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNoteRequest.Unmarshal(m, b)
}
func (m *CreateNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNoteRequest.Marshal(b, m, deterministic)
}
func (m *CreateNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNoteRequest.Merge(m, src)
}
func (m *CreateNoteRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNoteRequest.Size(m)
}
func (m *CreateNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNoteRequest proto.InternalMessageInfo

func (m *CreateNoteRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateNoteRequest) GetNoteId() string {
	if m != nil {
		return m.NoteId
	}
	return ""
}

func (m *CreateNoteRequest) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

// Request to update an existing note
type UpdateNoteRequest struct {
	// The name of the note.
	// Should be of the form "projects/{provider_id}/notes/{note_id}".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The updated note.
	Note *Note `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	// The fields to update.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateNoteRequest) Reset()         { *m = UpdateNoteRequest{} }
func (m *UpdateNoteRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNoteRequest) ProtoMessage()    {}
func (*UpdateNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{10}
}

func (m *UpdateNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNoteRequest.Unmarshal(m, b)
}
func (m *UpdateNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNoteRequest.Marshal(b, m, deterministic)
}
func (m *UpdateNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNoteRequest.Merge(m, src)
}
func (m *UpdateNoteRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateNoteRequest.Size(m)
}
func (m *UpdateNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNoteRequest proto.InternalMessageInfo

func (m *UpdateNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateNoteRequest) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

func (m *UpdateNoteRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// Request to list occurrences.
type ListNoteOccurrencesRequest struct {
	// The name field will contain the note name for example:
	//   "provider/{provider_id}/notes/{note_id}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of notes to return in the list.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNoteOccurrencesRequest) Reset()         { *m = ListNoteOccurrencesRequest{} }
func (m *ListNoteOccurrencesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNoteOccurrencesRequest) ProtoMessage()    {}
func (*ListNoteOccurrencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{11}
}

func (m *ListNoteOccurrencesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNoteOccurrencesRequest.Unmarshal(m, b)
}
func (m *ListNoteOccurrencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNoteOccurrencesRequest.Marshal(b, m, deterministic)
}
func (m *ListNoteOccurrencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNoteOccurrencesRequest.Merge(m, src)
}
func (m *ListNoteOccurrencesRequest) XXX_Size() int {
	return xxx_messageInfo_ListNoteOccurrencesRequest.Size(m)
}
func (m *ListNoteOccurrencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNoteOccurrencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNoteOccurrencesRequest proto.InternalMessageInfo

func (m *ListNoteOccurrencesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListNoteOccurrencesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListNoteOccurrencesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNoteOccurrencesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response including listed occurrences for a note.
type ListNoteOccurrencesResponse struct {
	// The occurrences attached to the specified note.
	Occurrences []*Occurrence `protobuf:"bytes,1,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	// Token to receive the next page of notes.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNoteOccurrencesResponse) Reset()         { *m = ListNoteOccurrencesResponse{} }
func (m *ListNoteOccurrencesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNoteOccurrencesResponse) ProtoMessage()    {}
func (*ListNoteOccurrencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{12}
}

func (m *ListNoteOccurrencesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNoteOccurrencesResponse.Unmarshal(m, b)
}
func (m *ListNoteOccurrencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNoteOccurrencesResponse.Marshal(b, m, deterministic)
}
func (m *ListNoteOccurrencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNoteOccurrencesResponse.Merge(m, src)
}
func (m *ListNoteOccurrencesResponse) XXX_Size() int {
	return xxx_messageInfo_ListNoteOccurrencesResponse.Size(m)
}
func (m *ListNoteOccurrencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNoteOccurrencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNoteOccurrencesResponse proto.InternalMessageInfo

func (m *ListNoteOccurrencesResponse) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

func (m *ListNoteOccurrencesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Response including listed notes.
type ListNotesResponse struct {
	// The occurrences requested
	Notes []*Note `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
	// The next pagination token in the list response. It should be used as
	// page_token for the following request. An empty value means no more result.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNotesResponse) Reset()         { *m = ListNotesResponse{} }
func (m *ListNotesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNotesResponse) ProtoMessage()    {}
func (*ListNotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{13}
}

func (m *ListNotesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNotesResponse.Unmarshal(m, b)
}
func (m *ListNotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNotesResponse.Marshal(b, m, deterministic)
}
func (m *ListNotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNotesResponse.Merge(m, src)
}
func (m *ListNotesResponse) XXX_Size() int {
	return xxx_messageInfo_ListNotesResponse.Size(m)
}
func (m *ListNotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNotesResponse proto.InternalMessageInfo

func (m *ListNotesResponse) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *ListNotesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Response including listed active occurrences.
type ListOccurrencesResponse struct {
	// The occurrences requested.
	Occurrences []*Occurrence `protobuf:"bytes,1,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	// The next pagination token in the list response. It should be used as
	// `page_token` for the following request. An empty value means no more
	// results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOccurrencesResponse) Reset()         { *m = ListOccurrencesResponse{} }
func (m *ListOccurrencesResponse) String() string { return proto.CompactTextString(m) }
func (*ListOccurrencesResponse) ProtoMessage()    {}
func (*ListOccurrencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{14}
}

func (m *ListOccurrencesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOccurrencesResponse.Unmarshal(m, b)
}
func (m *ListOccurrencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOccurrencesResponse.Marshal(b, m, deterministic)
}
func (m *ListOccurrencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOccurrencesResponse.Merge(m, src)
}
func (m *ListOccurrencesResponse) XXX_Size() int {
	return xxx_messageInfo_ListOccurrencesResponse.Size(m)
}
func (m *ListOccurrencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOccurrencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOccurrencesResponse proto.InternalMessageInfo

func (m *ListOccurrencesResponse) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

func (m *ListOccurrencesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Response including listed operations.
type ListOperationsResponse struct {
	// The next pagination token in the List response. It should be used as
	// page_token for the following request. An empty value means no more results.
	NextPageToken string `protobuf:"bytes,1,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
	// The operations requested.
	Operations           []*longrunning.Operation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListOperationsResponse) Reset()         { *m = ListOperationsResponse{} }
func (m *ListOperationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListOperationsResponse) ProtoMessage()    {}
func (*ListOperationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{15}
}

func (m *ListOperationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOperationsResponse.Unmarshal(m, b)
}
func (m *ListOperationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOperationsResponse.Marshal(b, m, deterministic)
}
func (m *ListOperationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOperationsResponse.Merge(m, src)
}
func (m *ListOperationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListOperationsResponse.Size(m)
}
func (m *ListOperationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOperationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOperationsResponse proto.InternalMessageInfo

func (m *ListOperationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListOperationsResponse) GetOperations() []*longrunning.Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

// Request for updating an existing operation
type UpdateOperationRequest struct {
	// The name of the Operation.
	// Should be of the form "projects/{provider_id}/operations/{operation_id}".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The operation to create.
	Operation            *longrunning.Operation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateOperationRequest) Reset()         { *m = UpdateOperationRequest{} }
func (m *UpdateOperationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOperationRequest) ProtoMessage()    {}
func (*UpdateOperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{16}
}

func (m *UpdateOperationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateOperationRequest.Unmarshal(m, b)
}
func (m *UpdateOperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateOperationRequest.Marshal(b, m, deterministic)
}
func (m *UpdateOperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOperationRequest.Merge(m, src)
}
func (m *UpdateOperationRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateOperationRequest.Size(m)
}
func (m *UpdateOperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOperationRequest proto.InternalMessageInfo

func (m *UpdateOperationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOperationRequest) GetOperation() *longrunning.Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// Request for creating an operation
type CreateOperationRequest struct {
	// The projectId that this operation should be created under.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The ID to use for this operation.
	OperationId string `protobuf:"bytes,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// The operation to create.
	Operation            *longrunning.Operation `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateOperationRequest) Reset()         { *m = CreateOperationRequest{} }
func (m *CreateOperationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOperationRequest) ProtoMessage()    {}
func (*CreateOperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{17}
}

func (m *CreateOperationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOperationRequest.Unmarshal(m, b)
}
func (m *CreateOperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOperationRequest.Marshal(b, m, deterministic)
}
func (m *CreateOperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOperationRequest.Merge(m, src)
}
func (m *CreateOperationRequest) XXX_Size() int {
	return xxx_messageInfo_CreateOperationRequest.Size(m)
}
func (m *CreateOperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOperationRequest proto.InternalMessageInfo

func (m *CreateOperationRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateOperationRequest) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *CreateOperationRequest) GetOperation() *longrunning.Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// Describes a Grafeas project.
type Project struct {
	// The name of the project in the form of `projects/{PROJECT_ID}`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{18}
}

func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Metadata for all operations used and required for all operations
// that created by Container Analysis Providers
type OperationMetadata struct {
	// Output only. The time this operation was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time that this operation was marked completed or failed.
	EndTime              *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OperationMetadata) Reset()         { *m = OperationMetadata{} }
func (m *OperationMetadata) String() string { return proto.CompactTextString(m) }
func (*OperationMetadata) ProtoMessage()    {}
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{19}
}

func (m *OperationMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationMetadata.Unmarshal(m, b)
}
func (m *OperationMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationMetadata.Marshal(b, m, deterministic)
}
func (m *OperationMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationMetadata.Merge(m, src)
}
func (m *OperationMetadata) XXX_Size() int {
	return xxx_messageInfo_OperationMetadata.Size(m)
}
func (m *OperationMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_OperationMetadata proto.InternalMessageInfo

func (m *OperationMetadata) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *OperationMetadata) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

// Artifact describes a build product.
type Artifact struct {
	// Name of the artifact. This may be the path to a binary or jar file, or in
	// the case of a container build, the name used to push the container image to
	// Google Container Registry, as presented to `docker push`.
	//
	// This field is deprecated in favor of the plural `names` field; it continues
	// to exist here to allow existing BuildProvenance serialized to json in
	// google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to
	// deserialize back into proto.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
	// container.
	Checksum string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// Artifact ID, if any; for container images, this will be a URL by digest
	// like gcr.io/projectID/imagename@sha256:123456
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Related artifact names. This may be the path to a binary or jar file, or in
	// the case of a container build, the name used to push the container image to
	// Google Container Registry, as presented to `docker push`. Note that a
	// single Artifact ID can have multiple names, for example if two tags are
	// applied to one image.
	Names                []string `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Artifact) Reset()         { *m = Artifact{} }
func (m *Artifact) String() string { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()    {}
func (*Artifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{20}
}

func (m *Artifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artifact.Unmarshal(m, b)
}
func (m *Artifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artifact.Marshal(b, m, deterministic)
}
func (m *Artifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artifact.Merge(m, src)
}
func (m *Artifact) XXX_Size() int {
	return xxx_messageInfo_Artifact.Size(m)
}
func (m *Artifact) XXX_DiscardUnknown() {
	xxx_messageInfo_Artifact.DiscardUnknown(m)
}

var xxx_messageInfo_Artifact proto.InternalMessageInfo

func (m *Artifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Artifact) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *Artifact) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Artifact) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// Note kind that represents a logical attestation "role" or "authority".  For
// example, an organization might have one AttestationAuthority for "QA" and one
// for "build".  This Note is intended to act strictly as a grouping mechanism
// for the attached Occurrences (Attestations).  This grouping mechanism also
// provides a security boundary and provides a single point of lookup to find
// all attached Attestation Occurrences, even if they don't all live in the same
// project.
type AttestationAuthority struct {
	Hint                 *AttestationAuthority_AttestationAuthorityHint `protobuf:"bytes,1,opt,name=hint,proto3" json:"hint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *AttestationAuthority) Reset()         { *m = AttestationAuthority{} }
func (m *AttestationAuthority) String() string { return proto.CompactTextString(m) }
func (*AttestationAuthority) ProtoMessage()    {}
func (*AttestationAuthority) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{21}
}

func (m *AttestationAuthority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestationAuthority.Unmarshal(m, b)
}
func (m *AttestationAuthority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestationAuthority.Marshal(b, m, deterministic)
}
func (m *AttestationAuthority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationAuthority.Merge(m, src)
}
func (m *AttestationAuthority) XXX_Size() int {
	return xxx_messageInfo_AttestationAuthority.Size(m)
}
func (m *AttestationAuthority) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationAuthority.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationAuthority proto.InternalMessageInfo

func (m *AttestationAuthority) GetHint() *AttestationAuthority_AttestationAuthorityHint {
	if m != nil {
		return m.Hint
	}
	return nil
}

type AttestationAuthority_AttestationAuthorityHint struct {
	// The human readable name of this Attestation Authority, e.g. "qa".
	HumanReadableName    string   `protobuf:"bytes,1,opt,name=human_readable_name,json=humanReadableName,proto3" json:"human_readable_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestationAuthority_AttestationAuthorityHint) Reset() {
	*m = AttestationAuthority_AttestationAuthorityHint{}
}
func (m *AttestationAuthority_AttestationAuthorityHint) String() string {
	return proto.CompactTextString(m)
}
func (*AttestationAuthority_AttestationAuthorityHint) ProtoMessage() {}
func (*AttestationAuthority_AttestationAuthorityHint) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{21, 0}
}

func (m *AttestationAuthority_AttestationAuthorityHint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestationAuthority_AttestationAuthorityHint.Unmarshal(m, b)
}
func (m *AttestationAuthority_AttestationAuthorityHint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestationAuthority_AttestationAuthorityHint.Marshal(b, m, deterministic)
}
func (m *AttestationAuthority_AttestationAuthorityHint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationAuthority_AttestationAuthorityHint.Merge(m, src)
}
func (m *AttestationAuthority_AttestationAuthorityHint) XXX_Size() int {
	return xxx_messageInfo_AttestationAuthority_AttestationAuthorityHint.Size(m)
}
func (m *AttestationAuthority_AttestationAuthorityHint) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationAuthority_AttestationAuthorityHint.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationAuthority_AttestationAuthorityHint proto.InternalMessageInfo

func (m *AttestationAuthority_AttestationAuthorityHint) GetHumanReadableName() string {
	if m != nil {
		return m.HumanReadableName
	}
	return ""
}

type AttestationAuthority_AttestationDetails struct {
	// The signature, generally over the `resource_url`, that verifies this
	// attestation.  The semantics of the signature veracity are ultimately
	// determined by the verification engine.
	//
	// Types that are valid to be assigned to Signature:
	//	*AttestationAuthority_AttestationDetails_PgpSignedAttestation
	Signature            isAttestationAuthority_AttestationDetails_Signature `protobuf_oneof:"signature"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *AttestationAuthority_AttestationDetails) Reset() {
	*m = AttestationAuthority_AttestationDetails{}
}
func (m *AttestationAuthority_AttestationDetails) String() string { return proto.CompactTextString(m) }
func (*AttestationAuthority_AttestationDetails) ProtoMessage()    {}
func (*AttestationAuthority_AttestationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{21, 1}
}

func (m *AttestationAuthority_AttestationDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestationAuthority_AttestationDetails.Unmarshal(m, b)
}
func (m *AttestationAuthority_AttestationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestationAuthority_AttestationDetails.Marshal(b, m, deterministic)
}
func (m *AttestationAuthority_AttestationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationAuthority_AttestationDetails.Merge(m, src)
}
func (m *AttestationAuthority_AttestationDetails) XXX_Size() int {
	return xxx_messageInfo_AttestationAuthority_AttestationDetails.Size(m)
}
func (m *AttestationAuthority_AttestationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationAuthority_AttestationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationAuthority_AttestationDetails proto.InternalMessageInfo

type isAttestationAuthority_AttestationDetails_Signature interface {
	isAttestationAuthority_AttestationDetails_Signature()
}

type AttestationAuthority_AttestationDetails_PgpSignedAttestation struct {
	PgpSignedAttestation *PgpSignedAttestation `protobuf:"bytes,1,opt,name=pgp_signed_attestation,json=pgpSignedAttestation,proto3,oneof"`
}

func (*AttestationAuthority_AttestationDetails_PgpSignedAttestation) isAttestationAuthority_AttestationDetails_Signature() {
}

func (m *AttestationAuthority_AttestationDetails) GetSignature() isAttestationAuthority_AttestationDetails_Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *AttestationAuthority_AttestationDetails) GetPgpSignedAttestation() *PgpSignedAttestation {
	if x, ok := m.GetSignature().(*AttestationAuthority_AttestationDetails_PgpSignedAttestation); ok {
		return x.PgpSignedAttestation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AttestationAuthority_AttestationDetails) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AttestationAuthority_AttestationDetails_PgpSignedAttestation)(nil),
	}
}

// Message encapsulating build provenance details.
type BuildDetails struct {
	// The actual provenance
	Provenance *BuildProvenance `protobuf:"bytes,1,opt,name=provenance,proto3" json:"provenance,omitempty"`
	// Serialized JSON representation of the provenance, used in generating the
	// `BuildSignature` in the corresponding Result. After verifying the
	// signature, `provenance_bytes` can be unmarshalled and compared to the
	// provenance to confirm that it is unchanged. A base64-encoded string
	// representation of the provenance bytes is used for the signature in order
	// to interoperate with openssl which expects this format for signature
	// verification.
	//
	// The serialized form is captured both to avoid ambiguity in how the
	// provenance is marshalled to json as well to prevent incompatibilities with
	// future changes.
	ProvenanceBytes      string   `protobuf:"bytes,2,opt,name=provenance_bytes,json=provenanceBytes,proto3" json:"provenance_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildDetails) Reset()         { *m = BuildDetails{} }
func (m *BuildDetails) String() string { return proto.CompactTextString(m) }
func (*BuildDetails) ProtoMessage()    {}
func (*BuildDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{22}
}

func (m *BuildDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildDetails.Unmarshal(m, b)
}
func (m *BuildDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildDetails.Marshal(b, m, deterministic)
}
func (m *BuildDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildDetails.Merge(m, src)
}
func (m *BuildDetails) XXX_Size() int {
	return xxx_messageInfo_BuildDetails.Size(m)
}
func (m *BuildDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildDetails.DiscardUnknown(m)
}

var xxx_messageInfo_BuildDetails proto.InternalMessageInfo

func (m *BuildDetails) GetProvenance() *BuildProvenance {
	if m != nil {
		return m.Provenance
	}
	return nil
}

func (m *BuildDetails) GetProvenanceBytes() string {
	if m != nil {
		return m.ProvenanceBytes
	}
	return ""
}

// Provenance of a build. Contains all information needed to verify the full
// details about the build from source to completion.
type BuildProvenance struct {
	// Unique identifier of the build.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the project.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Commands requested by the build.
	Commands []*Command `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
	// Output of the build.
	BuiltArtifacts []*Artifact `protobuf:"bytes,6,rep,name=built_artifacts,json=builtArtifacts,proto3" json:"built_artifacts,omitempty"`
	// Time at which the build was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time at which execution of the build was started.
	StartTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time at which execution of the build was finished.
	FinishTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	// E-mail address of the user who initiated this build. Note that this was the
	// user's e-mail address at the time the build was initiated; this address may
	// not represent the same end-user for all time.
	Creator string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	// Google Cloud Storage bucket where logs were written.
	LogsBucket string `protobuf:"bytes,13,opt,name=logs_bucket,json=logsBucket,proto3" json:"logs_bucket,omitempty"`
	// Details of the Source input to the build.
	SourceProvenance *Source `protobuf:"bytes,14,opt,name=source_provenance,json=sourceProvenance,proto3" json:"source_provenance,omitempty"`
	// Trigger identifier if the build was triggered automatically; empty if not.
	TriggerId string `protobuf:"bytes,15,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	// Special options applied to this build. This is a catch-all field where
	// build providers can enter any desired additional details.
	BuildOptions map[string]string `protobuf:"bytes,16,rep,name=build_options,json=buildOptions,proto3" json:"build_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Version string of the builder at the time this build was executed.
	BuilderVersion       string   `protobuf:"bytes,17,opt,name=builder_version,json=builderVersion,proto3" json:"builder_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildProvenance) Reset()         { *m = BuildProvenance{} }
func (m *BuildProvenance) String() string { return proto.CompactTextString(m) }
func (*BuildProvenance) ProtoMessage()    {}
func (*BuildProvenance) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{23}
}

func (m *BuildProvenance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildProvenance.Unmarshal(m, b)
}
func (m *BuildProvenance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildProvenance.Marshal(b, m, deterministic)
}
func (m *BuildProvenance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildProvenance.Merge(m, src)
}
func (m *BuildProvenance) XXX_Size() int {
	return xxx_messageInfo_BuildProvenance.Size(m)
}
func (m *BuildProvenance) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildProvenance.DiscardUnknown(m)
}

var xxx_messageInfo_BuildProvenance proto.InternalMessageInfo

func (m *BuildProvenance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BuildProvenance) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *BuildProvenance) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *BuildProvenance) GetBuiltArtifacts() []*Artifact {
	if m != nil {
		return m.BuiltArtifacts
	}
	return nil
}

func (m *BuildProvenance) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *BuildProvenance) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *BuildProvenance) GetFinishTime() *timestamp.Timestamp {
	if m != nil {
		return m.FinishTime
	}
	return nil
}

func (m *BuildProvenance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *BuildProvenance) GetLogsBucket() string {
	if m != nil {
		return m.LogsBucket
	}
	return ""
}

func (m *BuildProvenance) GetSourceProvenance() *Source {
	if m != nil {
		return m.SourceProvenance
	}
	return nil
}

func (m *BuildProvenance) GetTriggerId() string {
	if m != nil {
		return m.TriggerId
	}
	return ""
}

func (m *BuildProvenance) GetBuildOptions() map[string]string {
	if m != nil {
		return m.BuildOptions
	}
	return nil
}

func (m *BuildProvenance) GetBuilderVersion() string {
	if m != nil {
		return m.BuilderVersion
	}
	return ""
}

// Message encapsulating the signature of the verified build.
type BuildSignature struct {
	// Public key of the builder which can be used to verify that the related
	// findings are valid and unchanged. If `key_type` is empty, this defaults
	// to PEM encoded public keys.
	//
	// This field may be empty if `key_id` references an external key.
	//
	// For Cloud Container Builder based signatures, this is a PEM encoded public
	// key. To verify the Cloud Container Builder signature, place the contents of
	// this field into a file (public.pem). The signature field is base64-decoded
	// into its binary representation in signature.bin, and the provenance bytes
	// from `BuildDetails` are base64-decoded into a binary representation in
	// signed.bin. OpenSSL can then verify the signature:
	// `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Signature of the related `BuildProvenance`, encoded in a base64 string.
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// An Id for the key used to sign. This could be either an Id for the key
	// stored in `public_key` (such as the Id or fingerprint for a PGP key, or the
	// CN for a cert), or a reference to an external key (such as a reference to a
	// key in Cloud Key Management Service).
	KeyId string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// The type of the key, either stored in `public_key` or referenced in
	// `key_id`
	KeyType              BuildSignature_KeyType `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3,enum=grafeas.v1alpha1.api.BuildSignature_KeyType" json:"key_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BuildSignature) Reset()         { *m = BuildSignature{} }
func (m *BuildSignature) String() string { return proto.CompactTextString(m) }
func (*BuildSignature) ProtoMessage()    {}
func (*BuildSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{24}
}

func (m *BuildSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildSignature.Unmarshal(m, b)
}
func (m *BuildSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildSignature.Marshal(b, m, deterministic)
}
func (m *BuildSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildSignature.Merge(m, src)
}
func (m *BuildSignature) XXX_Size() int {
	return xxx_messageInfo_BuildSignature.Size(m)
}
func (m *BuildSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildSignature.DiscardUnknown(m)
}

var xxx_messageInfo_BuildSignature proto.InternalMessageInfo

func (m *BuildSignature) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *BuildSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *BuildSignature) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *BuildSignature) GetKeyType() BuildSignature_KeyType {
	if m != nil {
		return m.KeyType
	}
	return BuildSignature_KEY_TYPE_UNSPECIFIED
}

// Note holding the version of the provider's builder and the signature of
// the provenance message in linked BuildDetails.
type BuildType struct {
	// Version of the builder which produced this Note.
	BuilderVersion string `protobuf:"bytes,1,opt,name=builder_version,json=builderVersion,proto3" json:"builder_version,omitempty"`
	// Signature of the build in Occurrences pointing to the Note containing this
	// `BuilderDetails`.
	Signature            *BuildSignature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BuildType) Reset()         { *m = BuildType{} }
func (m *BuildType) String() string { return proto.CompactTextString(m) }
func (*BuildType) ProtoMessage()    {}
func (*BuildType) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{25}
}

func (m *BuildType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildType.Unmarshal(m, b)
}
func (m *BuildType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildType.Marshal(b, m, deterministic)
}
func (m *BuildType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildType.Merge(m, src)
}
func (m *BuildType) XXX_Size() int {
	return xxx_messageInfo_BuildType.Size(m)
}
func (m *BuildType) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildType.DiscardUnknown(m)
}

var xxx_messageInfo_BuildType proto.InternalMessageInfo

func (m *BuildType) GetBuilderVersion() string {
	if m != nil {
		return m.BuilderVersion
	}
	return ""
}

func (m *BuildType) GetSignature() *BuildSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Command describes a step performed as part of the build pipeline.
type Command struct {
	// Name of the command, as presented on the command line, or if the command is
	// packaged as a Docker container, as presented to `docker pull`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Environment variables set before running this Command.
	Env []string `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty"`
	// Command-line arguments used when executing this Command.
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Working directory (relative to project source root) used when running
	// this Command.
	Dir string `protobuf:"bytes,4,opt,name=dir,proto3" json:"dir,omitempty"`
	// Optional unique identifier for this Command, used in wait_for to reference
	// this Command as a dependency.
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// The ID(s) of the Command(s) that this Command depends on.
	WaitFor              []string `protobuf:"bytes,6,rep,name=wait_for,json=waitFor,proto3" json:"wait_for,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{26}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Command) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Command) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *Command) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Command) GetWaitFor() []string {
	if m != nil {
		return m.WaitFor
	}
	return nil
}

// An artifact that can be deployed in some runtime.
type Deployable struct {
	// Resource URI for the artifact being deployed.
	ResourceUri          []string `protobuf:"bytes,1,rep,name=resource_uri,json=resourceUri,proto3" json:"resource_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deployable) Reset()         { *m = Deployable{} }
func (m *Deployable) String() string { return proto.CompactTextString(m) }
func (*Deployable) ProtoMessage()    {}
func (*Deployable) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{27}
}

func (m *Deployable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deployable.Unmarshal(m, b)
}
func (m *Deployable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deployable.Marshal(b, m, deterministic)
}
func (m *Deployable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployable.Merge(m, src)
}
func (m *Deployable) XXX_Size() int {
	return xxx_messageInfo_Deployable.Size(m)
}
func (m *Deployable) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployable.DiscardUnknown(m)
}

var xxx_messageInfo_Deployable proto.InternalMessageInfo

func (m *Deployable) GetResourceUri() []string {
	if m != nil {
		return m.ResourceUri
	}
	return nil
}

// The period during which some deployable was active in a runtime.
type Deployable_DeploymentDetails struct {
	// Identity of the user that triggered this deployment.
	UserEmail string `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// Beginning of the lifetime of this deployment.
	DeployTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=deploy_time,json=deployTime,proto3" json:"deploy_time,omitempty"`
	// End of the lifetime of this deployment.
	UndeployTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=undeploy_time,json=undeployTime,proto3" json:"undeploy_time,omitempty"`
	// Configuration used to create this deployment.
	Config string `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
	// Address of the runtime element hosting this deployment.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Output only. Resource URI for the artifact being deployed taken from the
	// deployable field with the same name.
	ResourceUri []string `protobuf:"bytes,6,rep,name=resource_uri,json=resourceUri,proto3" json:"resource_uri,omitempty"`
	// Platform hosting this deployment.
	Platform             Deployable_DeploymentDetails_Platform `protobuf:"varint,7,opt,name=platform,proto3,enum=grafeas.v1alpha1.api.Deployable_DeploymentDetails_Platform" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *Deployable_DeploymentDetails) Reset()         { *m = Deployable_DeploymentDetails{} }
func (m *Deployable_DeploymentDetails) String() string { return proto.CompactTextString(m) }
func (*Deployable_DeploymentDetails) ProtoMessage()    {}
func (*Deployable_DeploymentDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{27, 0}
}

func (m *Deployable_DeploymentDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deployable_DeploymentDetails.Unmarshal(m, b)
}
func (m *Deployable_DeploymentDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deployable_DeploymentDetails.Marshal(b, m, deterministic)
}
func (m *Deployable_DeploymentDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployable_DeploymentDetails.Merge(m, src)
}
func (m *Deployable_DeploymentDetails) XXX_Size() int {
	return xxx_messageInfo_Deployable_DeploymentDetails.Size(m)
}
func (m *Deployable_DeploymentDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployable_DeploymentDetails.DiscardUnknown(m)
}

var xxx_messageInfo_Deployable_DeploymentDetails proto.InternalMessageInfo

func (m *Deployable_DeploymentDetails) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *Deployable_DeploymentDetails) GetDeployTime() *timestamp.Timestamp {
	if m != nil {
		return m.DeployTime
	}
	return nil
}

func (m *Deployable_DeploymentDetails) GetUndeployTime() *timestamp.Timestamp {
	if m != nil {
		return m.UndeployTime
	}
	return nil
}

func (m *Deployable_DeploymentDetails) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *Deployable_DeploymentDetails) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Deployable_DeploymentDetails) GetResourceUri() []string {
	if m != nil {
		return m.ResourceUri
	}
	return nil
}

func (m *Deployable_DeploymentDetails) GetPlatform() Deployable_DeploymentDetails_Platform {
	if m != nil {
		return m.Platform
	}
	return Deployable_DeploymentDetails_PLATFORM_UNSPECIFIED
}

// DockerImage holds types defining base image notes
// and derived image occurrences.
type DockerImage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerImage) Reset()         { *m = DockerImage{} }
func (m *DockerImage) String() string { return proto.CompactTextString(m) }
func (*DockerImage) ProtoMessage()    {}
func (*DockerImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{28}
}

func (m *DockerImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DockerImage.Unmarshal(m, b)
}
func (m *DockerImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DockerImage.Marshal(b, m, deterministic)
}
func (m *DockerImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerImage.Merge(m, src)
}
func (m *DockerImage) XXX_Size() int {
	return xxx_messageInfo_DockerImage.Size(m)
}
func (m *DockerImage) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerImage.DiscardUnknown(m)
}

var xxx_messageInfo_DockerImage proto.InternalMessageInfo

// Layer holds metadata specific to a layer of a Docker image.
type DockerImage_Layer struct {
	// The recovered Dockerfile directive used to construct this layer.
	Directive DockerImage_Layer_Directive `protobuf:"varint,1,opt,name=directive,proto3,enum=grafeas.v1alpha1.api.DockerImage_Layer_Directive" json:"directive,omitempty"`
	// The recovered arguments to the Dockerfile directive.
	Arguments            string   `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerImage_Layer) Reset()         { *m = DockerImage_Layer{} }
func (m *DockerImage_Layer) String() string { return proto.CompactTextString(m) }
func (*DockerImage_Layer) ProtoMessage()    {}
func (*DockerImage_Layer) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{28, 0}
}

func (m *DockerImage_Layer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DockerImage_Layer.Unmarshal(m, b)
}
func (m *DockerImage_Layer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DockerImage_Layer.Marshal(b, m, deterministic)
}
func (m *DockerImage_Layer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerImage_Layer.Merge(m, src)
}
func (m *DockerImage_Layer) XXX_Size() int {
	return xxx_messageInfo_DockerImage_Layer.Size(m)
}
func (m *DockerImage_Layer) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerImage_Layer.DiscardUnknown(m)
}

var xxx_messageInfo_DockerImage_Layer proto.InternalMessageInfo

func (m *DockerImage_Layer) GetDirective() DockerImage_Layer_Directive {
	if m != nil {
		return m.Directive
	}
	return DockerImage_Layer_DIRECTIVE_UNSPECIFIED
}

func (m *DockerImage_Layer) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

// A set of properties that uniquely identify a given Docker image.
type DockerImage_Fingerprint struct {
	// The layer-id of the final layer in the Docker image's v1
	// representation.
	// This field can be used as a filter in list requests.
	V1Name string `protobuf:"bytes,1,opt,name=v1_name,json=v1Name,proto3" json:"v1_name,omitempty"`
	// The ordered list of v2 blobs that represent a given image.
	V2Blob []string `protobuf:"bytes,2,rep,name=v2_blob,json=v2Blob,proto3" json:"v2_blob,omitempty"`
	// Output only. The name of the image's v2 blobs computed via:
	//   [bottom] := v2_blob[bottom]
	//   [N] := sha256(v2_blob[N] + " " + v2_name[N+1])
	// Only the name of the final blob is kept.
	// This field can be used as a filter in list requests.
	V2Name               string   `protobuf:"bytes,3,opt,name=v2_name,json=v2Name,proto3" json:"v2_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerImage_Fingerprint) Reset()         { *m = DockerImage_Fingerprint{} }
func (m *DockerImage_Fingerprint) String() string { return proto.CompactTextString(m) }
func (*DockerImage_Fingerprint) ProtoMessage()    {}
func (*DockerImage_Fingerprint) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{28, 1}
}

func (m *DockerImage_Fingerprint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DockerImage_Fingerprint.Unmarshal(m, b)
}
func (m *DockerImage_Fingerprint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DockerImage_Fingerprint.Marshal(b, m, deterministic)
}
func (m *DockerImage_Fingerprint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerImage_Fingerprint.Merge(m, src)
}
func (m *DockerImage_Fingerprint) XXX_Size() int {
	return xxx_messageInfo_DockerImage_Fingerprint.Size(m)
}
func (m *DockerImage_Fingerprint) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerImage_Fingerprint.DiscardUnknown(m)
}

var xxx_messageInfo_DockerImage_Fingerprint proto.InternalMessageInfo

func (m *DockerImage_Fingerprint) GetV1Name() string {
	if m != nil {
		return m.V1Name
	}
	return ""
}

func (m *DockerImage_Fingerprint) GetV2Blob() []string {
	if m != nil {
		return m.V2Blob
	}
	return nil
}

func (m *DockerImage_Fingerprint) GetV2Name() string {
	if m != nil {
		return m.V2Name
	}
	return ""
}

// Basis describes the base image portion (Note) of the DockerImage
// relationship.  Linked occurrences are derived from this or an
// equivalent image via:
//   FROM <Basis.resource_url>
// Or an equivalent reference, e.g. a tag of the resource_url.
type DockerImage_Basis struct {
	// The resource_url for the resource representing the basis of
	// associated occurrence images.
	ResourceUrl string `protobuf:"bytes,1,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	// The fingerprint of the base image
	Fingerprint          *DockerImage_Fingerprint `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DockerImage_Basis) Reset()         { *m = DockerImage_Basis{} }
func (m *DockerImage_Basis) String() string { return proto.CompactTextString(m) }
func (*DockerImage_Basis) ProtoMessage()    {}
func (*DockerImage_Basis) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{28, 2}
}

func (m *DockerImage_Basis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DockerImage_Basis.Unmarshal(m, b)
}
func (m *DockerImage_Basis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DockerImage_Basis.Marshal(b, m, deterministic)
}
func (m *DockerImage_Basis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerImage_Basis.Merge(m, src)
}
func (m *DockerImage_Basis) XXX_Size() int {
	return xxx_messageInfo_DockerImage_Basis.Size(m)
}
func (m *DockerImage_Basis) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerImage_Basis.DiscardUnknown(m)
}

var xxx_messageInfo_DockerImage_Basis proto.InternalMessageInfo

func (m *DockerImage_Basis) GetResourceUrl() string {
	if m != nil {
		return m.ResourceUrl
	}
	return ""
}

func (m *DockerImage_Basis) GetFingerprint() *DockerImage_Fingerprint {
	if m != nil {
		return m.Fingerprint
	}
	return nil
}

// Derived describes the derived image portion (Occurrence) of the
// DockerImage relationship.  This image would be produced from a Dockerfile
// with FROM <DockerImage.Basis in attached Note>.
type DockerImage_DerivedDetails struct {
	// The fingerprint of the derived image
	Fingerprint *DockerImage_Fingerprint `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Output only. The number of layers by which this image differs from
	// the associated image basis.
	Distance uint32 `protobuf:"varint,2,opt,name=distance,proto3" json:"distance,omitempty"`
	// This contains layer-specific metadata, if populated it
	// has length "distance" and is ordered with [distance] being the
	// layer immediately following the base image and [1]
	// being the final layer.
	LayerInfo []*DockerImage_Layer `protobuf:"bytes,3,rep,name=layer_info,json=layerInfo,proto3" json:"layer_info,omitempty"`
	// Output only.This contains the base image url for the derived image
	// Occurrence
	BaseResourceUrl      string   `protobuf:"bytes,4,opt,name=base_resource_url,json=baseResourceUrl,proto3" json:"base_resource_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerImage_DerivedDetails) Reset()         { *m = DockerImage_DerivedDetails{} }
func (m *DockerImage_DerivedDetails) String() string { return proto.CompactTextString(m) }
func (*DockerImage_DerivedDetails) ProtoMessage()    {}
func (*DockerImage_DerivedDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{28, 3}
}

func (m *DockerImage_DerivedDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DockerImage_DerivedDetails.Unmarshal(m, b)
}
func (m *DockerImage_DerivedDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DockerImage_DerivedDetails.Marshal(b, m, deterministic)
}
func (m *DockerImage_DerivedDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerImage_DerivedDetails.Merge(m, src)
}
func (m *DockerImage_DerivedDetails) XXX_Size() int {
	return xxx_messageInfo_DockerImage_DerivedDetails.Size(m)
}
func (m *DockerImage_DerivedDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerImage_DerivedDetails.DiscardUnknown(m)
}

var xxx_messageInfo_DockerImage_DerivedDetails proto.InternalMessageInfo

func (m *DockerImage_DerivedDetails) GetFingerprint() *DockerImage_Fingerprint {
	if m != nil {
		return m.Fingerprint
	}
	return nil
}

func (m *DockerImage_DerivedDetails) GetDistance() uint32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *DockerImage_DerivedDetails) GetLayerInfo() []*DockerImage_Layer {
	if m != nil {
		return m.LayerInfo
	}
	return nil
}

func (m *DockerImage_DerivedDetails) GetBaseResourceUrl() string {
	if m != nil {
		return m.BaseResourceUrl
	}
	return ""
}

// A note that indicates a type of analysis a provider would perform. This note
// exists in a provider's project. A `Discovery` occurrence is created in a
// consumer's project at the start of analysis. The occurrence's operation will
// indicate the status of the analysis. Absence of an occurrence linked to this
// note for a resource indicates that analysis hasn't started.
type Discovery struct {
	// The kind of analysis that is handled by this discovery.
	AnalysisKind         Note_Kind `protobuf:"varint,1,opt,name=analysis_kind,json=analysisKind,proto3,enum=grafeas.v1alpha1.api.Note_Kind" json:"analysis_kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Discovery) Reset()         { *m = Discovery{} }
func (m *Discovery) String() string { return proto.CompactTextString(m) }
func (*Discovery) ProtoMessage()    {}
func (*Discovery) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{29}
}

func (m *Discovery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Discovery.Unmarshal(m, b)
}
func (m *Discovery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Discovery.Marshal(b, m, deterministic)
}
func (m *Discovery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Discovery.Merge(m, src)
}
func (m *Discovery) XXX_Size() int {
	return xxx_messageInfo_Discovery.Size(m)
}
func (m *Discovery) XXX_DiscardUnknown() {
	xxx_messageInfo_Discovery.DiscardUnknown(m)
}

var xxx_messageInfo_Discovery proto.InternalMessageInfo

func (m *Discovery) GetAnalysisKind() Note_Kind {
	if m != nil {
		return m.AnalysisKind
	}
	return Note_KIND_UNSPECIFIED
}

// Provides information about the scan status of a discovered resource.
type Discovery_DiscoveredDetails struct {
	// Output only. An operation that indicates the status of the current scan.
	Operation            *longrunning.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Discovery_DiscoveredDetails) Reset()         { *m = Discovery_DiscoveredDetails{} }
func (m *Discovery_DiscoveredDetails) String() string { return proto.CompactTextString(m) }
func (*Discovery_DiscoveredDetails) ProtoMessage()    {}
func (*Discovery_DiscoveredDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{29, 0}
}

func (m *Discovery_DiscoveredDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Discovery_DiscoveredDetails.Unmarshal(m, b)
}
func (m *Discovery_DiscoveredDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Discovery_DiscoveredDetails.Marshal(b, m, deterministic)
}
func (m *Discovery_DiscoveredDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Discovery_DiscoveredDetails.Merge(m, src)
}
func (m *Discovery_DiscoveredDetails) XXX_Size() int {
	return xxx_messageInfo_Discovery_DiscoveredDetails.Size(m)
}
func (m *Discovery_DiscoveredDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_Discovery_DiscoveredDetails.DiscardUnknown(m)
}

var xxx_messageInfo_Discovery_DiscoveredDetails proto.InternalMessageInfo

func (m *Discovery_DiscoveredDetails) GetOperation() *longrunning.Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// Container message for hashes of byte content of files, used in Source
// messages to verify integrity of source input to the build.
type FileHashes struct {
	// Collection of file hashes.
	FileHash             []*Hash  `protobuf:"bytes,1,rep,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileHashes) Reset()         { *m = FileHashes{} }
func (m *FileHashes) String() string { return proto.CompactTextString(m) }
func (*FileHashes) ProtoMessage()    {}
func (*FileHashes) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{30}
}

func (m *FileHashes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileHashes.Unmarshal(m, b)
}
func (m *FileHashes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileHashes.Marshal(b, m, deterministic)
}
func (m *FileHashes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileHashes.Merge(m, src)
}
func (m *FileHashes) XXX_Size() int {
	return xxx_messageInfo_FileHashes.Size(m)
}
func (m *FileHashes) XXX_DiscardUnknown() {
	xxx_messageInfo_FileHashes.DiscardUnknown(m)
}

var xxx_messageInfo_FileHashes proto.InternalMessageInfo

func (m *FileHashes) GetFileHash() []*Hash {
	if m != nil {
		return m.FileHash
	}
	return nil
}

// Container message for hash values.
type Hash struct {
	// The type of hash that was performed.
	Type Hash_HashType `protobuf:"varint,1,opt,name=type,proto3,enum=grafeas.v1alpha1.api.Hash_HashType" json:"type,omitempty"`
	// The hash value.
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hash) Reset()         { *m = Hash{} }
func (m *Hash) String() string { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()    {}
func (*Hash) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{31}
}

func (m *Hash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hash.Unmarshal(m, b)
}
func (m *Hash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hash.Marshal(b, m, deterministic)
}
func (m *Hash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hash.Merge(m, src)
}
func (m *Hash) XXX_Size() int {
	return xxx_messageInfo_Hash.Size(m)
}
func (m *Hash) XXX_DiscardUnknown() {
	xxx_messageInfo_Hash.DiscardUnknown(m)
}

var xxx_messageInfo_Hash proto.InternalMessageInfo

func (m *Hash) GetType() Hash_HashType {
	if m != nil {
		return m.Type
	}
	return Hash_NONE
}

func (m *Hash) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Provides a detailed description of a `Note`.
type Note struct {
	// The name of the note in the form "projects/{PROJECT_ID}/notes/{NOTE_ID}".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A one sentence description of this `Note`.
	ShortDescription string `protobuf:"bytes,3,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// A detailed description of this `Note`.
	LongDescription string `protobuf:"bytes,4,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	// Output only. This explicitly denotes which kind of note is specified. This
	// field can be used as a filter in list requests.
	Kind Note_Kind `protobuf:"varint,9,opt,name=kind,proto3,enum=grafeas.v1alpha1.api.Note_Kind" json:"kind,omitempty"`
	// The type of note.
	//
	// Types that are valid to be assigned to NoteType:
	//	*Note_VulnerabilityType
	//	*Note_BuildType
	//	*Note_BaseImage
	//	*Note_Package
	//	*Note_Deployable
	//	*Note_Discovery
	//	*Note_AttestationAuthority
	NoteType isNote_NoteType `protobuf_oneof:"note_type"`
	// URLs associated with this note.
	RelatedUrl []*Note_RelatedUrl `protobuf:"bytes,7,rep,name=related_url,json=relatedUrl,proto3" json:"related_url,omitempty"`
	// Time of expiration for this note, null if note does not expire.
	ExpirationTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	// Output only. The time this note was created. This field can be used as a
	// filter in list requests.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time this note was last updated. This field can be used as
	// a filter in list requests.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The name of the `Operation` in the form
	// "projects/{PROJECT_ID}/operations/{OPERATION_ID}".
	OperationName        string   `protobuf:"bytes,19,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Note) Reset()         { *m = Note{} }
func (m *Note) String() string { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()    {}
func (*Note) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{32}
}

func (m *Note) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Note.Unmarshal(m, b)
}
func (m *Note) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Note.Marshal(b, m, deterministic)
}
func (m *Note) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Note.Merge(m, src)
}
func (m *Note) XXX_Size() int {
	return xxx_messageInfo_Note.Size(m)
}
func (m *Note) XXX_DiscardUnknown() {
	xxx_messageInfo_Note.DiscardUnknown(m)
}

var xxx_messageInfo_Note proto.InternalMessageInfo

func (m *Note) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Note) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *Note) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func (m *Note) GetKind() Note_Kind {
	if m != nil {
		return m.Kind
	}
	return Note_KIND_UNSPECIFIED
}

type isNote_NoteType interface {
	isNote_NoteType()
}

type Note_VulnerabilityType struct {
	VulnerabilityType *VulnerabilityType `protobuf:"bytes,6,opt,name=vulnerability_type,json=vulnerabilityType,proto3,oneof"`
}

type Note_BuildType struct {
	BuildType *BuildType `protobuf:"bytes,8,opt,name=build_type,json=buildType,proto3,oneof"`
}

type Note_BaseImage struct {
	BaseImage *DockerImage_Basis `protobuf:"bytes,13,opt,name=base_image,json=baseImage,proto3,oneof"`
}

type Note_Package struct {
	Package *PackageManager_Package `protobuf:"bytes,14,opt,name=package,proto3,oneof"`
}

type Note_Deployable struct {
	Deployable *Deployable `protobuf:"bytes,17,opt,name=deployable,proto3,oneof"`
}

type Note_Discovery struct {
	Discovery *Discovery `protobuf:"bytes,18,opt,name=discovery,proto3,oneof"`
}

type Note_AttestationAuthority struct {
	AttestationAuthority *AttestationAuthority `protobuf:"bytes,20,opt,name=attestation_authority,json=attestationAuthority,proto3,oneof"`
}

func (*Note_VulnerabilityType) isNote_NoteType() {}

func (*Note_BuildType) isNote_NoteType() {}

func (*Note_BaseImage) isNote_NoteType() {}

func (*Note_Package) isNote_NoteType() {}

func (*Note_Deployable) isNote_NoteType() {}

func (*Note_Discovery) isNote_NoteType() {}

func (*Note_AttestationAuthority) isNote_NoteType() {}

func (m *Note) GetNoteType() isNote_NoteType {
	if m != nil {
		return m.NoteType
	}
	return nil
}

func (m *Note) GetVulnerabilityType() *VulnerabilityType {
	if x, ok := m.GetNoteType().(*Note_VulnerabilityType); ok {
		return x.VulnerabilityType
	}
	return nil
}

func (m *Note) GetBuildType() *BuildType {
	if x, ok := m.GetNoteType().(*Note_BuildType); ok {
		return x.BuildType
	}
	return nil
}

func (m *Note) GetBaseImage() *DockerImage_Basis {
	if x, ok := m.GetNoteType().(*Note_BaseImage); ok {
		return x.BaseImage
	}
	return nil
}

func (m *Note) GetPackage() *PackageManager_Package {
	if x, ok := m.GetNoteType().(*Note_Package); ok {
		return x.Package
	}
	return nil
}

func (m *Note) GetDeployable() *Deployable {
	if x, ok := m.GetNoteType().(*Note_Deployable); ok {
		return x.Deployable
	}
	return nil
}

func (m *Note) GetDiscovery() *Discovery {
	if x, ok := m.GetNoteType().(*Note_Discovery); ok {
		return x.Discovery
	}
	return nil
}

func (m *Note) GetAttestationAuthority() *AttestationAuthority {
	if x, ok := m.GetNoteType().(*Note_AttestationAuthority); ok {
		return x.AttestationAuthority
	}
	return nil
}

func (m *Note) GetRelatedUrl() []*Note_RelatedUrl {
	if m != nil {
		return m.RelatedUrl
	}
	return nil
}

func (m *Note) GetExpirationTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *Note) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Note) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Note) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Note) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Note_VulnerabilityType)(nil),
		(*Note_BuildType)(nil),
		(*Note_BaseImage)(nil),
		(*Note_Package)(nil),
		(*Note_Deployable)(nil),
		(*Note_Discovery)(nil),
		(*Note_AttestationAuthority)(nil),
	}
}

// Metadata for any related URL information.
type Note_RelatedUrl struct {
	// Specific URL to associate with the note.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Label to describe usage of the URL.
	Label                string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Note_RelatedUrl) Reset()         { *m = Note_RelatedUrl{} }
func (m *Note_RelatedUrl) String() string { return proto.CompactTextString(m) }
func (*Note_RelatedUrl) ProtoMessage()    {}
func (*Note_RelatedUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{32, 0}
}

func (m *Note_RelatedUrl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Note_RelatedUrl.Unmarshal(m, b)
}
func (m *Note_RelatedUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Note_RelatedUrl.Marshal(b, m, deterministic)
}
func (m *Note_RelatedUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Note_RelatedUrl.Merge(m, src)
}
func (m *Note_RelatedUrl) XXX_Size() int {
	return xxx_messageInfo_Note_RelatedUrl.Size(m)
}
func (m *Note_RelatedUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_Note_RelatedUrl.DiscardUnknown(m)
}

var xxx_messageInfo_Note_RelatedUrl proto.InternalMessageInfo

func (m *Note_RelatedUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Note_RelatedUrl) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

// `Occurrence` includes information about analysis occurrences for an image.
type Occurrence struct {
	// Output only. The name of the `Occurrence` in the form
	// "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The unique URL of the image or the container for which the `Occurrence`
	// applies. For example, https://gcr.io/project/image@sha256:foo This field
	// can be used as a filter in list requests.
	ResourceUrl string `protobuf:"bytes,2,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	// An analysis note associated with this image, in the form
	// "providers/{provider_id}/notes/{NOTE_ID}"
	// This field can be used as a filter in list requests.
	NoteName string `protobuf:"bytes,3,opt,name=note_name,json=noteName,proto3" json:"note_name,omitempty"`
	// Output only. This explicitly denotes which of the `Occurrence` details are
	// specified. This field can be used as a filter in list requests.
	Kind Note_Kind `protobuf:"varint,6,opt,name=kind,proto3,enum=grafeas.v1alpha1.api.Note_Kind" json:"kind,omitempty"`
	// Describes the details of the vulnerability `Note` found in this resource.
	//
	// Types that are valid to be assigned to Details:
	//	*Occurrence_VulnerabilityDetails
	//	*Occurrence_BuildDetails
	//	*Occurrence_DerivedImageDetails
	//	*Occurrence_InstallationDetails
	//	*Occurrence_DeploymentDetails
	//	*Occurrence_DiscoveredDetails
	//	*Occurrence_AttestationDetails
	Details isOccurrence_Details `protobuf_oneof:"details"`
	// A description of actions that can be taken to remedy the `Note`
	Remediation string `protobuf:"bytes,5,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Output only. The time this `Occurrence` was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time this `Occurrence` was last updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The name of the `Operation` in the form
	// "projects/{PROJECT_ID}/operations/{OPERATION_ID}"
	OperationName        string   `protobuf:"bytes,19,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Occurrence) Reset()         { *m = Occurrence{} }
func (m *Occurrence) String() string { return proto.CompactTextString(m) }
func (*Occurrence) ProtoMessage()    {}
func (*Occurrence) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{33}
}

func (m *Occurrence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Occurrence.Unmarshal(m, b)
}
func (m *Occurrence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Occurrence.Marshal(b, m, deterministic)
}
func (m *Occurrence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Occurrence.Merge(m, src)
}
func (m *Occurrence) XXX_Size() int {
	return xxx_messageInfo_Occurrence.Size(m)
}
func (m *Occurrence) XXX_DiscardUnknown() {
	xxx_messageInfo_Occurrence.DiscardUnknown(m)
}

var xxx_messageInfo_Occurrence proto.InternalMessageInfo

func (m *Occurrence) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Occurrence) GetResourceUrl() string {
	if m != nil {
		return m.ResourceUrl
	}
	return ""
}

func (m *Occurrence) GetNoteName() string {
	if m != nil {
		return m.NoteName
	}
	return ""
}

func (m *Occurrence) GetKind() Note_Kind {
	if m != nil {
		return m.Kind
	}
	return Note_KIND_UNSPECIFIED
}

type isOccurrence_Details interface {
	isOccurrence_Details()
}

type Occurrence_VulnerabilityDetails struct {
	VulnerabilityDetails *VulnerabilityType_VulnerabilityDetails `protobuf:"bytes,8,opt,name=vulnerability_details,json=vulnerabilityDetails,proto3,oneof"`
}

type Occurrence_BuildDetails struct {
	BuildDetails *BuildDetails `protobuf:"bytes,7,opt,name=build_details,json=buildDetails,proto3,oneof"`
}

type Occurrence_DerivedImageDetails struct {
	DerivedImageDetails *DockerImage_DerivedDetails `protobuf:"bytes,11,opt,name=derived_image_details,json=derivedImageDetails,proto3,oneof"`
}

type Occurrence_InstallationDetails struct {
	InstallationDetails *PackageManager_InstallationDetails `protobuf:"bytes,12,opt,name=installation_details,json=installationDetails,proto3,oneof"`
}

type Occurrence_DeploymentDetails struct {
	DeploymentDetails *Deployable_DeploymentDetails `protobuf:"bytes,14,opt,name=deployment_details,json=deploymentDetails,proto3,oneof"`
}

type Occurrence_DiscoveredDetails struct {
	DiscoveredDetails *Discovery_DiscoveredDetails `protobuf:"bytes,15,opt,name=discovered_details,json=discoveredDetails,proto3,oneof"`
}

type Occurrence_AttestationDetails struct {
	AttestationDetails *AttestationAuthority_AttestationDetails `protobuf:"bytes,16,opt,name=attestation_details,json=attestationDetails,proto3,oneof"`
}

func (*Occurrence_VulnerabilityDetails) isOccurrence_Details() {}

func (*Occurrence_BuildDetails) isOccurrence_Details() {}

func (*Occurrence_DerivedImageDetails) isOccurrence_Details() {}

func (*Occurrence_InstallationDetails) isOccurrence_Details() {}

func (*Occurrence_DeploymentDetails) isOccurrence_Details() {}

func (*Occurrence_DiscoveredDetails) isOccurrence_Details() {}

func (*Occurrence_AttestationDetails) isOccurrence_Details() {}

func (m *Occurrence) GetDetails() isOccurrence_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Occurrence) GetVulnerabilityDetails() *VulnerabilityType_VulnerabilityDetails {
	if x, ok := m.GetDetails().(*Occurrence_VulnerabilityDetails); ok {
		return x.VulnerabilityDetails
	}
	return nil
}

func (m *Occurrence) GetBuildDetails() *BuildDetails {
	if x, ok := m.GetDetails().(*Occurrence_BuildDetails); ok {
		return x.BuildDetails
	}
	return nil
}

func (m *Occurrence) GetDerivedImageDetails() *DockerImage_DerivedDetails {
	if x, ok := m.GetDetails().(*Occurrence_DerivedImageDetails); ok {
		return x.DerivedImageDetails
	}
	return nil
}

func (m *Occurrence) GetInstallationDetails() *PackageManager_InstallationDetails {
	if x, ok := m.GetDetails().(*Occurrence_InstallationDetails); ok {
		return x.InstallationDetails
	}
	return nil
}

func (m *Occurrence) GetDeploymentDetails() *Deployable_DeploymentDetails {
	if x, ok := m.GetDetails().(*Occurrence_DeploymentDetails); ok {
		return x.DeploymentDetails
	}
	return nil
}

func (m *Occurrence) GetDiscoveredDetails() *Discovery_DiscoveredDetails {
	if x, ok := m.GetDetails().(*Occurrence_DiscoveredDetails); ok {
		return x.DiscoveredDetails
	}
	return nil
}

func (m *Occurrence) GetAttestationDetails() *AttestationAuthority_AttestationDetails {
	if x, ok := m.GetDetails().(*Occurrence_AttestationDetails); ok {
		return x.AttestationDetails
	}
	return nil
}

func (m *Occurrence) GetRemediation() string {
	if m != nil {
		return m.Remediation
	}
	return ""
}

func (m *Occurrence) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Occurrence) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Occurrence) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Occurrence) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Occurrence_VulnerabilityDetails)(nil),
		(*Occurrence_BuildDetails)(nil),
		(*Occurrence_DerivedImageDetails)(nil),
		(*Occurrence_InstallationDetails)(nil),
		(*Occurrence_DeploymentDetails)(nil),
		(*Occurrence_DiscoveredDetails)(nil),
		(*Occurrence_AttestationDetails)(nil),
	}
}

// PackageManager provides metadata about available / installed packages.
type PackageManager struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageManager) Reset()         { *m = PackageManager{} }
func (m *PackageManager) String() string { return proto.CompactTextString(m) }
func (*PackageManager) ProtoMessage()    {}
func (*PackageManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{34}
}

func (m *PackageManager) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageManager.Unmarshal(m, b)
}
func (m *PackageManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageManager.Marshal(b, m, deterministic)
}
func (m *PackageManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageManager.Merge(m, src)
}
func (m *PackageManager) XXX_Size() int {
	return xxx_messageInfo_PackageManager.Size(m)
}
func (m *PackageManager) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageManager.DiscardUnknown(m)
}

var xxx_messageInfo_PackageManager proto.InternalMessageInfo

// This represents a particular channel of distribution for a given package.
// e.g. Debian's jessie-backports dpkg mirror
type PackageManager_Distribution struct {
	// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
	// denoting the package manager version distributing a package.
	CpeUri string `protobuf:"bytes,1,opt,name=cpe_uri,json=cpeUri,proto3" json:"cpe_uri,omitempty"`
	// The CPU architecture for which packages in this distribution
	// channel were built
	Architecture PackageManager_Architecture `protobuf:"varint,2,opt,name=architecture,proto3,enum=grafeas.v1alpha1.api.PackageManager_Architecture" json:"architecture,omitempty"`
	// The latest available version of this package in
	// this distribution channel.
	LatestVersion *VulnerabilityType_Version `protobuf:"bytes,3,opt,name=latest_version,json=latestVersion,proto3" json:"latest_version,omitempty"`
	// A freeform string denoting the maintainer of this package.
	Maintainer string `protobuf:"bytes,4,opt,name=maintainer,proto3" json:"maintainer,omitempty"`
	// The distribution channel-specific homepage for this package.
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// The distribution channel-specific description of this package.
	Description          string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageManager_Distribution) Reset()         { *m = PackageManager_Distribution{} }
func (m *PackageManager_Distribution) String() string { return proto.CompactTextString(m) }
func (*PackageManager_Distribution) ProtoMessage()    {}
func (*PackageManager_Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{34, 0}
}

func (m *PackageManager_Distribution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageManager_Distribution.Unmarshal(m, b)
}
func (m *PackageManager_Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageManager_Distribution.Marshal(b, m, deterministic)
}
func (m *PackageManager_Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageManager_Distribution.Merge(m, src)
}
func (m *PackageManager_Distribution) XXX_Size() int {
	return xxx_messageInfo_PackageManager_Distribution.Size(m)
}
func (m *PackageManager_Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageManager_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_PackageManager_Distribution proto.InternalMessageInfo

func (m *PackageManager_Distribution) GetCpeUri() string {
	if m != nil {
		return m.CpeUri
	}
	return ""
}

func (m *PackageManager_Distribution) GetArchitecture() PackageManager_Architecture {
	if m != nil {
		return m.Architecture
	}
	return PackageManager_ARCHITECTURE_UNSPECIFIED
}

func (m *PackageManager_Distribution) GetLatestVersion() *VulnerabilityType_Version {
	if m != nil {
		return m.LatestVersion
	}
	return nil
}

func (m *PackageManager_Distribution) GetMaintainer() string {
	if m != nil {
		return m.Maintainer
	}
	return ""
}

func (m *PackageManager_Distribution) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PackageManager_Distribution) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// An occurrence of a particular package installation found within a
// system's filesystem.
// e.g. glibc was found in /var/lib/dpkg/status
type PackageManager_Location struct {
	// The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)
	// denoting the package manager version distributing a package.
	CpeUri string `protobuf:"bytes,1,opt,name=cpe_uri,json=cpeUri,proto3" json:"cpe_uri,omitempty"`
	// The version installed at this location.
	Version *VulnerabilityType_Version `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The path from which we gathered that this package/version is installed.
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageManager_Location) Reset()         { *m = PackageManager_Location{} }
func (m *PackageManager_Location) String() string { return proto.CompactTextString(m) }
func (*PackageManager_Location) ProtoMessage()    {}
func (*PackageManager_Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{34, 1}
}

func (m *PackageManager_Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageManager_Location.Unmarshal(m, b)
}
func (m *PackageManager_Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageManager_Location.Marshal(b, m, deterministic)
}
func (m *PackageManager_Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageManager_Location.Merge(m, src)
}
func (m *PackageManager_Location) XXX_Size() int {
	return xxx_messageInfo_PackageManager_Location.Size(m)
}
func (m *PackageManager_Location) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageManager_Location.DiscardUnknown(m)
}

var xxx_messageInfo_PackageManager_Location proto.InternalMessageInfo

func (m *PackageManager_Location) GetCpeUri() string {
	if m != nil {
		return m.CpeUri
	}
	return ""
}

func (m *PackageManager_Location) GetVersion() *VulnerabilityType_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *PackageManager_Location) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// This represents a particular package that is distributed over
// various channels.
// e.g. glibc (aka libc6) is distributed by many, at various versions.
type PackageManager_Package struct {
	// The name of the package.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The various channels by which a package is distributed.
	Distribution         []*PackageManager_Distribution `protobuf:"bytes,10,rep,name=distribution,proto3" json:"distribution,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PackageManager_Package) Reset()         { *m = PackageManager_Package{} }
func (m *PackageManager_Package) String() string { return proto.CompactTextString(m) }
func (*PackageManager_Package) ProtoMessage()    {}
func (*PackageManager_Package) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{34, 2}
}

func (m *PackageManager_Package) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageManager_Package.Unmarshal(m, b)
}
func (m *PackageManager_Package) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageManager_Package.Marshal(b, m, deterministic)
}
func (m *PackageManager_Package) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageManager_Package.Merge(m, src)
}
func (m *PackageManager_Package) XXX_Size() int {
	return xxx_messageInfo_PackageManager_Package.Size(m)
}
func (m *PackageManager_Package) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageManager_Package.DiscardUnknown(m)
}

var xxx_messageInfo_PackageManager_Package proto.InternalMessageInfo

func (m *PackageManager_Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PackageManager_Package) GetDistribution() []*PackageManager_Distribution {
	if m != nil {
		return m.Distribution
	}
	return nil
}

// This represents how a particular software package may be installed on
// a system.
type PackageManager_InstallationDetails struct {
	// Output only. The name of the installed package.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// All of the places within the filesystem versions of this package
	// have been found.
	Location             []*PackageManager_Location `protobuf:"bytes,2,rep,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PackageManager_InstallationDetails) Reset()         { *m = PackageManager_InstallationDetails{} }
func (m *PackageManager_InstallationDetails) String() string { return proto.CompactTextString(m) }
func (*PackageManager_InstallationDetails) ProtoMessage()    {}
func (*PackageManager_InstallationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{34, 3}
}

func (m *PackageManager_InstallationDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageManager_InstallationDetails.Unmarshal(m, b)
}
func (m *PackageManager_InstallationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageManager_InstallationDetails.Marshal(b, m, deterministic)
}
func (m *PackageManager_InstallationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageManager_InstallationDetails.Merge(m, src)
}
func (m *PackageManager_InstallationDetails) XXX_Size() int {
	return xxx_messageInfo_PackageManager_InstallationDetails.Size(m)
}
func (m *PackageManager_InstallationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageManager_InstallationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_PackageManager_InstallationDetails proto.InternalMessageInfo

func (m *PackageManager_InstallationDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PackageManager_InstallationDetails) GetLocation() []*PackageManager_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// An attestation wrapper with a PGP-compatible signature.
// This message only supports ATTACHED signatures, where the payload that is
// signed is included alongside the signature itself in the same file.
type PgpSignedAttestation struct {
	// The raw content of the signature, as output by gpg or equivalent.  Since
	// this message only supports attached signatures, the payload that was signed
	// must be attached. While the signature format supported is dependent on the
	// verification implementation, currently only ASCII-armored (`--armor` to
	// gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are
	// supported.
	// Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will
	// create the signature content expected in this field in `signature.gpg` for
	// the `payload.json` attestation payload.
	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Type (e.g. schema) of the attestation payload that was signed.
	// The verifier must ensure that the provided type is one that the verifier
	// supports, and that the attestation payload is a valid instantiation of that
	// type (e.g. by validating a JSON schema).
	ContentType PgpSignedAttestation_ContentType `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=grafeas.v1alpha1.api.PgpSignedAttestation_ContentType" json:"content_type,omitempty"`
	// This field is used by verifiers to select the public key used to validate
	// the signature.  Note that the policy of the verifier ultimately determines
	// which public keys verify a signature based on the context of the
	// verification.  There is no guarantee validation will succeed if the
	// verifier has no key matching this ID, even if it has a key under a
	// different ID that would verify the signature. Note that this ID should also
	// be present in the signature content above, but that is not expected to be
	// used by the verifier.
	//
	// Types that are valid to be assigned to KeyId:
	//	*PgpSignedAttestation_PgpKeyId
	KeyId                isPgpSignedAttestation_KeyId `protobuf_oneof:"key_id"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PgpSignedAttestation) Reset()         { *m = PgpSignedAttestation{} }
func (m *PgpSignedAttestation) String() string { return proto.CompactTextString(m) }
func (*PgpSignedAttestation) ProtoMessage()    {}
func (*PgpSignedAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{35}
}

func (m *PgpSignedAttestation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PgpSignedAttestation.Unmarshal(m, b)
}
func (m *PgpSignedAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PgpSignedAttestation.Marshal(b, m, deterministic)
}
func (m *PgpSignedAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PgpSignedAttestation.Merge(m, src)
}
func (m *PgpSignedAttestation) XXX_Size() int {
	return xxx_messageInfo_PgpSignedAttestation.Size(m)
}
func (m *PgpSignedAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_PgpSignedAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_PgpSignedAttestation proto.InternalMessageInfo

func (m *PgpSignedAttestation) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *PgpSignedAttestation) GetContentType() PgpSignedAttestation_ContentType {
	if m != nil {
		return m.ContentType
	}
	return PgpSignedAttestation_CONTENT_TYPE_UNSPECIFIED
}

type isPgpSignedAttestation_KeyId interface {
	isPgpSignedAttestation_KeyId()
}

type PgpSignedAttestation_PgpKeyId struct {
	PgpKeyId string `protobuf:"bytes,2,opt,name=pgp_key_id,json=pgpKeyId,proto3,oneof"`
}

func (*PgpSignedAttestation_PgpKeyId) isPgpSignedAttestation_KeyId() {}

func (m *PgpSignedAttestation) GetKeyId() isPgpSignedAttestation_KeyId {
	if m != nil {
		return m.KeyId
	}
	return nil
}

func (m *PgpSignedAttestation) GetPgpKeyId() string {
	if x, ok := m.GetKeyId().(*PgpSignedAttestation_PgpKeyId); ok {
		return x.PgpKeyId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PgpSignedAttestation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PgpSignedAttestation_PgpKeyId)(nil),
	}
}

// Source describes the location of the source used for the build.
type Source struct {
	// Source location information.
	//
	// Types that are valid to be assigned to Source:
	//	*Source_StorageSource
	//	*Source_RepoSource
	Source isSource_Source `protobuf_oneof:"source"`
	// If provided, the input binary artifacts for the build came from this
	// location.
	ArtifactStorageSource *StorageSource `protobuf:"bytes,4,opt,name=artifact_storage_source,json=artifactStorageSource,proto3" json:"artifact_storage_source,omitempty"`
	// Hash(es) of the build source, which can be used to verify that the original
	// source integrity was maintained in the build.
	//
	// The keys to this map are file paths used as build source and the values
	// contain the hash values for those files.
	//
	// If the build source came in a single package such as a gzipped tarfile
	// (.tar.gz), the FileHash will be for the single path to that file.
	FileHashes map[string]*FileHashes `protobuf:"bytes,3,rep,name=file_hashes,json=fileHashes,proto3" json:"file_hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If provided, the source code used for the build came from this location.
	Context *SourceContext `protobuf:"bytes,7,opt,name=context,proto3" json:"context,omitempty"`
	// If provided, some of the source code used for the build may be found in
	// these locations, in the case where the source repository had multiple
	// remotes or submodules. This list will not include the context specified in
	// the context field.
	AdditionalContexts   []*SourceContext `protobuf:"bytes,8,rep,name=additional_contexts,json=additionalContexts,proto3" json:"additional_contexts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{36}
}

func (m *Source) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Source.Unmarshal(m, b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Source.Marshal(b, m, deterministic)
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return xxx_messageInfo_Source.Size(m)
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

type isSource_Source interface {
	isSource_Source()
}

type Source_StorageSource struct {
	StorageSource *StorageSource `protobuf:"bytes,1,opt,name=storage_source,json=storageSource,proto3,oneof"`
}

type Source_RepoSource struct {
	RepoSource *RepoSource `protobuf:"bytes,2,opt,name=repo_source,json=repoSource,proto3,oneof"`
}

func (*Source_StorageSource) isSource_Source() {}

func (*Source_RepoSource) isSource_Source() {}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Source) GetStorageSource() *StorageSource {
	if x, ok := m.GetSource().(*Source_StorageSource); ok {
		return x.StorageSource
	}
	return nil
}

func (m *Source) GetRepoSource() *RepoSource {
	if x, ok := m.GetSource().(*Source_RepoSource); ok {
		return x.RepoSource
	}
	return nil
}

func (m *Source) GetArtifactStorageSource() *StorageSource {
	if m != nil {
		return m.ArtifactStorageSource
	}
	return nil
}

func (m *Source) GetFileHashes() map[string]*FileHashes {
	if m != nil {
		return m.FileHashes
	}
	return nil
}

func (m *Source) GetContext() *SourceContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Source) GetAdditionalContexts() []*SourceContext {
	if m != nil {
		return m.AdditionalContexts
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Source) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Source_StorageSource)(nil),
		(*Source_RepoSource)(nil),
	}
}

// RepoSource describes the location of the source in a Google Cloud Source
// Repository.
type RepoSource struct {
	// ID of the project that owns the repo.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Name of the repo.
	RepoName string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// A revision within the source repository must be specified in
	// one of these ways.
	//
	// Types that are valid to be assigned to Revision:
	//	*RepoSource_BranchName
	//	*RepoSource_TagName
	//	*RepoSource_CommitSha
	Revision             isRepoSource_Revision `protobuf_oneof:"revision"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RepoSource) Reset()         { *m = RepoSource{} }
func (m *RepoSource) String() string { return proto.CompactTextString(m) }
func (*RepoSource) ProtoMessage()    {}
func (*RepoSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{37}
}

func (m *RepoSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepoSource.Unmarshal(m, b)
}
func (m *RepoSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepoSource.Marshal(b, m, deterministic)
}
func (m *RepoSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoSource.Merge(m, src)
}
func (m *RepoSource) XXX_Size() int {
	return xxx_messageInfo_RepoSource.Size(m)
}
func (m *RepoSource) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoSource.DiscardUnknown(m)
}

var xxx_messageInfo_RepoSource proto.InternalMessageInfo

func (m *RepoSource) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RepoSource) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

type isRepoSource_Revision interface {
	isRepoSource_Revision()
}

type RepoSource_BranchName struct {
	BranchName string `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3,oneof"`
}

type RepoSource_TagName struct {
	TagName string `protobuf:"bytes,4,opt,name=tag_name,json=tagName,proto3,oneof"`
}

type RepoSource_CommitSha struct {
	CommitSha string `protobuf:"bytes,5,opt,name=commit_sha,json=commitSha,proto3,oneof"`
}

func (*RepoSource_BranchName) isRepoSource_Revision() {}

func (*RepoSource_TagName) isRepoSource_Revision() {}

func (*RepoSource_CommitSha) isRepoSource_Revision() {}

func (m *RepoSource) GetRevision() isRepoSource_Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *RepoSource) GetBranchName() string {
	if x, ok := m.GetRevision().(*RepoSource_BranchName); ok {
		return x.BranchName
	}
	return ""
}

func (m *RepoSource) GetTagName() string {
	if x, ok := m.GetRevision().(*RepoSource_TagName); ok {
		return x.TagName
	}
	return ""
}

func (m *RepoSource) GetCommitSha() string {
	if x, ok := m.GetRevision().(*RepoSource_CommitSha); ok {
		return x.CommitSha
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RepoSource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RepoSource_BranchName)(nil),
		(*RepoSource_TagName)(nil),
		(*RepoSource_CommitSha)(nil),
	}
}

// StorageSource describes the location of the source in an archive file in
// Google Cloud Storage.
type StorageSource struct {
	// Google Cloud Storage bucket containing source (see [Bucket Name
	// Requirements]
	// (https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Google Cloud Storage object containing source.
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// Google Cloud Storage generation for the object.
	Generation           int64    `protobuf:"varint,3,opt,name=generation,proto3" json:"generation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorageSource) Reset()         { *m = StorageSource{} }
func (m *StorageSource) String() string { return proto.CompactTextString(m) }
func (*StorageSource) ProtoMessage()    {}
func (*StorageSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{38}
}

func (m *StorageSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageSource.Unmarshal(m, b)
}
func (m *StorageSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageSource.Marshal(b, m, deterministic)
}
func (m *StorageSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageSource.Merge(m, src)
}
func (m *StorageSource) XXX_Size() int {
	return xxx_messageInfo_StorageSource.Size(m)
}
func (m *StorageSource) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageSource.DiscardUnknown(m)
}

var xxx_messageInfo_StorageSource proto.InternalMessageInfo

func (m *StorageSource) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *StorageSource) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *StorageSource) GetGeneration() int64 {
	if m != nil {
		return m.Generation
	}
	return 0
}

// VulnerabilityType provides metadata about a security vulnerability.
type VulnerabilityType struct {
	// The CVSS score for this Vulnerability.
	CvssScore float32 `protobuf:"fixed32,2,opt,name=cvss_score,json=cvssScore,proto3" json:"cvss_score,omitempty"`
	// Note provider assigned impact of the vulnerability
	Severity VulnerabilityType_Severity `protobuf:"varint,3,opt,name=severity,proto3,enum=grafeas.v1alpha1.api.VulnerabilityType_Severity" json:"severity,omitempty"`
	// All information about the package to specifically identify this
	// vulnerability. One entry per (version range and cpe_uri) the
	// package vulnerability has manifested in.
	Details              []*VulnerabilityType_Detail `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *VulnerabilityType) Reset()         { *m = VulnerabilityType{} }
func (m *VulnerabilityType) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityType) ProtoMessage()    {}
func (*VulnerabilityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{39}
}

func (m *VulnerabilityType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VulnerabilityType.Unmarshal(m, b)
}
func (m *VulnerabilityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VulnerabilityType.Marshal(b, m, deterministic)
}
func (m *VulnerabilityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityType.Merge(m, src)
}
func (m *VulnerabilityType) XXX_Size() int {
	return xxx_messageInfo_VulnerabilityType.Size(m)
}
func (m *VulnerabilityType) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityType.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityType proto.InternalMessageInfo

func (m *VulnerabilityType) GetCvssScore() float32 {
	if m != nil {
		return m.CvssScore
	}
	return 0
}

func (m *VulnerabilityType) GetSeverity() VulnerabilityType_Severity {
	if m != nil {
		return m.Severity
	}
	return VulnerabilityType_SEVERITY_UNSPECIFIED
}

func (m *VulnerabilityType) GetDetails() []*VulnerabilityType_Detail {
	if m != nil {
		return m.Details
	}
	return nil
}

// Version contains structured information about the version of the package.
// For a discussion of this in Debian/Ubuntu:
// http://serverfault.com/questions/604541/debian-packages-version-convention
// For a discussion of this in Redhat/Fedora/Centos:
// http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/
type VulnerabilityType_Version struct {
	// Used to correct mistakes in the version numbering scheme.
	Epoch int32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The main part of the version name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The iteration of the package build from the above version.
	Revision string `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// Distinguish between sentinel MIN/MAX versions and normal versions.
	// If kind is not NORMAL, then the other fields are ignored.
	Kind                 VulnerabilityType_Version_VersionKind `protobuf:"varint,5,opt,name=kind,proto3,enum=grafeas.v1alpha1.api.VulnerabilityType_Version_VersionKind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *VulnerabilityType_Version) Reset()         { *m = VulnerabilityType_Version{} }
func (m *VulnerabilityType_Version) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityType_Version) ProtoMessage()    {}
func (*VulnerabilityType_Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{39, 0}
}

func (m *VulnerabilityType_Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VulnerabilityType_Version.Unmarshal(m, b)
}
func (m *VulnerabilityType_Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VulnerabilityType_Version.Marshal(b, m, deterministic)
}
func (m *VulnerabilityType_Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityType_Version.Merge(m, src)
}
func (m *VulnerabilityType_Version) XXX_Size() int {
	return xxx_messageInfo_VulnerabilityType_Version.Size(m)
}
func (m *VulnerabilityType_Version) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityType_Version.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityType_Version proto.InternalMessageInfo

func (m *VulnerabilityType_Version) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *VulnerabilityType_Version) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VulnerabilityType_Version) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *VulnerabilityType_Version) GetKind() VulnerabilityType_Version_VersionKind {
	if m != nil {
		return m.Kind
	}
	return VulnerabilityType_Version_NORMAL
}

// Identifies all occurrences of this vulnerability in the package for a
// specific distro/location
// For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2
type VulnerabilityType_Detail struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in
	// which the vulnerability manifests.  Examples include distro or storage
	// location for vulnerable jar.
	// This field can be used as a filter in list requests.
	CpeUri string `protobuf:"bytes,1,opt,name=cpe_uri,json=cpeUri,proto3" json:"cpe_uri,omitempty"`
	// The name of the package where the vulnerability was found.
	// This field can be used as a filter in list requests.
	Package string `protobuf:"bytes,8,opt,name=package,proto3" json:"package,omitempty"`
	// The min version of the package in which the vulnerability exists.
	MinAffectedVersion *VulnerabilityType_Version `protobuf:"bytes,6,opt,name=min_affected_version,json=minAffectedVersion,proto3" json:"min_affected_version,omitempty"`
	// The max version of the package in which the vulnerability exists.
	// This field can be used as a filter in list requests.
	MaxAffectedVersion *VulnerabilityType_Version `protobuf:"bytes,7,opt,name=max_affected_version,json=maxAffectedVersion,proto3" json:"max_affected_version,omitempty"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName string `protobuf:"bytes,4,opt,name=severity_name,json=severityName,proto3" json:"severity_name,omitempty"`
	// A vendor-specific description of this note.
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// The fix for this specific package version.
	FixedLocation *VulnerabilityType_VulnerabilityLocation `protobuf:"bytes,5,opt,name=fixed_location,json=fixedLocation,proto3" json:"fixed_location,omitempty"`
	// The type of package; whether native or non native(ruby gems,
	// node.js packages etc)
	PackageType          string   `protobuf:"bytes,10,opt,name=package_type,json=packageType,proto3" json:"package_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityType_Detail) Reset()         { *m = VulnerabilityType_Detail{} }
func (m *VulnerabilityType_Detail) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityType_Detail) ProtoMessage()    {}
func (*VulnerabilityType_Detail) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{39, 1}
}

func (m *VulnerabilityType_Detail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VulnerabilityType_Detail.Unmarshal(m, b)
}
func (m *VulnerabilityType_Detail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VulnerabilityType_Detail.Marshal(b, m, deterministic)
}
func (m *VulnerabilityType_Detail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityType_Detail.Merge(m, src)
}
func (m *VulnerabilityType_Detail) XXX_Size() int {
	return xxx_messageInfo_VulnerabilityType_Detail.Size(m)
}
func (m *VulnerabilityType_Detail) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityType_Detail.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityType_Detail proto.InternalMessageInfo

func (m *VulnerabilityType_Detail) GetCpeUri() string {
	if m != nil {
		return m.CpeUri
	}
	return ""
}

func (m *VulnerabilityType_Detail) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *VulnerabilityType_Detail) GetMinAffectedVersion() *VulnerabilityType_Version {
	if m != nil {
		return m.MinAffectedVersion
	}
	return nil
}

func (m *VulnerabilityType_Detail) GetMaxAffectedVersion() *VulnerabilityType_Version {
	if m != nil {
		return m.MaxAffectedVersion
	}
	return nil
}

func (m *VulnerabilityType_Detail) GetSeverityName() string {
	if m != nil {
		return m.SeverityName
	}
	return ""
}

func (m *VulnerabilityType_Detail) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VulnerabilityType_Detail) GetFixedLocation() *VulnerabilityType_VulnerabilityLocation {
	if m != nil {
		return m.FixedLocation
	}
	return nil
}

func (m *VulnerabilityType_Detail) GetPackageType() string {
	if m != nil {
		return m.PackageType
	}
	return ""
}

// Used by Occurrence to point to where the vulnerability exists and how
// to fix it.
type VulnerabilityType_VulnerabilityDetails struct {
	// The type of package; whether native or non native(ruby gems,
	// node.js packages etc)
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Output only. The note provider assigned Severity of the vulnerability.
	Severity VulnerabilityType_Severity `protobuf:"varint,4,opt,name=severity,proto3,enum=grafeas.v1alpha1.api.VulnerabilityType_Severity" json:"severity,omitempty"`
	// Output only. The CVSS score of this vulnerability. CVSS score is on a
	// scale of 0-10 where 0 indicates low severity and 10 indicates high
	// severity.
	CvssScore float32 `protobuf:"fixed32,5,opt,name=cvss_score,json=cvssScore,proto3" json:"cvss_score,omitempty"`
	// The set of affected locations and their fixes (if available) within
	// the associated resource.
	PackageIssue         []*VulnerabilityType_PackageIssue `protobuf:"bytes,6,rep,name=package_issue,json=packageIssue,proto3" json:"package_issue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *VulnerabilityType_VulnerabilityDetails) Reset() {
	*m = VulnerabilityType_VulnerabilityDetails{}
}
func (m *VulnerabilityType_VulnerabilityDetails) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityType_VulnerabilityDetails) ProtoMessage()    {}
func (*VulnerabilityType_VulnerabilityDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{39, 2}
}

func (m *VulnerabilityType_VulnerabilityDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VulnerabilityType_VulnerabilityDetails.Unmarshal(m, b)
}
func (m *VulnerabilityType_VulnerabilityDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VulnerabilityType_VulnerabilityDetails.Marshal(b, m, deterministic)
}
func (m *VulnerabilityType_VulnerabilityDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityType_VulnerabilityDetails.Merge(m, src)
}
func (m *VulnerabilityType_VulnerabilityDetails) XXX_Size() int {
	return xxx_messageInfo_VulnerabilityType_VulnerabilityDetails.Size(m)
}
func (m *VulnerabilityType_VulnerabilityDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityType_VulnerabilityDetails.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityType_VulnerabilityDetails proto.InternalMessageInfo

func (m *VulnerabilityType_VulnerabilityDetails) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VulnerabilityType_VulnerabilityDetails) GetSeverity() VulnerabilityType_Severity {
	if m != nil {
		return m.Severity
	}
	return VulnerabilityType_SEVERITY_UNSPECIFIED
}

func (m *VulnerabilityType_VulnerabilityDetails) GetCvssScore() float32 {
	if m != nil {
		return m.CvssScore
	}
	return 0
}

func (m *VulnerabilityType_VulnerabilityDetails) GetPackageIssue() []*VulnerabilityType_PackageIssue {
	if m != nil {
		return m.PackageIssue
	}
	return nil
}

// This message wraps a location affected by a vulnerability and its
// associated fix (if one is available).
type VulnerabilityType_PackageIssue struct {
	// The location of the vulnerability.
	AffectedLocation *VulnerabilityType_VulnerabilityLocation `protobuf:"bytes,1,opt,name=affected_location,json=affectedLocation,proto3" json:"affected_location,omitempty"`
	// The location of the available fix for vulnerability.
	FixedLocation *VulnerabilityType_VulnerabilityLocation `protobuf:"bytes,2,opt,name=fixed_location,json=fixedLocation,proto3" json:"fixed_location,omitempty"`
	// The severity (eg: distro assigned severity) for this vulnerability.
	SeverityName         string   `protobuf:"bytes,3,opt,name=severity_name,json=severityName,proto3" json:"severity_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityType_PackageIssue) Reset()         { *m = VulnerabilityType_PackageIssue{} }
func (m *VulnerabilityType_PackageIssue) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityType_PackageIssue) ProtoMessage()    {}
func (*VulnerabilityType_PackageIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{39, 3}
}

func (m *VulnerabilityType_PackageIssue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VulnerabilityType_PackageIssue.Unmarshal(m, b)
}
func (m *VulnerabilityType_PackageIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VulnerabilityType_PackageIssue.Marshal(b, m, deterministic)
}
func (m *VulnerabilityType_PackageIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityType_PackageIssue.Merge(m, src)
}
func (m *VulnerabilityType_PackageIssue) XXX_Size() int {
	return xxx_messageInfo_VulnerabilityType_PackageIssue.Size(m)
}
func (m *VulnerabilityType_PackageIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityType_PackageIssue.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityType_PackageIssue proto.InternalMessageInfo

func (m *VulnerabilityType_PackageIssue) GetAffectedLocation() *VulnerabilityType_VulnerabilityLocation {
	if m != nil {
		return m.AffectedLocation
	}
	return nil
}

func (m *VulnerabilityType_PackageIssue) GetFixedLocation() *VulnerabilityType_VulnerabilityLocation {
	if m != nil {
		return m.FixedLocation
	}
	return nil
}

func (m *VulnerabilityType_PackageIssue) GetSeverityName() string {
	if m != nil {
		return m.SeverityName
	}
	return ""
}

// The location of the vulnerability
type VulnerabilityType_VulnerabilityLocation struct {
	// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)
	// format. Examples include distro or storage location for vulnerable jar.
	// This field can be used as a filter in list requests.
	CpeUri string `protobuf:"bytes,1,opt,name=cpe_uri,json=cpeUri,proto3" json:"cpe_uri,omitempty"`
	// The package being described.
	Package string `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	// The version of the package being described.
	// This field can be used as a filter in list requests.
	Version              *VulnerabilityType_Version `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *VulnerabilityType_VulnerabilityLocation) Reset() {
	*m = VulnerabilityType_VulnerabilityLocation{}
}
func (m *VulnerabilityType_VulnerabilityLocation) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityType_VulnerabilityLocation) ProtoMessage()    {}
func (*VulnerabilityType_VulnerabilityLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{39, 4}
}

func (m *VulnerabilityType_VulnerabilityLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VulnerabilityType_VulnerabilityLocation.Unmarshal(m, b)
}
func (m *VulnerabilityType_VulnerabilityLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VulnerabilityType_VulnerabilityLocation.Marshal(b, m, deterministic)
}
func (m *VulnerabilityType_VulnerabilityLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityType_VulnerabilityLocation.Merge(m, src)
}
func (m *VulnerabilityType_VulnerabilityLocation) XXX_Size() int {
	return xxx_messageInfo_VulnerabilityType_VulnerabilityLocation.Size(m)
}
func (m *VulnerabilityType_VulnerabilityLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityType_VulnerabilityLocation.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityType_VulnerabilityLocation proto.InternalMessageInfo

func (m *VulnerabilityType_VulnerabilityLocation) GetCpeUri() string {
	if m != nil {
		return m.CpeUri
	}
	return ""
}

func (m *VulnerabilityType_VulnerabilityLocation) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *VulnerabilityType_VulnerabilityLocation) GetVersion() *VulnerabilityType_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

// A SourceContext is a reference to a tree of files. A SourceContext together
// with a path point to a unique revision of a single file or directory.
type SourceContext struct {
	// A SourceContext can refer any one of the following types of repositories.
	//
	// Types that are valid to be assigned to Context:
	//	*SourceContext_CloudRepo
	//	*SourceContext_Gerrit
	//	*SourceContext_Git
	Context isSourceContext_Context `protobuf_oneof:"context"`
	// Labels with user defined metadata.
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SourceContext) Reset()         { *m = SourceContext{} }
func (m *SourceContext) String() string { return proto.CompactTextString(m) }
func (*SourceContext) ProtoMessage()    {}
func (*SourceContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{40}
}

func (m *SourceContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceContext.Unmarshal(m, b)
}
func (m *SourceContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceContext.Marshal(b, m, deterministic)
}
func (m *SourceContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceContext.Merge(m, src)
}
func (m *SourceContext) XXX_Size() int {
	return xxx_messageInfo_SourceContext.Size(m)
}
func (m *SourceContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceContext.DiscardUnknown(m)
}

var xxx_messageInfo_SourceContext proto.InternalMessageInfo

type isSourceContext_Context interface {
	isSourceContext_Context()
}

type SourceContext_CloudRepo struct {
	CloudRepo *CloudRepoSourceContext `protobuf:"bytes,1,opt,name=cloud_repo,json=cloudRepo,proto3,oneof"`
}

type SourceContext_Gerrit struct {
	Gerrit *GerritSourceContext `protobuf:"bytes,2,opt,name=gerrit,proto3,oneof"`
}

type SourceContext_Git struct {
	Git *GitSourceContext `protobuf:"bytes,3,opt,name=git,proto3,oneof"`
}

func (*SourceContext_CloudRepo) isSourceContext_Context() {}

func (*SourceContext_Gerrit) isSourceContext_Context() {}

func (*SourceContext_Git) isSourceContext_Context() {}

func (m *SourceContext) GetContext() isSourceContext_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *SourceContext) GetCloudRepo() *CloudRepoSourceContext {
	if x, ok := m.GetContext().(*SourceContext_CloudRepo); ok {
		return x.CloudRepo
	}
	return nil
}

func (m *SourceContext) GetGerrit() *GerritSourceContext {
	if x, ok := m.GetContext().(*SourceContext_Gerrit); ok {
		return x.Gerrit
	}
	return nil
}

func (m *SourceContext) GetGit() *GitSourceContext {
	if x, ok := m.GetContext().(*SourceContext_Git); ok {
		return x.Git
	}
	return nil
}

func (m *SourceContext) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SourceContext) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SourceContext_CloudRepo)(nil),
		(*SourceContext_Gerrit)(nil),
		(*SourceContext_Git)(nil),
	}
}

// An alias to a repo revision.
type AliasContext struct {
	// The alias kind.
	Kind AliasContext_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=grafeas.v1alpha1.api.AliasContext_Kind" json:"kind,omitempty"`
	// The alias name.
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AliasContext) Reset()         { *m = AliasContext{} }
func (m *AliasContext) String() string { return proto.CompactTextString(m) }
func (*AliasContext) ProtoMessage()    {}
func (*AliasContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{41}
}

func (m *AliasContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AliasContext.Unmarshal(m, b)
}
func (m *AliasContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AliasContext.Marshal(b, m, deterministic)
}
func (m *AliasContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasContext.Merge(m, src)
}
func (m *AliasContext) XXX_Size() int {
	return xxx_messageInfo_AliasContext.Size(m)
}
func (m *AliasContext) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasContext.DiscardUnknown(m)
}

var xxx_messageInfo_AliasContext proto.InternalMessageInfo

func (m *AliasContext) GetKind() AliasContext_Kind {
	if m != nil {
		return m.Kind
	}
	return AliasContext_KIND_UNSPECIFIED
}

func (m *AliasContext) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A CloudRepoSourceContext denotes a particular revision in a Google Cloud
// Source Repo.
type CloudRepoSourceContext struct {
	// The ID of the repo.
	RepoId *RepoId `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	// A revision in a Cloud Repo can be identified by either its revision ID or
	// its alias.
	//
	// Types that are valid to be assigned to Revision:
	//	*CloudRepoSourceContext_RevisionId
	//	*CloudRepoSourceContext_AliasContext
	Revision             isCloudRepoSourceContext_Revision `protobuf_oneof:"revision"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CloudRepoSourceContext) Reset()         { *m = CloudRepoSourceContext{} }
func (m *CloudRepoSourceContext) String() string { return proto.CompactTextString(m) }
func (*CloudRepoSourceContext) ProtoMessage()    {}
func (*CloudRepoSourceContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{42}
}

func (m *CloudRepoSourceContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudRepoSourceContext.Unmarshal(m, b)
}
func (m *CloudRepoSourceContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudRepoSourceContext.Marshal(b, m, deterministic)
}
func (m *CloudRepoSourceContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudRepoSourceContext.Merge(m, src)
}
func (m *CloudRepoSourceContext) XXX_Size() int {
	return xxx_messageInfo_CloudRepoSourceContext.Size(m)
}
func (m *CloudRepoSourceContext) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudRepoSourceContext.DiscardUnknown(m)
}

var xxx_messageInfo_CloudRepoSourceContext proto.InternalMessageInfo

func (m *CloudRepoSourceContext) GetRepoId() *RepoId {
	if m != nil {
		return m.RepoId
	}
	return nil
}

type isCloudRepoSourceContext_Revision interface {
	isCloudRepoSourceContext_Revision()
}

type CloudRepoSourceContext_RevisionId struct {
	RevisionId string `protobuf:"bytes,2,opt,name=revision_id,json=revisionId,proto3,oneof"`
}

type CloudRepoSourceContext_AliasContext struct {
	AliasContext *AliasContext `protobuf:"bytes,3,opt,name=alias_context,json=aliasContext,proto3,oneof"`
}

func (*CloudRepoSourceContext_RevisionId) isCloudRepoSourceContext_Revision() {}

func (*CloudRepoSourceContext_AliasContext) isCloudRepoSourceContext_Revision() {}

func (m *CloudRepoSourceContext) GetRevision() isCloudRepoSourceContext_Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *CloudRepoSourceContext) GetRevisionId() string {
	if x, ok := m.GetRevision().(*CloudRepoSourceContext_RevisionId); ok {
		return x.RevisionId
	}
	return ""
}

func (m *CloudRepoSourceContext) GetAliasContext() *AliasContext {
	if x, ok := m.GetRevision().(*CloudRepoSourceContext_AliasContext); ok {
		return x.AliasContext
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CloudRepoSourceContext) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CloudRepoSourceContext_RevisionId)(nil),
		(*CloudRepoSourceContext_AliasContext)(nil),
	}
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContext struct {
	// The URI of a running Gerrit instance.
	HostUri string `protobuf:"bytes,1,opt,name=host_uri,json=hostUri,proto3" json:"host_uri,omitempty"`
	// The full project name within the host. Projects may be nested, so
	// "project/subproject" is a valid project name. The "repo name" is
	// the hostURI/project.
	GerritProject string `protobuf:"bytes,2,opt,name=gerrit_project,json=gerritProject,proto3" json:"gerrit_project,omitempty"`
	// A revision in a Gerrit project can be identified by either its revision ID
	// or its alias.
	//
	// Types that are valid to be assigned to Revision:
	//	*GerritSourceContext_RevisionId
	//	*GerritSourceContext_AliasContext
	Revision             isGerritSourceContext_Revision `protobuf_oneof:"revision"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GerritSourceContext) Reset()         { *m = GerritSourceContext{} }
func (m *GerritSourceContext) String() string { return proto.CompactTextString(m) }
func (*GerritSourceContext) ProtoMessage()    {}
func (*GerritSourceContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{43}
}

func (m *GerritSourceContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GerritSourceContext.Unmarshal(m, b)
}
func (m *GerritSourceContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GerritSourceContext.Marshal(b, m, deterministic)
}
func (m *GerritSourceContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GerritSourceContext.Merge(m, src)
}
func (m *GerritSourceContext) XXX_Size() int {
	return xxx_messageInfo_GerritSourceContext.Size(m)
}
func (m *GerritSourceContext) XXX_DiscardUnknown() {
	xxx_messageInfo_GerritSourceContext.DiscardUnknown(m)
}

var xxx_messageInfo_GerritSourceContext proto.InternalMessageInfo

func (m *GerritSourceContext) GetHostUri() string {
	if m != nil {
		return m.HostUri
	}
	return ""
}

func (m *GerritSourceContext) GetGerritProject() string {
	if m != nil {
		return m.GerritProject
	}
	return ""
}

type isGerritSourceContext_Revision interface {
	isGerritSourceContext_Revision()
}

type GerritSourceContext_RevisionId struct {
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3,oneof"`
}

type GerritSourceContext_AliasContext struct {
	AliasContext *AliasContext `protobuf:"bytes,4,opt,name=alias_context,json=aliasContext,proto3,oneof"`
}

func (*GerritSourceContext_RevisionId) isGerritSourceContext_Revision() {}

func (*GerritSourceContext_AliasContext) isGerritSourceContext_Revision() {}

func (m *GerritSourceContext) GetRevision() isGerritSourceContext_Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *GerritSourceContext) GetRevisionId() string {
	if x, ok := m.GetRevision().(*GerritSourceContext_RevisionId); ok {
		return x.RevisionId
	}
	return ""
}

func (m *GerritSourceContext) GetAliasContext() *AliasContext {
	if x, ok := m.GetRevision().(*GerritSourceContext_AliasContext); ok {
		return x.AliasContext
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GerritSourceContext) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GerritSourceContext_RevisionId)(nil),
		(*GerritSourceContext_AliasContext)(nil),
	}
}

// A GitSourceContext denotes a particular revision in a third party Git
// repository (e.g., GitHub).
type GitSourceContext struct {
	// Git repository URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Required.
	// Git commit hash.
	RevisionId           string   `protobuf:"bytes,2,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitSourceContext) Reset()         { *m = GitSourceContext{} }
func (m *GitSourceContext) String() string { return proto.CompactTextString(m) }
func (*GitSourceContext) ProtoMessage()    {}
func (*GitSourceContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{44}
}

func (m *GitSourceContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitSourceContext.Unmarshal(m, b)
}
func (m *GitSourceContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitSourceContext.Marshal(b, m, deterministic)
}
func (m *GitSourceContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitSourceContext.Merge(m, src)
}
func (m *GitSourceContext) XXX_Size() int {
	return xxx_messageInfo_GitSourceContext.Size(m)
}
func (m *GitSourceContext) XXX_DiscardUnknown() {
	xxx_messageInfo_GitSourceContext.DiscardUnknown(m)
}

var xxx_messageInfo_GitSourceContext proto.InternalMessageInfo

func (m *GitSourceContext) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GitSourceContext) GetRevisionId() string {
	if m != nil {
		return m.RevisionId
	}
	return ""
}

// A unique identifier for a Cloud Repo.
type RepoId struct {
	// A cloud repo can be identified by either its project ID and repository name
	// combination, or its globally unique identifier.
	//
	// Types that are valid to be assigned to Id:
	//	*RepoId_ProjectRepoId
	//	*RepoId_Uid
	Id                   isRepoId_Id `protobuf_oneof:"id"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RepoId) Reset()         { *m = RepoId{} }
func (m *RepoId) String() string { return proto.CompactTextString(m) }
func (*RepoId) ProtoMessage()    {}
func (*RepoId) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{45}
}

func (m *RepoId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepoId.Unmarshal(m, b)
}
func (m *RepoId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepoId.Marshal(b, m, deterministic)
}
func (m *RepoId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepoId.Merge(m, src)
}
func (m *RepoId) XXX_Size() int {
	return xxx_messageInfo_RepoId.Size(m)
}
func (m *RepoId) XXX_DiscardUnknown() {
	xxx_messageInfo_RepoId.DiscardUnknown(m)
}

var xxx_messageInfo_RepoId proto.InternalMessageInfo

type isRepoId_Id interface {
	isRepoId_Id()
}

type RepoId_ProjectRepoId struct {
	ProjectRepoId *ProjectRepoId `protobuf:"bytes,1,opt,name=project_repo_id,json=projectRepoId,proto3,oneof"`
}

type RepoId_Uid struct {
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3,oneof"`
}

func (*RepoId_ProjectRepoId) isRepoId_Id() {}

func (*RepoId_Uid) isRepoId_Id() {}

func (m *RepoId) GetId() isRepoId_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RepoId) GetProjectRepoId() *ProjectRepoId {
	if x, ok := m.GetId().(*RepoId_ProjectRepoId); ok {
		return x.ProjectRepoId
	}
	return nil
}

func (m *RepoId) GetUid() string {
	if x, ok := m.GetId().(*RepoId_Uid); ok {
		return x.Uid
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RepoId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RepoId_ProjectRepoId)(nil),
		(*RepoId_Uid)(nil),
	}
}

// Selects a repo using a Google Cloud Platform project ID (e.g.,
// winged-cargo-31) and a repo name within that project.
type ProjectRepoId struct {
	// The ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the repo. Leave empty for the default repo.
	RepoName             string   `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectRepoId) Reset()         { *m = ProjectRepoId{} }
func (m *ProjectRepoId) String() string { return proto.CompactTextString(m) }
func (*ProjectRepoId) ProtoMessage()    {}
func (*ProjectRepoId) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{46}
}

func (m *ProjectRepoId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectRepoId.Unmarshal(m, b)
}
func (m *ProjectRepoId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectRepoId.Marshal(b, m, deterministic)
}
func (m *ProjectRepoId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectRepoId.Merge(m, src)
}
func (m *ProjectRepoId) XXX_Size() int {
	return xxx_messageInfo_ProjectRepoId.Size(m)
}
func (m *ProjectRepoId) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectRepoId.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectRepoId proto.InternalMessageInfo

func (m *ProjectRepoId) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ProjectRepoId) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

// Request to create a new project.
type CreateProjectRequest struct {
	// The project to create.
	Project              *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateProjectRequest) Reset()         { *m = CreateProjectRequest{} }
func (m *CreateProjectRequest) String() string { return proto.CompactTextString(m) }
func (*CreateProjectRequest) ProtoMessage()    {}
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{47}
}

func (m *CreateProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProjectRequest.Unmarshal(m, b)
}
func (m *CreateProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProjectRequest.Marshal(b, m, deterministic)
}
func (m *CreateProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProjectRequest.Merge(m, src)
}
func (m *CreateProjectRequest) XXX_Size() int {
	return xxx_messageInfo_CreateProjectRequest.Size(m)
}
func (m *CreateProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProjectRequest proto.InternalMessageInfo

func (m *CreateProjectRequest) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

// Request to get a project.
type GetProjectRequest struct {
	// The name of the project in the form of `projects/{PROJECT_ID}`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProjectRequest) Reset()         { *m = GetProjectRequest{} }
func (m *GetProjectRequest) String() string { return proto.CompactTextString(m) }
func (*GetProjectRequest) ProtoMessage()    {}
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{48}
}

func (m *GetProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProjectRequest.Unmarshal(m, b)
}
func (m *GetProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProjectRequest.Marshal(b, m, deterministic)
}
func (m *GetProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectRequest.Merge(m, src)
}
func (m *GetProjectRequest) XXX_Size() int {
	return xxx_messageInfo_GetProjectRequest.Size(m)
}
func (m *GetProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectRequest proto.InternalMessageInfo

func (m *GetProjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to list projects.
type ListProjectsRequest struct {
	// The filter expression.
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of projects to return in the list.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProjectsRequest) Reset()         { *m = ListProjectsRequest{} }
func (m *ListProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*ListProjectsRequest) ProtoMessage()    {}
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{49}
}

func (m *ListProjectsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProjectsRequest.Unmarshal(m, b)
}
func (m *ListProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProjectsRequest.Marshal(b, m, deterministic)
}
func (m *ListProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsRequest.Merge(m, src)
}
func (m *ListProjectsRequest) XXX_Size() int {
	return xxx_messageInfo_ListProjectsRequest.Size(m)
}
func (m *ListProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsRequest proto.InternalMessageInfo

func (m *ListProjectsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListProjectsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListProjectsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response for listing projects.
type ListProjectsResponse struct {
	// The projects requested.
	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// The next pagination token in the list response. It should be used as
	// `page_token` for the following request. An empty value means no more
	// results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProjectsResponse) Reset()         { *m = ListProjectsResponse{} }
func (m *ListProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*ListProjectsResponse) ProtoMessage()    {}
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{50}
}

func (m *ListProjectsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProjectsResponse.Unmarshal(m, b)
}
func (m *ListProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProjectsResponse.Marshal(b, m, deterministic)
}
func (m *ListProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsResponse.Merge(m, src)
}
func (m *ListProjectsResponse) XXX_Size() int {
	return xxx_messageInfo_ListProjectsResponse.Size(m)
}
func (m *ListProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsResponse proto.InternalMessageInfo

func (m *ListProjectsResponse) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *ListProjectsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request to delete a project.
type DeleteProjectRequest struct {
	// The name of the project in the form of `projects/{PROJECT_ID}`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteProjectRequest) Reset()         { *m = DeleteProjectRequest{} }
func (m *DeleteProjectRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteProjectRequest) ProtoMessage()    {}
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_826dd64e8c537a3d, []int{51}
}

func (m *DeleteProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteProjectRequest.Unmarshal(m, b)
}
func (m *DeleteProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteProjectRequest.Marshal(b, m, deterministic)
}
func (m *DeleteProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteProjectRequest.Merge(m, src)
}
func (m *DeleteProjectRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteProjectRequest.Size(m)
}
func (m *DeleteProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteProjectRequest proto.InternalMessageInfo

func (m *DeleteProjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("grafeas.v1alpha1.api.BuildSignature_KeyType", BuildSignature_KeyType_name, BuildSignature_KeyType_value)
	proto.RegisterEnum("grafeas.v1alpha1.api.Deployable_DeploymentDetails_Platform", Deployable_DeploymentDetails_Platform_name, Deployable_DeploymentDetails_Platform_value)
	proto.RegisterEnum("grafeas.v1alpha1.api.DockerImage_Layer_Directive", DockerImage_Layer_Directive_name, DockerImage_Layer_Directive_value)
	proto.RegisterEnum("grafeas.v1alpha1.api.Hash_HashType", Hash_HashType_name, Hash_HashType_value)
	proto.RegisterEnum("grafeas.v1alpha1.api.Note_Kind", Note_Kind_name, Note_Kind_value)
	proto.RegisterEnum("grafeas.v1alpha1.api.PackageManager_Architecture", PackageManager_Architecture_name, PackageManager_Architecture_value)
	proto.RegisterEnum("grafeas.v1alpha1.api.PgpSignedAttestation_ContentType", PgpSignedAttestation_ContentType_name, PgpSignedAttestation_ContentType_value)
	proto.RegisterEnum("grafeas.v1alpha1.api.VulnerabilityType_Severity", VulnerabilityType_Severity_name, VulnerabilityType_Severity_value)
	proto.RegisterEnum("grafeas.v1alpha1.api.VulnerabilityType_Version_VersionKind", VulnerabilityType_Version_VersionKind_name, VulnerabilityType_Version_VersionKind_value)
	proto.RegisterEnum("grafeas.v1alpha1.api.AliasContext_Kind", AliasContext_Kind_name, AliasContext_Kind_value)
	proto.RegisterType((*GetOccurrenceRequest)(nil), "grafeas.v1alpha1.api.GetOccurrenceRequest")
	proto.RegisterType((*ListOccurrencesRequest)(nil), "grafeas.v1alpha1.api.ListOccurrencesRequest")
	proto.RegisterType((*DeleteOccurrenceRequest)(nil), "grafeas.v1alpha1.api.DeleteOccurrenceRequest")
	proto.RegisterType((*CreateOccurrenceRequest)(nil), "grafeas.v1alpha1.api.CreateOccurrenceRequest")
	proto.RegisterType((*UpdateOccurrenceRequest)(nil), "grafeas.v1alpha1.api.UpdateOccurrenceRequest")
	proto.RegisterType((*GetNoteRequest)(nil), "grafeas.v1alpha1.api.GetNoteRequest")
	proto.RegisterType((*GetOccurrenceNoteRequest)(nil), "grafeas.v1alpha1.api.GetOccurrenceNoteRequest")
	proto.RegisterType((*ListNotesRequest)(nil), "grafeas.v1alpha1.api.ListNotesRequest")
	proto.RegisterType((*DeleteNoteRequest)(nil), "grafeas.v1alpha1.api.DeleteNoteRequest")
	proto.RegisterType((*CreateNoteRequest)(nil), "grafeas.v1alpha1.api.CreateNoteRequest")
	proto.RegisterType((*UpdateNoteRequest)(nil), "grafeas.v1alpha1.api.UpdateNoteRequest")
	proto.RegisterType((*ListNoteOccurrencesRequest)(nil), "grafeas.v1alpha1.api.ListNoteOccurrencesRequest")
	proto.RegisterType((*ListNoteOccurrencesResponse)(nil), "grafeas.v1alpha1.api.ListNoteOccurrencesResponse")
	proto.RegisterType((*ListNotesResponse)(nil), "grafeas.v1alpha1.api.ListNotesResponse")
	proto.RegisterType((*ListOccurrencesResponse)(nil), "grafeas.v1alpha1.api.ListOccurrencesResponse")
	proto.RegisterType((*ListOperationsResponse)(nil), "grafeas.v1alpha1.api.ListOperationsResponse")
	proto.RegisterType((*UpdateOperationRequest)(nil), "grafeas.v1alpha1.api.UpdateOperationRequest")
	proto.RegisterType((*CreateOperationRequest)(nil), "grafeas.v1alpha1.api.CreateOperationRequest")
	proto.RegisterType((*Project)(nil), "grafeas.v1alpha1.api.Project")
	proto.RegisterType((*OperationMetadata)(nil), "grafeas.v1alpha1.api.OperationMetadata")
	proto.RegisterType((*Artifact)(nil), "grafeas.v1alpha1.api.Artifact")
	proto.RegisterType((*AttestationAuthority)(nil), "grafeas.v1alpha1.api.AttestationAuthority")
	proto.RegisterType((*AttestationAuthority_AttestationAuthorityHint)(nil), "grafeas.v1alpha1.api.AttestationAuthority.AttestationAuthorityHint")
	proto.RegisterType((*AttestationAuthority_AttestationDetails)(nil), "grafeas.v1alpha1.api.AttestationAuthority.AttestationDetails")
	proto.RegisterType((*BuildDetails)(nil), "grafeas.v1alpha1.api.BuildDetails")
	proto.RegisterType((*BuildProvenance)(nil), "grafeas.v1alpha1.api.BuildProvenance")
	proto.RegisterMapType((map[string]string)(nil), "grafeas.v1alpha1.api.BuildProvenance.BuildOptionsEntry")
	proto.RegisterType((*BuildSignature)(nil), "grafeas.v1alpha1.api.BuildSignature")
	proto.RegisterType((*BuildType)(nil), "grafeas.v1alpha1.api.BuildType")
	proto.RegisterType((*Command)(nil), "grafeas.v1alpha1.api.Command")
	proto.RegisterType((*Deployable)(nil), "grafeas.v1alpha1.api.Deployable")
	proto.RegisterType((*Deployable_DeploymentDetails)(nil), "grafeas.v1alpha1.api.Deployable.DeploymentDetails")
	proto.RegisterType((*DockerImage)(nil), "grafeas.v1alpha1.api.DockerImage")
	proto.RegisterType((*DockerImage_Layer)(nil), "grafeas.v1alpha1.api.DockerImage.Layer")
	proto.RegisterType((*DockerImage_Fingerprint)(nil), "grafeas.v1alpha1.api.DockerImage.Fingerprint")
	proto.RegisterType((*DockerImage_Basis)(nil), "grafeas.v1alpha1.api.DockerImage.Basis")
	proto.RegisterType((*DockerImage_DerivedDetails)(nil), "grafeas.v1alpha1.api.DockerImage.DerivedDetails")
	proto.RegisterType((*Discovery)(nil), "grafeas.v1alpha1.api.Discovery")
	proto.RegisterType((*Discovery_DiscoveredDetails)(nil), "grafeas.v1alpha1.api.Discovery.DiscoveredDetails")
	proto.RegisterType((*FileHashes)(nil), "grafeas.v1alpha1.api.FileHashes")
	proto.RegisterType((*Hash)(nil), "grafeas.v1alpha1.api.Hash")
	proto.RegisterType((*Note)(nil), "grafeas.v1alpha1.api.Note")
	proto.RegisterType((*Note_RelatedUrl)(nil), "grafeas.v1alpha1.api.Note.RelatedUrl")
	proto.RegisterType((*Occurrence)(nil), "grafeas.v1alpha1.api.Occurrence")
	proto.RegisterType((*PackageManager)(nil), "grafeas.v1alpha1.api.PackageManager")
	proto.RegisterType((*PackageManager_Distribution)(nil), "grafeas.v1alpha1.api.PackageManager.Distribution")
	proto.RegisterType((*PackageManager_Location)(nil), "grafeas.v1alpha1.api.PackageManager.Location")
	proto.RegisterType((*PackageManager_Package)(nil), "grafeas.v1alpha1.api.PackageManager.Package")
	proto.RegisterType((*PackageManager_InstallationDetails)(nil), "grafeas.v1alpha1.api.PackageManager.InstallationDetails")
	proto.RegisterType((*PgpSignedAttestation)(nil), "grafeas.v1alpha1.api.PgpSignedAttestation")
	proto.RegisterType((*Source)(nil), "grafeas.v1alpha1.api.Source")
	proto.RegisterMapType((map[string]*FileHashes)(nil), "grafeas.v1alpha1.api.Source.FileHashesEntry")
	proto.RegisterType((*RepoSource)(nil), "grafeas.v1alpha1.api.RepoSource")
	proto.RegisterType((*StorageSource)(nil), "grafeas.v1alpha1.api.StorageSource")
	proto.RegisterType((*VulnerabilityType)(nil), "grafeas.v1alpha1.api.VulnerabilityType")
	proto.RegisterType((*VulnerabilityType_Version)(nil), "grafeas.v1alpha1.api.VulnerabilityType.Version")
	proto.RegisterType((*VulnerabilityType_Detail)(nil), "grafeas.v1alpha1.api.VulnerabilityType.Detail")
	proto.RegisterType((*VulnerabilityType_VulnerabilityDetails)(nil), "grafeas.v1alpha1.api.VulnerabilityType.VulnerabilityDetails")
	proto.RegisterType((*VulnerabilityType_PackageIssue)(nil), "grafeas.v1alpha1.api.VulnerabilityType.PackageIssue")
	proto.RegisterType((*VulnerabilityType_VulnerabilityLocation)(nil), "grafeas.v1alpha1.api.VulnerabilityType.VulnerabilityLocation")
	proto.RegisterType((*SourceContext)(nil), "grafeas.v1alpha1.api.SourceContext")
	proto.RegisterMapType((map[string]string)(nil), "grafeas.v1alpha1.api.SourceContext.LabelsEntry")
	proto.RegisterType((*AliasContext)(nil), "grafeas.v1alpha1.api.AliasContext")
	proto.RegisterType((*CloudRepoSourceContext)(nil), "grafeas.v1alpha1.api.CloudRepoSourceContext")
	proto.RegisterType((*GerritSourceContext)(nil), "grafeas.v1alpha1.api.GerritSourceContext")
	proto.RegisterType((*GitSourceContext)(nil), "grafeas.v1alpha1.api.GitSourceContext")
	proto.RegisterType((*RepoId)(nil), "grafeas.v1alpha1.api.RepoId")
	proto.RegisterType((*ProjectRepoId)(nil), "grafeas.v1alpha1.api.ProjectRepoId")
	proto.RegisterType((*CreateProjectRequest)(nil), "grafeas.v1alpha1.api.CreateProjectRequest")
	proto.RegisterType((*GetProjectRequest)(nil), "grafeas.v1alpha1.api.GetProjectRequest")
	proto.RegisterType((*ListProjectsRequest)(nil), "grafeas.v1alpha1.api.ListProjectsRequest")
	proto.RegisterType((*ListProjectsResponse)(nil), "grafeas.v1alpha1.api.ListProjectsResponse")
	proto.RegisterType((*DeleteProjectRequest)(nil), "grafeas.v1alpha1.api.DeleteProjectRequest")
}

func init() { proto.RegisterFile("v1alpha1/proto/grafeas.proto", fileDescriptor_826dd64e8c537a3d) }

var fileDescriptor_826dd64e8c537a3d = []byte{
	// 4810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x3b, 0x5d, 0x6f, 0xe3, 0x56,
	0x76, 0xa6, 0x24, 0xeb, 0xe3, 0xc8, 0x1f, 0xf4, 0x1d, 0xcf, 0x8c, 0xa2, 0xc9, 0xec, 0x78, 0x39,
	0x49, 0x26, 0x71, 0x32, 0x72, 0xc6, 0xf9, 0x98, 0x64, 0xd2, 0x34, 0x2b, 0x4b, 0xb2, 0xc5, 0xb5,
	0x2c, 0x09, 0x94, 0x3c, 0x99, 0x69, 0x8b, 0xb2, 0xb4, 0x78, 0x2d, 0x73, 0x2d, 0x91, 0x5a, 0x92,
	0x72, 0xc6, 0x59, 0xa4, 0x68, 0x17, 0x09, 0x8a, 0x05, 0xfa, 0xb0, 0xe8, 0xb6, 0x40, 0x1f, 0xdb,
	0x2e, 0xd0, 0x87, 0x45, 0xdf, 0x8a, 0xfd, 0x05, 0x2d, 0x50, 0xf4, 0x71, 0x51, 0xec, 0x63, 0xdf,
	0x8a, 0x02, 0x45, 0x81, 0x45, 0xdb, 0x97, 0x3e, 0xb6, 0xb8, 0x5f, 0x14, 0x25, 0x51, 0xb2, 0x26,
	0xb3, 0xc1, 0xbe, 0xd8, 0xba, 0x87, 0xe7, 0x9c, 0x7b, 0xee, 0x39, 0xe7, 0x9e, 0x8f, 0x4b, 0x5e,
	0x78, 0xf9, 0xe2, 0x81, 0xd1, 0x1b, 0x9c, 0x19, 0x0f, 0x76, 0x06, 0xae, 0xe3, 0x3b, 0x3b, 0x5d,
	0xd7, 0x38, 0xc5, 0x86, 0x57, 0xa0, 0x23, 0xb4, 0x29, 0x86, 0x02, 0xab, 0x60, 0x0c, 0xac, 0xfc,
	0xcb, 0x5d, 0xc7, 0xe9, 0xf6, 0xf0, 0x8e, 0x31, 0xb0, 0x76, 0x0c, 0xdb, 0x76, 0x7c, 0xc3, 0xb7,
	0x1c, 0x9b, 0xd3, 0xe4, 0xef, 0xf2, 0xa7, 0x3d, 0xc7, 0xee, 0xba, 0x43, 0xdb, 0xb6, 0xec, 0xee,
	0x8e, 0x33, 0xc0, 0xee, 0x18, 0xd2, 0x2d, 0x8e, 0x44, 0x47, 0x27, 0xc3, 0xd3, 0x1d, 0xdc, 0x1f,
	0xf8, 0x97, 0xfc, 0xe1, 0xd6, 0xe4, 0xc3, 0x53, 0x0b, 0xf7, 0x4c, 0xbd, 0x6f, 0x78, 0xe7, 0x1c,
	0xe3, 0xce, 0x24, 0x86, 0x6f, 0xf5, 0xb1, 0xe7, 0x1b, 0xfd, 0x01, 0x47, 0x78, 0x8b, 0xfe, 0xeb,
	0xdc, 0xef, 0x62, 0xfb, 0xbe, 0xf7, 0x99, 0xd1, 0xed, 0x62, 0x77, 0xc7, 0x19, 0x50, 0x09, 0xa6,
	0x45, 0x56, 0xb6, 0x61, 0xf3, 0x00, 0xfb, 0x8d, 0x4e, 0x67, 0xe8, 0xba, 0xd8, 0xee, 0x60, 0x0d,
	0x7f, 0x7f, 0x88, 0x3d, 0x1f, 0x21, 0x48, 0xd8, 0x46, 0x1f, 0xe7, 0xa4, 0x2d, 0xe9, 0xf5, 0x8c,
	0x46, 0x7f, 0x2b, 0x5f, 0x4a, 0x70, 0xa3, 0x66, 0x79, 0x21, 0x6c, 0x4f, 0xa0, 0xdf, 0x80, 0xe4,
	0xc0, 0x70, 0xb1, 0xed, 0xe7, 0x96, 0x29, 0x01, 0x1f, 0x11, 0xf8, 0xa9, 0xd5, 0xf3, 0xb1, 0x9b,
	0x8b, 0x31, 0x38, 0x1b, 0xa1, 0x5b, 0x90, 0x19, 0x18, 0x5d, 0xac, 0x7b, 0xd6, 0xe7, 0x38, 0x17,
	0xdf, 0x92, 0x5e, 0x5f, 0xd6, 0xd2, 0x04, 0xd0, 0xb2, 0x3e, 0xc7, 0xe8, 0x36, 0x00, 0x7d, 0xe8,
	0x3b, 0xe7, 0xd8, 0xce, 0x25, 0x28, 0x21, 0x45, 0x6f, 0x13, 0x80, 0x72, 0x1f, 0x6e, 0x96, 0x71,
	0x0f, 0xfb, 0x78, 0x31, 0xa9, 0x3d, 0xb8, 0x59, 0x72, 0xb1, 0x11, 0x85, 0x3e, 0x92, 0x3a, 0x3e,
	0x26, 0xf5, 0x77, 0x00, 0x9c, 0x00, 0x99, 0x4a, 0x9e, 0xdd, 0xdd, 0x2a, 0x44, 0x39, 0x44, 0x21,
	0xc4, 0x34, 0x44, 0xa3, 0xfc, 0x9d, 0x04, 0x37, 0x8f, 0x07, 0xa6, 0xb1, 0xa0, 0x90, 0x2f, 0x3e,
	0x23, 0xfa, 0x08, 0xb2, 0x43, 0x3a, 0x21, 0x75, 0x16, 0xba, 0xa0, 0xec, 0x6e, 0xbe, 0xc0, 0xbc,
	0xa5, 0x20, 0xbc, 0xa5, 0xb0, 0x4f, 0xfc, 0xe9, 0xc8, 0xf0, 0xce, 0x35, 0x60, 0xe8, 0xe4, 0xb7,
	0xf2, 0x0a, 0xac, 0x1d, 0x60, 0xbf, 0xee, 0xf8, 0x73, 0x35, 0x59, 0x80, 0xdc, 0x98, 0xaf, 0x5c,
	0x85, 0xff, 0x87, 0x20, 0x13, 0x77, 0x21, 0x68, 0xbf, 0x11, 0x47, 0xb9, 0x07, 0x1b, 0xcc, 0x51,
	0xae, 0x12, 0xd4, 0x87, 0x0d, 0xe6, 0x22, 0x61, 0xc4, 0x91, 0xa4, 0x89, 0x31, 0x49, 0x6f, 0x42,
	0xca, 0x76, 0x7c, 0xac, 0x5b, 0xa6, 0x10, 0x95, 0x0c, 0x55, 0x13, 0x15, 0x20, 0x41, 0x7e, 0x8d,
	0x54, 0x1f, 0x65, 0x3d, 0x3a, 0x03, 0xc5, 0x53, 0xfe, 0x5c, 0x82, 0x0d, 0xe6, 0x23, 0x57, 0xc8,
	0x17, 0x70, 0x8e, 0x2d, 0xc6, 0xf9, 0xc5, 0x7c, 0xe1, 0x4b, 0x09, 0xf2, 0xc2, 0x6c, 0x11, 0x3b,
	0x3d, 0x4a, 0xbe, 0x6f, 0xc2, 0x78, 0x3f, 0x92, 0xe0, 0x56, 0xa4, 0x18, 0xde, 0xc0, 0xb1, 0x3d,
	0x8c, 0xf6, 0x20, 0x3b, 0xf2, 0x7e, 0x2f, 0x27, 0x6d, 0xc5, 0x17, 0xda, 0x32, 0x61, 0x22, 0xf4,
	0x1a, 0xac, 0xdb, 0xf8, 0x99, 0xaf, 0x87, 0xe4, 0x60, 0x0b, 0x58, 0x25, 0xe0, 0x66, 0x20, 0x4b,
	0x1f, 0x36, 0x42, 0x8e, 0xcc, 0x05, 0x78, 0x1b, 0x96, 0x89, 0xb2, 0xc5, 0xd4, 0xf3, 0xac, 0xc2,
	0x10, 0x17, 0x9e, 0xee, 0x2b, 0x09, 0x6e, 0x4e, 0xc5, 0xd9, 0xdf, 0xc0, 0xb2, 0xbf, 0xe0, 0xe1,
	0x3e, 0xc8, 0x60, 0x81, 0x14, 0xaf, 0xc0, 0x38, 0x2a, 0xf7, 0x86, 0x71, 0x20, 0xfa, 0x18, 0x60,
	0x94, 0xfd, 0x72, 0x31, 0x2a, 0xea, 0x6d, 0xe1, 0x85, 0xa1, 0x1c, 0x59, 0x08, 0x66, 0xd0, 0x42,
	0x04, 0x8a, 0x05, 0x37, 0x78, 0x08, 0x0d, 0x1e, 0xcf, 0xf1, 0xc1, 0x8f, 0x20, 0x13, 0xd0, 0x72,
	0x8f, 0xbf, 0x62, 0xae, 0x11, 0xbe, 0xf2, 0x63, 0x09, 0x6e, 0xf0, 0x24, 0x31, 0x39, 0xd7, 0x28,
	0x0c, 0x48, 0x63, 0x61, 0xe0, 0xdb, 0xb0, 0x12, 0xd0, 0x8f, 0x62, 0x41, 0x36, 0x80, 0xa9, 0xe6,
	0x8b, 0x89, 0x74, 0x1b, 0x52, 0x4d, 0xd7, 0xf9, 0x1e, 0xee, 0x44, 0x87, 0xac, 0x3f, 0x91, 0x60,
	0x23, 0xa0, 0x3b, 0xc2, 0xbe, 0x61, 0x1a, 0xbe, 0x41, 0x36, 0x7e, 0x87, 0x2e, 0x43, 0x27, 0x55,
	0x01, 0x25, 0x88, 0xda, 0xf8, 0x6d, 0x51, 0x32, 0x68, 0xc0, 0xd0, 0x09, 0x00, 0xbd, 0x07, 0x69,
	0x6c, 0x9b, 0x8c, 0x32, 0x76, 0x25, 0x65, 0x0a, 0xdb, 0x26, 0x19, 0x29, 0x7f, 0x00, 0xe9, 0xa2,
	0xeb, 0x5b, 0xa7, 0x46, 0xb4, 0xa4, 0x28, 0x0f, 0xe9, 0xce, 0x19, 0xee, 0x9c, 0x7b, 0xc3, 0x3e,
	0x57, 0x52, 0x30, 0x46, 0x6b, 0x10, 0xb3, 0x4c, 0x9e, 0x7c, 0x63, 0x96, 0x89, 0x36, 0x61, 0x99,
	0xd0, 0x78, 0xb9, 0xc4, 0x56, 0xfc, 0xf5, 0x8c, 0xc6, 0x06, 0xca, 0x3f, 0xc4, 0x60, 0xb3, 0xe8,
	0xfb, 0x64, 0x62, 0xb2, 0xda, 0xe2, 0xd0, 0x3f, 0x73, 0x5c, 0xcb, 0xbf, 0x44, 0x9f, 0x42, 0xe2,
	0xcc, 0xe2, 0x96, 0xc9, 0xee, 0x96, 0xa2, 0x77, 0x41, 0x14, 0x65, 0x24, 0xb0, 0x6a, 0xd9, 0xbe,
	0x46, 0x19, 0xe6, 0xbf, 0x0b, 0xb9, 0x59, 0x18, 0xa8, 0x00, 0xd7, 0xce, 0x86, 0x7d, 0xc3, 0xd6,
	0x5d, 0x6c, 0x98, 0xc6, 0x49, 0x0f, 0xeb, 0xa1, 0x25, 0x6f, 0xd0, 0x47, 0x1a, 0x7f, 0x52, 0x37,
	0xfa, 0x38, 0xff, 0x95, 0x04, 0x28, 0xc4, 0xac, 0x8c, 0x7d, 0xc3, 0xea, 0x79, 0xe8, 0x04, 0x6e,
	0x0c, 0xba, 0x03, 0xdd, 0xb3, 0xba, 0x36, 0x36, 0x75, 0x63, 0x84, 0xc0, 0x57, 0xb3, 0x1d, 0xbd,
	0x9a, 0x66, 0x77, 0xd0, 0xa2, 0x24, 0x21, 0x96, 0xd5, 0x25, 0x6d, 0x73, 0x10, 0x01, 0xdf, 0xcb,
	0x42, 0x86, 0xf0, 0x37, 0xfc, 0xa1, 0x8b, 0x95, 0x3f, 0x92, 0x60, 0x65, 0x6f, 0x68, 0xf5, 0x4c,
	0x21, 0x41, 0x05, 0x60, 0xe0, 0x3a, 0x17, 0xd8, 0x36, 0x48, 0xcd, 0xc1, 0x66, 0x7d, 0x35, 0x7a,
	0x56, 0x4a, 0xd7, 0x0c, 0x90, 0xb5, 0x10, 0x21, 0x7a, 0x03, 0xe4, 0xd1, 0x48, 0x3f, 0xb9, 0x24,
	0x21, 0x91, 0xd9, 0x79, 0x7d, 0x04, 0xdf, 0x23, 0x60, 0xe5, 0xdf, 0x97, 0x61, 0x7d, 0x82, 0x15,
	0x77, 0x01, 0x29, 0x70, 0x81, 0xdb, 0x54, 0x2a, 0xe2, 0xf7, 0xa3, 0x5d, 0x95, 0xe1, 0x10, 0xd5,
	0x44, 0x1f, 0x42, 0xba, 0xe3, 0xf4, 0xfb, 0x86, 0x6d, 0x7a, 0xb9, 0x65, 0x11, 0x51, 0xa2, 0x44,
	0x2e, 0x31, 0x2c, 0x2d, 0x40, 0x47, 0x07, 0xb0, 0x7e, 0x32, 0xb4, 0x7a, 0xbe, 0x6e, 0x70, 0x77,
	0xf5, 0x72, 0x49, 0xca, 0xe1, 0x5b, 0x33, 0x1c, 0x87, 0xa3, 0x69, 0x6b, 0x94, 0x4c, 0x0c, 0xbd,
	0xc9, 0x5d, 0x96, 0x7a, 0xae, 0x5d, 0xf6, 0x21, 0x80, 0xe7, 0x1b, 0xae, 0xcf, 0x68, 0xd3, 0x57,
	0xd2, 0x66, 0x28, 0x36, 0x25, 0xfd, 0x08, 0xb2, 0xa7, 0x96, 0x6d, 0x79, 0x67, 0x8c, 0x36, 0x73,
	0xf5, 0xbc, 0x0c, 0x9d, 0x12, 0xe7, 0x20, 0x45, 0xa5, 0x70, 0xdc, 0x5c, 0x96, 0x2a, 0x55, 0x0c,
	0xd1, 0x1d, 0xc8, 0xf6, 0x9c, 0xae, 0xa7, 0x9f, 0x0c, 0x3b, 0xe7, 0xd8, 0xcf, 0xad, 0xd2, 0xa7,
	0x40, 0x40, 0x7b, 0x14, 0x82, 0x54, 0xd8, 0xf0, 0x9c, 0xa1, 0xdb, 0xc1, 0x7a, 0xc8, 0x5f, 0xd6,
	0xe8, 0xec, 0x2f, 0x47, 0xab, 0xae, 0x45, 0xd1, 0x35, 0x99, 0x91, 0x85, 0xac, 0x7d, 0x1b, 0xc0,
	0x77, 0x2d, 0xd2, 0x93, 0x10, 0xeb, 0xae, 0x33, 0xeb, 0x72, 0x88, 0x6a, 0xa2, 0xdf, 0x83, 0x55,
	0xa2, 0x6b, 0x53, 0xe7, 0x0d, 0x4b, 0x4e, 0xa6, 0x06, 0x7a, 0xb8, 0x90, 0x57, 0xb2, 0x71, 0x83,
	0x51, 0x56, 0x6c, 0xdf, 0xbd, 0xd4, 0x56, 0x4e, 0x42, 0x20, 0x74, 0x8f, 0x39, 0x80, 0x89, 0x5d,
	0xfd, 0x02, 0xbb, 0x1e, 0xd9, 0x6b, 0x1b, 0x54, 0x82, 0x35, 0x0e, 0x7e, 0xcc, 0xa0, 0xf9, 0x4f,
	0x60, 0x63, 0x8a, 0x17, 0x92, 0x21, 0x7e, 0x8e, 0x2f, 0xb9, 0xa7, 0x92, 0x9f, 0x24, 0x5a, 0x5d,
	0x18, 0xbd, 0x21, 0xe6, 0x5e, 0xca, 0x06, 0x8f, 0x62, 0x1f, 0x48, 0xca, 0xff, 0x4a, 0xb0, 0x46,
	0x39, 0xb4, 0xc4, 0xf6, 0xa3, 0x7e, 0x3d, 0x3c, 0xe9, 0x59, 0x1d, 0x7d, 0xc4, 0x25, 0xc3, 0x20,
	0x87, 0xf8, 0x12, 0xbd, 0x1c, 0xda, 0xaa, 0xc2, 0xeb, 0x03, 0x00, 0xba, 0x0e, 0xc9, 0x73, 0x7c,
	0xa9, 0x07, 0xb1, 0x72, 0xf9, 0x1c, 0x5f, 0xaa, 0x26, 0x3a, 0x80, 0x34, 0x01, 0xfb, 0x97, 0x03,
	0x4c, 0x0b, 0xa8, 0xb5, 0xdd, 0xb7, 0xe6, 0x68, 0x2a, 0x90, 0xa5, 0x70, 0x88, 0x2f, 0xdb, 0x97,
	0x03, 0xac, 0xa5, 0xce, 0xd9, 0x0f, 0xa5, 0x0a, 0x29, 0x0e, 0x43, 0x39, 0xd8, 0x3c, 0xac, 0x3c,
	0xd5, 0xdb, 0x4f, 0x9b, 0x15, 0xfd, 0xb8, 0xde, 0x6a, 0x56, 0x4a, 0xea, 0xbe, 0x5a, 0x29, 0xcb,
	0x4b, 0xe8, 0x3a, 0x6c, 0x34, 0x0f, 0x9a, 0x7a, 0xb1, 0x55, 0x52, 0x55, 0xbd, 0xa8, 0x1d, 0x35,
	0xb4, 0x4a, 0x59, 0x96, 0xd0, 0x0a, 0xa4, 0x9b, 0x87, 0xea, 0x13, 0xbd, 0x59, 0x39, 0x92, 0x63,
	0xca, 0x33, 0xc8, 0xd0, 0xc9, 0x28, 0xaf, 0x08, 0x85, 0x4b, 0x51, 0x0a, 0x47, 0x7b, 0x93, 0xab,
	0xcf, 0xee, 0xbe, 0xb2, 0xc8, 0x4a, 0xb4, 0xf1, 0xf8, 0x96, 0xe2, 0x9b, 0x3e, 0x32, 0x0f, 0xc9,
	0x10, 0xc7, 0xf6, 0x05, 0x2d, 0x43, 0x32, 0x1a, 0xf9, 0x49, 0xb0, 0x0c, 0xb7, 0xeb, 0xe5, 0xe2,
	0x14, 0x44, 0x7f, 0x13, 0x2c, 0xd3, 0x72, 0x79, 0x39, 0x4a, 0x7e, 0xf2, 0x00, 0xb5, 0x1c, 0x04,
	0xa8, 0x97, 0x20, 0xfd, 0x99, 0x61, 0xf9, 0xfa, 0xa9, 0xe3, 0xd2, 0xf8, 0x91, 0xd1, 0x52, 0x64,
	0xbc, 0xef, 0xb8, 0xca, 0x2f, 0xe3, 0x00, 0x65, 0x3c, 0xe8, 0x39, 0x97, 0x24, 0xfa, 0x93, 0x12,
	0xc1, 0xc5, 0x7c, 0xe7, 0x0c, 0x5d, 0x8b, 0x16, 0x6b, 0x19, 0x2d, 0x2b, 0x60, 0xc7, 0xae, 0x95,
	0xff, 0x69, 0x9c, 0xf4, 0x28, 0x84, 0xa2, 0x8f, 0x6d, 0x5f, 0x44, 0xe6, 0xdb, 0x00, 0x43, 0x0f,
	0xbb, 0x3a, 0xee, 0x1b, 0x56, 0x4f, 0xf8, 0x0a, 0x81, 0x54, 0x08, 0x80, 0xc4, 0x01, 0x93, 0xd2,
	0x2c, 0x9a, 0xab, 0x81, 0xa1, 0xd3, 0x38, 0xf0, 0x09, 0xac, 0x0e, 0xed, 0x30, 0x79, 0xfc, 0x4a,
	0xf2, 0x15, 0x41, 0x40, 0x19, 0xdc, 0x80, 0x64, 0xc7, 0xb1, 0x4f, 0xad, 0x2e, 0x0d, 0x5e, 0x19,
	0x8d, 0x8f, 0x48, 0x80, 0x31, 0x4c, 0xd3, 0xc5, 0x9e, 0xc7, 0x95, 0x25, 0x86, 0x53, 0x7a, 0x48,
	0x4e, 0xe9, 0x01, 0x7d, 0x0a, 0xe9, 0x41, 0xcf, 0xf0, 0x4f, 0x1d, 0xb7, 0x4f, 0xe3, 0xe9, 0xda,
	0xee, 0x47, 0xd1, 0xf6, 0x1f, 0xa9, 0xb7, 0x30, 0xa5, 0xb7, 0x42, 0x93, 0xb3, 0xd0, 0x02, 0x66,
	0x4a, 0x09, 0xd2, 0x02, 0x4a, 0x5c, 0xbb, 0x59, 0x2b, 0xb6, 0xf7, 0x1b, 0xda, 0xd1, 0x84, 0x6b,
	0xa7, 0x20, 0x7e, 0x70, 0x58, 0x91, 0x25, 0x94, 0x86, 0xc4, 0x7e, 0xad, 0xf2, 0x44, 0x8e, 0x21,
	0x80, 0x64, 0xe9, 0xb8, 0xd5, 0x6e, 0x1c, 0xc9, 0x71, 0xe5, 0x1f, 0x93, 0x90, 0x2d, 0x3b, 0x9d,
	0x73, 0xec, 0xaa, 0x7d, 0xa3, 0x8b, 0xf3, 0xff, 0x11, 0x83, 0xe5, 0x9a, 0x71, 0x89, 0x5d, 0xd4,
	0x80, 0x8c, 0x69, 0xb9, 0xb8, 0xe3, 0x5b, 0x17, 0xcc, 0xdb, 0xd6, 0x76, 0x1f, 0xcc, 0x10, 0x7c,
	0x44, 0x5f, 0xa0, 0xb4, 0x85, 0xb2, 0x20, 0xd4, 0x46, 0x3c, 0x48, 0x1c, 0x30, 0xdc, 0xee, 0x90,
	0xac, 0x4a, 0xa4, 0xd1, 0x11, 0x40, 0xf9, 0x2f, 0x09, 0x32, 0x01, 0x19, 0x7a, 0x09, 0xae, 0x97,
	0x55, 0xad, 0x52, 0x6a, 0xab, 0x8f, 0x27, 0xf7, 0xea, 0x1a, 0xc0, 0x51, 0x51, 0xad, 0xb7, 0x8b,
	0x6a, 0xbd, 0xa2, 0xc9, 0x12, 0x59, 0xa0, 0x76, 0x5c, 0x97, 0x63, 0xe4, 0x47, 0xe9, 0xa8, 0x2c,
	0xc7, 0x51, 0x06, 0x96, 0x6b, 0xc5, 0xbd, 0x4a, 0x4d, 0x4e, 0x90, 0xa5, 0x56, 0x9e, 0x34, 0x1b,
	0xad, 0x8a, 0xbc, 0x4c, 0x9e, 0x57, 0xea, 0x8f, 0xe5, 0x24, 0xf9, 0x51, 0x2c, 0x97, 0xe5, 0x14,
	0x51, 0x49, 0xa9, 0xd1, 0x7c, 0x2a, 0xa7, 0x09, 0xd3, 0x4a, 0xbd, 0xad, 0x3d, 0x6d, 0x36, 0xd4,
	0x7a, 0x5b, 0xce, 0x10, 0xba, 0xc7, 0x8d, 0xda, 0xf1, 0x51, 0x45, 0x06, 0x82, 0x75, 0xdc, 0xaa,
	0x68, 0x72, 0x16, 0x65, 0x21, 0xf5, 0x69, 0x43, 0x3b, 0x2c, 0xab, 0x9a, 0xbc, 0x42, 0xb9, 0x68,
	0x07, 0xf2, 0x2a, 0x81, 0x36, 0xea, 0x7b, 0xc7, 0x6a, 0xad, 0x2c, 0xaf, 0x11, 0x46, 0xad, 0x76,
	0xa3, 0xd9, 0x52, 0x0f, 0xea, 0xc5, 0x9a, 0xbc, 0x8e, 0xd6, 0x21, 0x5b, 0xad, 0x14, 0x6b, 0xed,
	0x6a, 0xa9, 0x5a, 0x29, 0x1d, 0xca, 0x32, 0x11, 0xae, 0x55, 0xad, 0xd4, 0x6a, 0xf2, 0x46, 0xfe,
	0x09, 0x64, 0xf7, 0x2d, 0xbb, 0x8b, 0xdd, 0x81, 0x6b, 0xb1, 0xee, 0xfb, 0xe2, 0x41, 0xb8, 0xe2,
	0x4a, 0x5e, 0x3c, 0x20, 0x65, 0x16, 0x7d, 0xb0, 0xab, 0x9f, 0xf4, 0x9c, 0x13, 0xbe, 0xc5, 0x93,
	0x17, 0xbb, 0x7b, 0x3d, 0xe7, 0x84, 0x3f, 0xa0, 0x14, 0xfc, 0x94, 0xe7, 0x62, 0x97, 0x16, 0x66,
	0x3f, 0x80, 0xe5, 0x3d, 0xc3, 0xb3, 0x26, 0xfd, 0x53, 0x6c, 0xb8, 0x90, 0x7f, 0xf6, 0x50, 0x83,
	0xa6, 0x5e, 0x21, 0x05, 0xdf, 0x72, 0xf7, 0xaf, 0xb6, 0x74, 0x48, 0x74, 0x2d, 0xcc, 0x21, 0xff,
	0xdf, 0x12, 0xac, 0x95, 0xb1, 0x6b, 0x5d, 0xe0, 0xa0, 0x1e, 0x9b, 0x98, 0x43, 0x7a, 0xd1, 0x39,
	0x48, 0xe5, 0x6d, 0x5a, 0x9e, 0x6f, 0x88, 0x23, 0xa5, 0x55, 0x2d, 0x18, 0xa3, 0x7d, 0x80, 0x1e,
	0xf1, 0x42, 0xdd, 0xb2, 0x4f, 0x1d, 0x1a, 0x01, 0xb3, 0xbb, 0xf7, 0x16, 0xf4, 0x5c, 0x2d, 0x43,
	0x49, 0x55, 0xfb, 0xd4, 0x41, 0xdb, 0xb0, 0x71, 0x62, 0x78, 0x58, 0x1f, 0x53, 0x20, 0x8b, 0x9e,
	0xeb, 0xe4, 0x81, 0x36, 0x52, 0xa2, 0xf2, 0x53, 0xea, 0xbd, 0x5e, 0xc7, 0xb9, 0xc0, 0xee, 0x25,
	0x2a, 0xc3, 0xaa, 0x61, 0x1b, 0xbd, 0x4b, 0xcf, 0xf2, 0xf4, 0x73, 0xcb, 0x36, 0xf9, 0xf6, 0xb9,
	0x33, 0xbb, 0x8f, 0x2e, 0x1c, 0x5a, 0xb6, 0xa9, 0xad, 0x08, 0x2a, 0x32, 0xca, 0x37, 0x61, 0x43,
	0xb0, 0x1c, 0x69, 0x72, 0xac, 0xf1, 0x92, 0x9e, 0xb3, 0xf1, 0xaa, 0x00, 0xec, 0x5b, 0x3d, 0x5c,
	0x35, 0xbc, 0x33, 0xec, 0xa1, 0x87, 0x90, 0x39, 0xb5, 0x7a, 0x58, 0x3f, 0x33, 0xbc, 0xb3, 0xf9,
	0x9d, 0x3e, 0x21, 0xd0, 0xd2, 0xa7, 0x9c, 0x54, 0xf9, 0x0c, 0x12, 0xe4, 0x3f, 0x7a, 0x08, 0x09,
	0x9a, 0x9f, 0xd9, 0xea, 0xee, 0xce, 0xa6, 0xa5, 0x7f, 0x68, 0x5a, 0xa6, 0x04, 0xe3, 0xd5, 0xc5,
	0x0a, 0xaf, 0x2e, 0x94, 0x2d, 0x48, 0x0b, 0x3c, 0xb2, 0xe7, 0xea, 0x8d, 0x7a, 0x45, 0x5e, 0x22,
	0x3b, 0xb1, 0x55, 0x2d, 0xee, 0xbe, 0xf7, 0xbe, 0x2c, 0x29, 0xff, 0x9a, 0x81, 0x04, 0xd1, 0x56,
	0x64, 0x12, 0x7c, 0x13, 0x36, 0xbc, 0x33, 0xc7, 0xf5, 0x75, 0x13, 0x7b, 0x1d, 0xd7, 0x1a, 0x04,
	0xad, 0x69, 0x46, 0x93, 0xe9, 0x83, 0xf2, 0x08, 0x4e, 0x2a, 0x7b, 0xa2, 0xad, 0x31, 0x5c, 0x6e,
	0x5a, 0x02, 0x0f, 0xa3, 0xbe, 0x03, 0x09, 0x6a, 0xc3, 0xcc, 0x62, 0x36, 0xa4, 0xc8, 0xe8, 0x09,
	0xa0, 0x8b, 0x61, 0xcf, 0xc6, 0xae, 0x71, 0x62, 0xf5, 0x2c, 0x9f, 0x17, 0x32, 0x49, 0x6a, 0xaf,
	0x19, 0xbe, 0xf8, 0x38, 0x8c, 0x4f, 0x94, 0x50, 0x5d, 0xd2, 0x36, 0x2e, 0x26, 0x81, 0xe8, 0x3b,
	0x00, 0xac, 0x8e, 0xa4, 0x1c, 0x59, 0x91, 0x7d, 0x67, 0x4e, 0x41, 0xc1, 0x39, 0x65, 0x4e, 0x82,
	0xd2, 0xa5, 0x0a, 0x40, 0xfd, 0xda, 0x22, 0x6e, 0x4f, 0x6b, 0xe2, 0x85, 0xf6, 0x07, 0x0d, 0x28,
	0x94, 0x93, 0xe1, 0x61, 0x0a, 0x42, 0x55, 0x48, 0x0d, 0x8c, 0xce, 0x39, 0x61, 0xc3, 0x6a, 0xe6,
	0x19, 0x35, 0x5a, 0x93, 0x21, 0x1d, 0x19, 0xb6, 0xd1, 0xc5, 0xae, 0x18, 0x56, 0x97, 0x34, 0x41,
	0x8e, 0xf6, 0x80, 0x27, 0x72, 0x92, 0xfe, 0x68, 0xe9, 0x3a, 0xf3, 0xe8, 0x67, 0x94, 0x26, 0xab,
	0x4b, 0x5a, 0x88, 0x0a, 0x7d, 0x42, 0x12, 0x16, 0xdf, 0x82, 0x39, 0x34, 0x4f, 0x31, 0xc1, 0x4e,
	0x25, 0xcb, 0x09, 0x68, 0x90, 0x01, 0xd7, 0x43, 0xcd, 0xaa, 0x6e, 0x88, 0xde, 0x38, 0xb7, 0x39,
	0xaf, 0x6d, 0x8d, 0xec, 0xa6, 0x97, 0xb4, 0x4d, 0x23, 0xaa, 0xad, 0xdf, 0x87, 0xac, 0x8b, 0x7b,
	0x86, 0x8f, 0x4d, 0x1a, 0x4d, 0x52, 0x74, 0xd7, 0xbd, 0x3a, 0xc7, 0xa7, 0x34, 0x86, 0x7d, 0xec,
	0xf6, 0x34, 0x70, 0x83, 0xdf, 0xa8, 0x04, 0xeb, 0xf8, 0xd9, 0xc0, 0xe2, 0x67, 0x34, 0xb4, 0xd8,
	0x81, 0x2b, 0x8b, 0x9d, 0xb5, 0x11, 0x89, 0x68, 0xba, 0xc2, 0xcd, 0x5e, 0xf6, 0xb9, 0x9a, 0xbd,
	0xd1, 0x41, 0x2c, 0x25, 0x5e, 0xb9, 0x9a, 0x98, 0xa1, 0x53, 0xe2, 0x57, 0x61, 0x6d, 0x74, 0xc2,
	0x44, 0x77, 0xf2, 0x35, 0x76, 0xca, 0x16, 0x40, 0x69, 0x1a, 0x7b, 0x17, 0x60, 0xb4, 0x7e, 0x52,
	0xbf, 0x8e, 0x52, 0x18, 0xf9, 0x49, 0xe2, 0x48, 0xcf, 0x38, 0xc1, 0x3d, 0xd1, 0xa5, 0xd0, 0x81,
	0xf2, 0x33, 0x09, 0x12, 0x64, 0x2b, 0xa2, 0x4d, 0x90, 0x0f, 0xd5, 0x7a, 0x79, 0xa2, 0x7e, 0x78,
	0x09, 0xae, 0x37, 0x8b, 0xa5, 0xc3, 0xe2, 0x41, 0x45, 0x7f, 0x7c, 0x5c, 0xab, 0x57, 0xb4, 0xe2,
	0x9e, 0x5a, 0x53, 0xdb, 0x4f, 0xe5, 0x18, 0xda, 0x80, 0x55, 0x9a, 0xc7, 0xf5, 0x72, 0xa5, 0x5d,
	0x54, 0x6b, 0x2d, 0x39, 0x4e, 0xf2, 0xb7, 0x7a, 0x44, 0x70, 0xf7, 0x8a, 0x2d, 0xb5, 0x25, 0x27,
	0xd0, 0x35, 0x58, 0x17, 0xe4, 0x47, 0xc5, 0x7a, 0xf1, 0xa0, 0xa2, 0xc9, 0xcb, 0x24, 0xeb, 0x97,
	0x2b, 0xcd, 0x5a, 0xe3, 0x69, 0x71, 0xaf, 0x56, 0x91, 0x93, 0x68, 0x15, 0x32, 0x65, 0xb5, 0x55,
	0x6a, 0x3c, 0xae, 0x68, 0x4f, 0xe5, 0x14, 0x99, 0xb2, 0xd8, 0x6e, 0x57, 0x5a, 0xed, 0x62, 0x5b,
	0x6d, 0xd4, 0xf5, 0xe2, 0x71, 0xbb, 0xda, 0xd0, 0xc8, 0x94, 0xe9, 0xbd, 0x2c, 0x64, 0xe8, 0x91,
	0x3b, 0xd9, 0xcd, 0xca, 0xcf, 0xd3, 0x00, 0xa3, 0x93, 0xcd, 0xc8, 0x28, 0x37, 0x99, 0xd0, 0x63,
	0xd3, 0x09, 0xfd, 0x16, 0x67, 0x19, 0xaa, 0x0b, 0xd2, 0x04, 0x40, 0x6b, 0x09, 0x11, 0xcd, 0x92,
	0xcf, 0x13, 0xcd, 0x3c, 0xb8, 0x3e, 0x1e, 0xcd, 0x4c, 0x96, 0x8d, 0x78, 0xf8, 0xf9, 0xad, 0x05,
	0x03, 0xda, 0x38, 0x84, 0x67, 0x34, 0xb2, 0x55, 0x2e, 0x22, 0xe0, 0x48, 0x15, 0x0d, 0xb3, 0x98,
	0x8c, 0x1d, 0x46, 0x28, 0x73, 0x62, 0xdd, 0x88, 0x25, 0xeb, 0x8e, 0x05, 0xab, 0x53, 0xb8, 0x6e,
	0xb2, 0x82, 0x84, 0x05, 0xbd, 0x80, 0x25, 0x73, 0xf9, 0xb7, 0xaf, 0x0e, 0x7e, 0xe3, 0xf5, 0x4c,
	0x75, 0x49, 0xbb, 0xc6, 0x19, 0xd2, 0xc7, 0x62, 0x9e, 0x3e, 0x6c, 0x5a, 0xb6, 0xe7, 0x1b, 0xbd,
	0x1e, 0xf3, 0x6c, 0x31, 0x0d, 0xdb, 0x1c, 0x1f, 0x2c, 0x14, 0x1c, 0xd5, 0x10, 0x83, 0xd0, 0x74,
	0xd6, 0x34, 0x18, 0x75, 0x00, 0x99, 0x41, 0xa3, 0x10, 0x4c, 0xc6, 0x22, 0xf1, 0xee, 0xf3, 0xf7,
	0x18, 0x24, 0xdf, 0x98, 0x53, 0x0d, 0xdb, 0x09, 0x20, 0x33, 0xa8, 0x42, 0x82, 0x49, 0xd6, 0xe9,
	0x24, 0x0f, 0xae, 0x08, 0xaf, 0x85, 0xa9, 0xfa, 0x85, 0xce, 0x31, 0x55, 0xd4, 0x0c, 0xe0, 0x5a,
	0x38, 0xf0, 0x8a, 0x49, 0x64, 0x3a, 0xc9, 0xc7, 0x5f, 0xef, 0xec, 0x73, 0x34, 0x21, 0x32, 0xa6,
	0x8f, 0x28, 0xb7, 0x48, 0x1c, 0xee, 0x63, 0xd3, 0x62, 0x85, 0xd4, 0xb2, 0xd8, 0x45, 0x01, 0x68,
	0x32, 0x38, 0x66, 0x5e, 0x24, 0x38, 0xc2, 0x37, 0x10, 0x1c, 0xf7, 0x32, 0x90, 0xe2, 0x8a, 0x52,
	0x7e, 0xb5, 0x0c, 0x6b, 0xe3, 0x6e, 0x94, 0xff, 0x59, 0x0c, 0x56, 0xca, 0x96, 0xe7, 0xbb, 0xd6,
	0xc9, 0x90, 0xae, 0xe7, 0x26, 0xa4, 0x3a, 0x03, 0xd1, 0xac, 0xb3, 0xe6, 0x76, 0x40, 0xfb, 0xd3,
	0x63, 0x58, 0x31, 0xdc, 0xce, 0x99, 0xe5, 0xe3, 0x4e, 0x70, 0x46, 0x31, 0xb3, 0xd5, 0x9b, 0x70,
	0xd6, 0x62, 0x88, 0x50, 0x1b, 0x63, 0x83, 0x1e, 0xc3, 0x1a, 0x89, 0xdc, 0x9e, 0x1f, 0x9c, 0x8f,
	0xb0, 0x6e, 0x7c, 0x67, 0xe1, 0x60, 0xc1, 0xc8, 0xb4, 0x55, 0xc6, 0x46, 0x9c, 0xa7, 0x7c, 0x0b,
	0xa0, 0x6f, 0x58, 0xb6, 0x6f, 0x58, 0x36, 0x16, 0x87, 0x19, 0x21, 0x88, 0xc8, 0x12, 0xc9, 0x51,
	0x96, 0xd8, 0x82, 0x6c, 0xb8, 0xcc, 0x4b, 0x31, 0x5b, 0x87, 0x40, 0xf9, 0x1f, 0x4a, 0x90, 0xae,
	0x39, 0x1d, 0x63, 0xbe, 0xa2, 0x54, 0x48, 0x89, 0xa5, 0xc4, 0xbe, 0xde, 0x52, 0x04, 0x3d, 0x89,
	0xec, 0x03, 0xc3, 0x3f, 0xe3, 0xd1, 0x99, 0xfe, 0xce, 0xfb, 0x90, 0xe2, 0xda, 0x8d, 0x0c, 0xfc,
	0xc7, 0xb0, 0x62, 0x86, 0xec, 0x99, 0x03, 0x5a, 0x3a, 0x2c, 0x66, 0xa6, 0xb0, 0x23, 0x68, 0x63,
	0x6c, 0xf2, 0x3e, 0x5c, 0x8b, 0x88, 0x38, 0x91, 0x12, 0xa8, 0x90, 0xee, 0x71, 0x25, 0xf1, 0x37,
	0x5e, 0xf7, 0x17, 0x9a, 0x5d, 0x68, 0x56, 0x0b, 0xc8, 0x95, 0xdf, 0x86, 0x95, 0xb0, 0xeb, 0xa0,
	0x97, 0x21, 0x57, 0xd4, 0x4a, 0x55, 0xb5, 0x5d, 0x29, 0xb5, 0x8f, 0xb5, 0xca, 0xf4, 0x11, 0xc6,
	0x93, 0x0f, 0xde, 0x67, 0xad, 0xfe, 0x93, 0xf7, 0xdf, 0x95, 0x63, 0xca, 0xff, 0x49, 0xb0, 0x19,
	0xf5, 0xba, 0x60, 0xfc, 0xac, 0x51, 0x9a, 0x3c, 0x6b, 0x7c, 0x0a, 0x2b, 0x1d, 0xc7, 0xf6, 0x49,
	0xb4, 0xa4, 0xd5, 0x73, 0x9c, 0xba, 0xfa, 0xfb, 0x8b, 0xbf, 0x8e, 0x28, 0x94, 0x18, 0x39, 0xed,
	0x65, 0xb2, 0x9d, 0xd1, 0x80, 0xb8, 0xe5, 0xa0, 0x3b, 0xd0, 0xf9, 0x51, 0x26, 0xcd, 0xca, 0xd5,
	0x25, 0x2d, 0x3d, 0xe8, 0x0e, 0x0e, 0xf1, 0xa5, 0x6a, 0x2a, 0x65, 0xc8, 0x86, 0x68, 0xc9, 0x82,
	0x4b, 0x8d, 0x7a, 0xbb, 0x52, 0x6f, 0x47, 0x1d, 0x47, 0xde, 0x84, 0x6b, 0x2d, 0xf5, 0xa8, 0x59,
	0xab, 0xe8, 0x2d, 0xf5, 0xa0, 0xae, 0xd6, 0x0f, 0xf4, 0xef, 0xb6, 0x1a, 0x75, 0x59, 0xda, 0x4b,
	0x8b, 0xc3, 0x52, 0xe5, 0x9f, 0x12, 0x90, 0x64, 0x47, 0xd1, 0xa8, 0x06, 0x6b, 0x9e, 0xef, 0xb8,
	0xf4, 0x6d, 0x34, 0x85, 0xf0, 0xbe, 0x70, 0x46, 0x43, 0xd6, 0x62, 0xb8, 0x8c, 0xb8, 0xba, 0xa4,
	0xad, 0x7a, 0x61, 0x00, 0x2a, 0x91, 0xc8, 0x38, 0x70, 0x04, 0xab, 0xb9, 0xdf, 0x6b, 0x68, 0x78,
	0xe0, 0x04, 0x7c, 0xc0, 0x0d, 0x46, 0xe8, 0x77, 0xe1, 0xa6, 0x78, 0x13, 0xa1, 0x4f, 0xc8, 0x96,
	0x58, 0x58, 0x36, 0xed, 0xba, 0xe0, 0x31, 0x06, 0x46, 0x47, 0x90, 0x0d, 0xfa, 0x56, 0xec, 0xf1,
	0x06, 0xff, 0xad, 0x79, 0xa7, 0xf5, 0x85, 0x51, 0xd7, 0xcb, 0x0e, 0xcf, 0xe1, 0x74, 0xd4, 0x06,
	0x7f, 0x0c, 0x29, 0x6a, 0xc8, 0x67, 0x3e, 0xaf, 0x30, 0xee, 0xce, 0x63, 0x55, 0x62, 0xa8, 0x9a,
	0xa0, 0x41, 0x6d, 0xb8, 0x66, 0x98, 0xa6, 0x45, 0xbc, 0xc3, 0xe8, 0xe9, 0x1c, 0x4a, 0x2a, 0xa3,
	0xf8, 0xa2, 0xac, 0xd0, 0x88, 0x9e, 0x83, 0xbc, 0xbc, 0x0e, 0xeb, 0x13, 0x32, 0x47, 0x1c, 0xd2,
	0xbf, 0x1f, 0x6e, 0xa3, 0x67, 0x1a, 0x69, 0xc4, 0x27, 0x74, 0x8c, 0x4f, 0x3c, 0x89, 0x19, 0x44,
	0xf9, 0xb9, 0x44, 0xaa, 0xec, 0xc0, 0x74, 0xe3, 0x2f, 0xa9, 0xa4, 0xc9, 0x97, 0x54, 0xb7, 0x20,
	0x43, 0xdd, 0x83, 0x46, 0x07, 0xfe, 0xce, 0x93, 0x00, 0xea, 0xac, 0x38, 0xcd, 0x9e, 0xb8, 0x86,
	0xdd, 0x39, 0x0b, 0xd5, 0x9e, 0xc4, 0x33, 0x18, 0x90, 0xa2, 0xdc, 0x82, 0xb4, 0x6f, 0x74, 0xd9,
	0xf3, 0x04, 0x7f, 0x9e, 0xf2, 0x8d, 0x2e, 0x7d, 0x78, 0x07, 0xa0, 0xe3, 0xf4, 0xfb, 0x96, 0xaf,
	0x7b, 0x67, 0x06, 0x4b, 0xca, 0xa4, 0x43, 0x63, 0xb0, 0xd6, 0x99, 0xb1, 0x07, 0x90, 0x76, 0xf1,
	0x85, 0x45, 0x62, 0xa8, 0xa2, 0xc3, 0xea, 0xb8, 0x5f, 0xdc, 0x80, 0x24, 0x7f, 0xcf, 0xc3, 0xe3,
	0x36, 0x1b, 0x11, 0xb8, 0x73, 0x42, 0xc4, 0x17, 0x9f, 0x70, 0xb0, 0x11, 0xd9, 0xb2, 0x5d, 0x6c,
	0x87, 0x5f, 0x62, 0xc7, 0xb5, 0x10, 0x44, 0xf9, 0xcf, 0x15, 0xd8, 0x98, 0x8a, 0xe5, 0x44, 0x3f,
	0x9d, 0x0b, 0xcf, 0xd3, 0xbd, 0x8e, 0xc3, 0x93, 0x65, 0x4c, 0xcb, 0x10, 0x48, 0x8b, 0x00, 0x50,
	0x0d, 0xd2, 0x1e, 0xbe, 0xc0, 0xb4, 0x6d, 0x64, 0xe1, 0xe5, 0xed, 0x45, 0xb3, 0x44, 0x8b, 0xd3,
	0x69, 0x01, 0x07, 0xd2, 0x60, 0x8b, 0x62, 0x28, 0x41, 0x1d, 0xaa, 0xb0, 0x28, 0x33, 0x16, 0xc8,
	0x35, 0x41, 0x9e, 0xff, 0xa5, 0x04, 0x29, 0x91, 0x42, 0x37, 0x61, 0x19, 0x0f, 0x9c, 0xce, 0x19,
	0xd5, 0xd3, 0xb2, 0xc6, 0x06, 0x41, 0xc8, 0x8f, 0x8d, 0xbf, 0xe0, 0x16, 0xfa, 0x16, 0x9d, 0x84,
	0x18, 0xa3, 0x06, 0xef, 0x24, 0x96, 0xe7, 0x9d, 0x69, 0xcf, 0xcc, 0x85, 0xe2, 0xff, 0xa8, 0xcb,
	0x50, 0xde, 0x81, 0x6c, 0x08, 0x88, 0x00, 0x92, 0xf5, 0x86, 0x76, 0x54, 0xac, 0xc9, 0x4b, 0x28,
	0x0b, 0xa9, 0x23, 0xb5, 0xae, 0x1e, 0x1d, 0x1f, 0xc9, 0x12, 0x1d, 0x14, 0x9f, 0xd0, 0x41, 0x2c,
	0xff, 0x8b, 0x38, 0x24, 0xd9, 0x5a, 0x67, 0x27, 0xee, 0xdc, 0xe8, 0x98, 0x82, 0x9d, 0xeb, 0x07,
	0xc7, 0x0e, 0x06, 0x6c, 0xf6, 0x2d, 0x5b, 0x37, 0x4e, 0x4f, 0x71, 0x87, 0xf4, 0xe4, 0x22, 0xbf,
	0x27, 0xbf, 0x5e, 0x7e, 0x47, 0x7d, 0xcb, 0x2e, 0x72, 0x5e, 0x42, 0xd9, 0x64, 0x0a, 0xe3, 0xd9,
	0xf4, 0x14, 0xa9, 0xaf, 0x3b, 0x85, 0xf1, 0x6c, 0x72, 0x8a, 0xbb, 0xb0, 0x2a, 0x3c, 0x26, 0xb4,
	0xb1, 0xb4, 0x15, 0x01, 0xa4, 0x7b, 0x6b, 0xa2, 0x0a, 0xca, 0x4c, 0x55, 0x41, 0xc8, 0x84, 0xb5,
	0x53, 0xeb, 0x19, 0x36, 0xf5, 0x20, 0xcb, 0x2f, 0xcf, 0x2b, 0xc0, 0xaf, 0x68, 0xef, 0x82, 0xac,
	0xbf, 0x4a, 0x99, 0x06, 0xe5, 0xd5, 0xb7, 0x61, 0x85, 0x6b, 0x9f, 0xe5, 0x60, 0x60, 0x82, 0x70,
	0x18, 0xe1, 0x93, 0xff, 0x1f, 0x09, 0x36, 0xa3, 0x5a, 0x45, 0xe2, 0xa2, 0x41, 0xde, 0xce, 0xf0,
	0xb3, 0xc4, 0xf0, 0x86, 0x4b, 0xbc, 0xf0, 0x86, 0x1b, 0xdf, 0xdd, 0xcb, 0x93, 0xbb, 0xfb, 0x29,
	0xac, 0x0a, 0xe1, 0x2d, 0xcf, 0x1b, 0x62, 0xfe, 0x96, 0xfd, 0xdd, 0x45, 0x67, 0xe4, 0x95, 0x91,
	0x4a, 0x68, 0x35, 0xa1, 0x07, 0x3a, 0xca, 0x7f, 0x15, 0x83, 0x95, 0xf0, 0x63, 0xf4, 0x3d, 0xd8,
	0x08, 0x9c, 0x26, 0xb0, 0x88, 0xf4, 0xeb, 0xb0, 0x88, 0x2c, 0xf8, 0x06, 0x46, 0x99, 0x36, 0x7d,
	0xec, 0x1b, 0x30, 0xfd, 0x94, 0x9f, 0xc6, 0xa7, 0xfd, 0x34, 0xff, 0x17, 0x12, 0x5c, 0x8f, 0xe4,
	0xb6, 0xd0, 0xfe, 0x8e, 0x8d, 0xef, 0xef, 0x50, 0xc9, 0x9e, 0x78, 0xb1, 0x92, 0x5d, 0xf9, 0x7d,
	0x48, 0x0b, 0x7f, 0x41, 0x39, 0xd8, 0x6c, 0x55, 0x1e, 0x57, 0x34, 0xb5, 0xfd, 0x74, 0xa2, 0x72,
	0x13, 0x81, 0xaa, 0x58, 0x63, 0xe5, 0x6a, 0xad, 0xf1, 0x29, 0x7b, 0xe1, 0x76, 0x54, 0x29, 0xab,
	0xc7, 0x47, 0x72, 0x1c, 0xa5, 0x21, 0x51, 0x55, 0x0f, 0xaa, 0x72, 0x02, 0xad, 0x40, 0xba, 0xa4,
	0xa9, 0x6d, 0xb5, 0x54, 0xac, 0xc9, 0xcb, 0xca, 0xaf, 0x62, 0xb0, 0x3a, 0x56, 0x17, 0xa0, 0x23,
	0x80, 0x4e, 0xcf, 0x19, 0x9a, 0x3a, 0xc9, 0xaf, 0xdc, 0xf2, 0x33, 0xca, 0x9c, 0x12, 0xc1, 0x1b,
	0x25, 0x71, 0xce, 0x81, 0xe6, 0x4e, 0xf1, 0x04, 0x95, 0x20, 0xd9, 0xc5, 0xae, 0x6b, 0x89, 0x57,
	0x3c, 0x6f, 0x44, 0xb3, 0x3a, 0xa0, 0x38, 0x93, 0x7c, 0x38, 0x29, 0x7a, 0x04, 0xf1, 0xae, 0xe5,
	0xf3, 0x56, 0xee, 0xb5, 0x19, 0x1c, 0xa6, 0xc9, 0x09, 0x11, 0x3a, 0x80, 0x24, 0x3d, 0xa0, 0x13,
	0xb9, 0x6c, 0x67, 0x81, 0xe2, 0xa8, 0x50, 0xa3, 0x14, 0xac, 0x6a, 0xe3, 0xe4, 0xf9, 0x0f, 0x21,
	0x1b, 0x02, 0x3f, 0xcf, 0xd7, 0x0b, 0xa4, 0x69, 0xe6, 0x25, 0x9a, 0xf2, 0x57, 0x12, 0xac, 0x14,
	0x7b, 0x96, 0xe1, 0x09, 0x7d, 0x7f, 0xc4, 0x13, 0x1a, 0x7b, 0x9d, 0x31, 0xe3, 0x44, 0x3c, 0x4c,
	0x11, 0x3e, 0x22, 0x8b, 0xc8, 0x9e, 0xca, 0x27, 0x73, 0xcf, 0x21, 0x33, 0xb0, 0xbc, 0xaf, 0x3e,
	0xa1, 0xdf, 0x19, 0x10, 0xaf, 0x69, 0x3c, 0xa6, 0x67, 0x87, 0x31, 0x02, 0x6f, 0xb4, 0xab, 0x15,
	0x4d, 0x4e, 0x28, 0xff, 0x2c, 0xc1, 0x8d, 0x68, 0xd3, 0xa2, 0xf7, 0x20, 0x45, 0xeb, 0x30, 0x5e,
	0xa3, 0xcd, 0xfc, 0x5c, 0x85, 0x50, 0xaa, 0xa6, 0x96, 0x74, 0xe9, 0x7f, 0x52, 0xa1, 0x89, 0x04,
	0x1e, 0xee, 0x53, 0x40, 0x00, 0x55, 0x13, 0xa9, 0xb0, 0x6a, 0x90, 0x45, 0x8a, 0x5a, 0x96, 0x1b,
	0x5b, 0xb9, 0x5a, 0x1f, 0xd5, 0x25, 0x6d, 0xc5, 0x08, 0x8d, 0xc7, 0xca, 0xb5, 0x5f, 0x48, 0x70,
	0x2d, 0xc2, 0xb7, 0xd0, 0x4b, 0x90, 0x3e, 0x73, 0x3c, 0x3f, 0xb4, 0xad, 0x53, 0x64, 0x4c, 0xf6,
	0xf5, 0xab, 0xb0, 0xc6, 0xdc, 0x4e, 0xe7, 0xf5, 0xa7, 0xf8, 0x96, 0x93, 0x41, 0xc5, 0x37, 0x84,
	0x13, 0x6b, 0x8a, 0x2f, 0xb2, 0xa6, 0xc4, 0xaf, 0x65, 0x4d, 0x15, 0x90, 0x27, 0x9d, 0x3d, 0xe2,
	0x94, 0xfa, 0x4e, 0x84, 0xce, 0xc3, 0xd2, 0x29, 0xdf, 0x87, 0x24, 0x33, 0x13, 0x3a, 0x82, 0x75,
	0x51, 0x7c, 0x8f, 0x5b, 0x77, 0x46, 0x23, 0xc1, 0x55, 0xc0, 0xa8, 0x49, 0x2f, 0x37, 0x08, 0x03,
	0x10, 0x82, 0xf8, 0x30, 0x64, 0x65, 0x32, 0xd8, 0x4b, 0x40, 0xcc, 0x32, 0x95, 0x43, 0x58, 0x1d,
	0xa3, 0x7d, 0x91, 0xb2, 0x5f, 0x69, 0xc0, 0x26, 0xfb, 0xc2, 0x34, 0x60, 0xc9, 0xbe, 0x2f, 0x7d,
	0x08, 0x29, 0x61, 0xb8, 0xe0, 0x4d, 0xe5, 0xbc, 0x55, 0x08, 0x6c, 0xe5, 0x1e, 0x6c, 0x1c, 0x60,
	0x7f, 0x82, 0x5b, 0xd4, 0xa7, 0xa2, 0x16, 0x5c, 0xab, 0x59, 0x9e, 0xc0, 0x0c, 0x7f, 0x89, 0xcf,
	0x3f, 0xda, 0x96, 0x66, 0x7f, 0xb4, 0x1d, 0x9b, 0xfb, 0xd1, 0x76, 0x7c, 0xf2, 0xa3, 0xed, 0x4b,
	0xd8, 0x1c, 0x9f, 0x8a, 0x7f, 0x2f, 0xfc, 0x21, 0xa4, 0xb9, 0xd8, 0xe2, 0x93, 0xe5, 0x2b, 0x56,
	0x19, 0xa0, 0x2f, 0xfc, 0xb1, 0xf2, 0x36, 0x6c, 0xb2, 0x8f, 0xfd, 0xaf, 0xd6, 0xc8, 0xee, 0xdf,
	0xca, 0x90, 0x3a, 0x60, 0xd3, 0xa3, 0x1f, 0x4b, 0xb0, 0x3a, 0x76, 0xab, 0x01, 0x6d, 0xcf, 0x8a,
	0xf9, 0xd3, 0xd7, 0x64, 0xf2, 0x57, 0x7e, 0x79, 0xad, 0x3c, 0xf8, 0xe1, 0xbf, 0xfc, 0xdb, 0x4f,
	0x62, 0x6f, 0xa2, 0x37, 0x76, 0x82, 0xeb, 0x46, 0x3f, 0x20, 0x42, 0x7c, 0x2c, 0x56, 0xb8, 0xb3,
	0xbd, 0x13, 0xfa, 0x38, 0x7b, 0x67, 0xfb, 0x0b, 0xf4, 0xd7, 0x12, 0xac, 0x4f, 0x7c, 0xff, 0x8d,
	0x66, 0xe4, 0xb4, 0xe8, 0xeb, 0x38, 0xf9, 0xfb, 0x0b, 0x62, 0x33, 0xf3, 0x44, 0xca, 0xc8, 0x3e,
	0x73, 0x0e, 0x49, 0xf9, 0x45, 0x58, 0x4c, 0xf4, 0xa7, 0x12, 0xc8, 0x93, 0xb7, 0x70, 0xd0, 0xac,
	0x8f, 0x15, 0xa2, 0x6f, 0xeb, 0xe4, 0x6f, 0x4c, 0x9d, 0xf5, 0x56, 0xfa, 0x03, 0xff, 0x52, 0x88,
	0xb3, 0xfd, 0x1c, 0x2a, 0xfb, 0x1b, 0x09, 0xe4, 0xc9, 0x5b, 0x3e, 0xb3, 0xc4, 0x99, 0x71, 0x1b,
	0x68, 0x01, 0x5b, 0x7e, 0x4c, 0x05, 0x7b, 0xa8, 0x2c, 0xae, 0xa7, 0x47, 0xe1, 0x2b, 0x3a, 0x44,
	0xc8, 0xc9, 0x4b, 0x41, 0xb3, 0x84, 0x9c, 0x71, 0x79, 0x68, 0x71, 0x21, 0x77, 0x17, 0xd7, 0xde,
	0x98, 0x90, 0x7f, 0x29, 0xd1, 0xb8, 0x32, 0x7e, 0xcb, 0x07, 0x15, 0x16, 0xd8, 0x13, 0xa1, 0x5b,
	0x2c, 0xf9, 0x39, 0xb7, 0x21, 0x94, 0x87, 0x54, 0xc0, 0x07, 0x68, 0x67, 0x61, 0x01, 0x77, 0xd8,
	0xfd, 0x89, 0x9f, 0x48, 0xb0, 0x3e, 0xf1, 0x95, 0xfe, 0xac, 0x7d, 0x11, 0xfd, 0x31, 0x7f, 0x7e,
	0xfe, 0x57, 0x20, 0xca, 0x3b, 0x54, 0xb2, 0xfb, 0xca, 0xeb, 0x57, 0xd8, 0x37, 0xb8, 0xa3, 0xf0,
	0x48, 0xda, 0xa6, 0x52, 0x4d, 0xdc, 0x53, 0x98, 0x25, 0x55, 0xf4, 0x75, 0x86, 0x05, 0xa5, 0xda,
	0x7d, 0x7d, 0x9e, 0xbe, 0x02, 0x91, 0x88, 0x3d, 0xa5, 0x6d, 0xf4, 0x0c, 0x52, 0xfc, 0x46, 0x17,
	0x7a, 0x65, 0xa6, 0xed, 0x16, 0xb5, 0xd8, 0x9b, 0x54, 0x82, 0x57, 0xd1, 0xdd, 0x39, 0x12, 0x50,
	0x13, 0x91, 0xad, 0xf8, 0x23, 0x09, 0x32, 0xc1, 0x6d, 0x19, 0xf4, 0xda, 0xec, 0x48, 0x14, 0xbe,
	0x17, 0x96, 0xbf, 0x77, 0x25, 0x1e, 0x8f, 0x55, 0x51, 0xb2, 0x44, 0xd8, 0x88, 0x79, 0xcc, 0xe7,
	0x00, 0xa3, 0x1b, 0x60, 0xe8, 0xde, 0xbc, 0xf0, 0x14, 0xd6, 0xc5, 0xac, 0xc0, 0xc4, 0xe7, 0xde,
	0x5e, 0x48, 0x0f, 0x5f, 0x4a, 0x00, 0xa3, 0x5b, 0x65, 0xb3, 0x26, 0x9f, 0xba, 0x77, 0x36, 0xd7,
	0x10, 0x3c, 0x32, 0x2a, 0x8b, 0x2c, 0xfe, 0x11, 0xbb, 0x0b, 0x46, 0xc4, 0x18, 0xdd, 0x32, 0x9b,
	0x25, 0xc6, 0xd4, 0x3d, 0xb4, 0x45, 0xc4, 0xd8, 0x5d, 0x44, 0x0f, 0x5c, 0x8c, 0xbf, 0x97, 0x58,
	0x15, 0x32, 0x71, 0x9d, 0x0b, 0xbd, 0x3d, 0xdf, 0xee, 0x11, 0xb9, 0xed, 0xc1, 0x73, 0x50, 0x70,
	0x9f, 0x59, 0x24, 0xe2, 0x08, 0x79, 0xc3, 0xa1, 0x67, 0xf7, 0xcb, 0x04, 0xac, 0xf3, 0x42, 0x41,
	0xd4, 0x34, 0xe8, 0x19, 0xac, 0x8e, 0x15, 0x72, 0xb3, 0xea, 0x85, 0xa8, 0x6a, 0x6f, 0xa6, 0x67,
	0xdd, 0xa5, 0x12, 0xde, 0x56, 0xd0, 0x4e, 0xf8, 0x52, 0x32, 0x9d, 0xf0, 0x91, 0xa8, 0xf8, 0xd0,
	0x25, 0xc0, 0xa8, 0xe2, 0x9b, 0x65, 0xc9, 0xa9, 0x9a, 0x30, 0x3f, 0xbf, 0xd4, 0x12, 0x53, 0xa3,
	0x5b, 0xb3, 0x95, 0xf3, 0x05, 0xfa, 0x63, 0x09, 0x56, 0xc2, 0x95, 0x1d, 0x7a, 0x63, 0xb6, 0x15,
	0x26, 0x0a, 0xcd, 0xfc, 0xf6, 0x22, 0xa8, 0xdc, 0x52, 0x79, 0x2a, 0xcc, 0x26, 0x8a, 0xd0, 0x03,
	0x51, 0xfc, 0x58, 0x85, 0x37, 0x4b, 0xf1, 0x51, 0x65, 0xe0, 0x55, 0x8a, 0xdf, 0x9e, 0xb7, 0xfa,
	0xbd, 0xf6, 0x9f, 0x15, 0xab, 0x68, 0x1f, 0x1e, 0x15, 0xed, 0xad, 0x62, 0x53, 0xdd, 0xf2, 0x9d,
	0x2d, 0xcb, 0xf6, 0xb0, 0xeb, 0x6f, 0x19, 0xb6, 0xb9, 0xe5, 0x62, 0xdf, 0xb5, 0xf0, 0x05, 0xde,
	0xea, 0xf3, 0x5b, 0x58, 0x5b, 0x8e, 0xbd, 0x45, 0x4f, 0x14, 0xb6, 0x82, 0x8b, 0x26, 0x85, 0xdd,
	0xb4, 0x60, 0xff, 0x3b, 0x29, 0x2e, 0xf4, 0x49, 0x92, 0x8a, 0xf2, 0xce, 0xff, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0xd3, 0x04, 0xff, 0x88, 0x3e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrafeasClient is the client API for Grafeas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrafeasClient interface {
	// Returns the requested `Occurrence`.
	GetOccurrence(ctx context.Context, in *GetOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	// Lists active `Occurrences` for a given project matching the filters.
	ListOccurrences(ctx context.Context, in *ListOccurrencesRequest, opts ...grpc.CallOption) (*ListOccurrencesResponse, error)
	// Deletes the given `Occurrence` from the system. Use this when
	// an `Occurrence` is no longer applicable for the given resource.
	DeleteOccurrence(ctx context.Context, in *DeleteOccurrenceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new `Occurrence`. Use this method to create `Occurrences`
	// for a resource.
	CreateOccurrence(ctx context.Context, in *CreateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	// Updates an existing occurrence.
	UpdateOccurrence(ctx context.Context, in *UpdateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	// Gets the `Note` attached to the given `Occurrence`.
	GetOccurrenceNote(ctx context.Context, in *GetOccurrenceNoteRequest, opts ...grpc.CallOption) (*Note, error)
	// Creates a new `Operation`.
	CreateOperation(ctx context.Context, in *CreateOperationRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Updates an existing operation returns an error if operation
	//  does not exist. The only valid operations are to update mark the done bit
	// change the result.
	UpdateOperation(ctx context.Context, in *UpdateOperationRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Returns the requested `Note`.
	GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error)
	// Lists all `Notes` for a given project.
	ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error)
	// Deletes the given `Note` from the system.
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new `Note`.
	CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*Note, error)
	// Updates an existing `Note`.
	UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*Note, error)
	// Lists `Occurrences` referencing the specified `Note`. Use this method to
	// get all occurrences referencing your `Note` across all your customer
	// projects.
	ListNoteOccurrences(ctx context.Context, in *ListNoteOccurrencesRequest, opts ...grpc.CallOption) (*ListNoteOccurrencesResponse, error)
}

type grafeasClient struct {
	cc *grpc.ClientConn
}

func NewGrafeasClient(cc *grpc.ClientConn) GrafeasClient {
	return &grafeasClient{cc}
}

func (c *grafeasClient) GetOccurrence(ctx context.Context, in *GetOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/GetOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) ListOccurrences(ctx context.Context, in *ListOccurrencesRequest, opts ...grpc.CallOption) (*ListOccurrencesResponse, error) {
	out := new(ListOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/ListOccurrences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) DeleteOccurrence(ctx context.Context, in *DeleteOccurrenceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/DeleteOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) CreateOccurrence(ctx context.Context, in *CreateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/CreateOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) UpdateOccurrence(ctx context.Context, in *UpdateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/UpdateOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) GetOccurrenceNote(ctx context.Context, in *GetOccurrenceNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/GetOccurrenceNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) CreateOperation(ctx context.Context, in *CreateOperationRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/CreateOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) UpdateOperation(ctx context.Context, in *UpdateOperationRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/UpdateOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/GetNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error) {
	out := new(ListNotesResponse)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/ListNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/CreateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/UpdateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasClient) ListNoteOccurrences(ctx context.Context, in *ListNoteOccurrencesRequest, opts ...grpc.CallOption) (*ListNoteOccurrencesResponse, error) {
	out := new(ListNoteOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.Grafeas/ListNoteOccurrences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrafeasServer is the server API for Grafeas service.
type GrafeasServer interface {
	// Returns the requested `Occurrence`.
	GetOccurrence(context.Context, *GetOccurrenceRequest) (*Occurrence, error)
	// Lists active `Occurrences` for a given project matching the filters.
	ListOccurrences(context.Context, *ListOccurrencesRequest) (*ListOccurrencesResponse, error)
	// Deletes the given `Occurrence` from the system. Use this when
	// an `Occurrence` is no longer applicable for the given resource.
	DeleteOccurrence(context.Context, *DeleteOccurrenceRequest) (*empty.Empty, error)
	// Creates a new `Occurrence`. Use this method to create `Occurrences`
	// for a resource.
	CreateOccurrence(context.Context, *CreateOccurrenceRequest) (*Occurrence, error)
	// Updates an existing occurrence.
	UpdateOccurrence(context.Context, *UpdateOccurrenceRequest) (*Occurrence, error)
	// Gets the `Note` attached to the given `Occurrence`.
	GetOccurrenceNote(context.Context, *GetOccurrenceNoteRequest) (*Note, error)
	// Creates a new `Operation`.
	CreateOperation(context.Context, *CreateOperationRequest) (*longrunning.Operation, error)
	// Updates an existing operation returns an error if operation
	//  does not exist. The only valid operations are to update mark the done bit
	// change the result.
	UpdateOperation(context.Context, *UpdateOperationRequest) (*longrunning.Operation, error)
	// Returns the requested `Note`.
	GetNote(context.Context, *GetNoteRequest) (*Note, error)
	// Lists all `Notes` for a given project.
	ListNotes(context.Context, *ListNotesRequest) (*ListNotesResponse, error)
	// Deletes the given `Note` from the system.
	DeleteNote(context.Context, *DeleteNoteRequest) (*empty.Empty, error)
	// Creates a new `Note`.
	CreateNote(context.Context, *CreateNoteRequest) (*Note, error)
	// Updates an existing `Note`.
	UpdateNote(context.Context, *UpdateNoteRequest) (*Note, error)
	// Lists `Occurrences` referencing the specified `Note`. Use this method to
	// get all occurrences referencing your `Note` across all your customer
	// projects.
	ListNoteOccurrences(context.Context, *ListNoteOccurrencesRequest) (*ListNoteOccurrencesResponse, error)
}

// UnimplementedGrafeasServer can be embedded to have forward compatible implementations.
type UnimplementedGrafeasServer struct {
}

func (*UnimplementedGrafeasServer) GetOccurrence(ctx context.Context, req *GetOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOccurrence not implemented")
}
func (*UnimplementedGrafeasServer) ListOccurrences(ctx context.Context, req *ListOccurrencesRequest) (*ListOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOccurrences not implemented")
}
func (*UnimplementedGrafeasServer) DeleteOccurrence(ctx context.Context, req *DeleteOccurrenceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOccurrence not implemented")
}
func (*UnimplementedGrafeasServer) CreateOccurrence(ctx context.Context, req *CreateOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOccurrence not implemented")
}
func (*UnimplementedGrafeasServer) UpdateOccurrence(ctx context.Context, req *UpdateOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOccurrence not implemented")
}
func (*UnimplementedGrafeasServer) GetOccurrenceNote(ctx context.Context, req *GetOccurrenceNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOccurrenceNote not implemented")
}
func (*UnimplementedGrafeasServer) CreateOperation(ctx context.Context, req *CreateOperationRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperation not implemented")
}
func (*UnimplementedGrafeasServer) UpdateOperation(ctx context.Context, req *UpdateOperationRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperation not implemented")
}
func (*UnimplementedGrafeasServer) GetNote(ctx context.Context, req *GetNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (*UnimplementedGrafeasServer) ListNotes(ctx context.Context, req *ListNotesRequest) (*ListNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotes not implemented")
}
func (*UnimplementedGrafeasServer) DeleteNote(ctx context.Context, req *DeleteNoteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (*UnimplementedGrafeasServer) CreateNote(ctx context.Context, req *CreateNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (*UnimplementedGrafeasServer) UpdateNote(ctx context.Context, req *UpdateNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (*UnimplementedGrafeasServer) ListNoteOccurrences(ctx context.Context, req *ListNoteOccurrencesRequest) (*ListNoteOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNoteOccurrences not implemented")
}

func RegisterGrafeasServer(s *grpc.Server, srv GrafeasServer) {
	s.RegisterService(&_Grafeas_serviceDesc, srv)
}

func _Grafeas_GetOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).GetOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/GetOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).GetOccurrence(ctx, req.(*GetOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_ListOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOccurrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).ListOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/ListOccurrences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).ListOccurrences(ctx, req.(*ListOccurrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_DeleteOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).DeleteOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/DeleteOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).DeleteOccurrence(ctx, req.(*DeleteOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_CreateOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).CreateOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/CreateOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).CreateOccurrence(ctx, req.(*CreateOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_UpdateOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).UpdateOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/UpdateOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).UpdateOccurrence(ctx, req.(*UpdateOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_GetOccurrenceNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOccurrenceNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).GetOccurrenceNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/GetOccurrenceNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).GetOccurrenceNote(ctx, req.(*GetOccurrenceNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_CreateOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).CreateOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/CreateOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).CreateOperation(ctx, req.(*CreateOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_UpdateOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).UpdateOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/UpdateOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).UpdateOperation(ctx, req.(*UpdateOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/GetNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).GetNote(ctx, req.(*GetNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_ListNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).ListNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/ListNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).ListNotes(ctx, req.(*ListNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/CreateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).CreateNote(ctx, req.(*CreateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).UpdateNote(ctx, req.(*UpdateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grafeas_ListNoteOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoteOccurrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasServer).ListNoteOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.Grafeas/ListNoteOccurrences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasServer).ListNoteOccurrences(ctx, req.(*ListNoteOccurrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grafeas_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grafeas.v1alpha1.api.Grafeas",
	HandlerType: (*GrafeasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOccurrence",
			Handler:    _Grafeas_GetOccurrence_Handler,
		},
		{
			MethodName: "ListOccurrences",
			Handler:    _Grafeas_ListOccurrences_Handler,
		},
		{
			MethodName: "DeleteOccurrence",
			Handler:    _Grafeas_DeleteOccurrence_Handler,
		},
		{
			MethodName: "CreateOccurrence",
			Handler:    _Grafeas_CreateOccurrence_Handler,
		},
		{
			MethodName: "UpdateOccurrence",
			Handler:    _Grafeas_UpdateOccurrence_Handler,
		},
		{
			MethodName: "GetOccurrenceNote",
			Handler:    _Grafeas_GetOccurrenceNote_Handler,
		},
		{
			MethodName: "CreateOperation",
			Handler:    _Grafeas_CreateOperation_Handler,
		},
		{
			MethodName: "UpdateOperation",
			Handler:    _Grafeas_UpdateOperation_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _Grafeas_GetNote_Handler,
		},
		{
			MethodName: "ListNotes",
			Handler:    _Grafeas_ListNotes_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _Grafeas_DeleteNote_Handler,
		},
		{
			MethodName: "CreateNote",
			Handler:    _Grafeas_CreateNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _Grafeas_UpdateNote_Handler,
		},
		{
			MethodName: "ListNoteOccurrences",
			Handler:    _Grafeas_ListNoteOccurrences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1alpha1/proto/grafeas.proto",
}

// GrafeasProjectsClient is the client API for GrafeasProjects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrafeasProjectsClient interface {
	// Creates a new project.
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Gets the specified project.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// Lists projects.
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Deletes the specified project.
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type grafeasProjectsClient struct {
	cc *grpc.ClientConn
}

func NewGrafeasProjectsClient(cc *grpc.ClientConn) GrafeasProjectsClient {
	return &grafeasProjectsClient{cc}
}

func (c *grafeasProjectsClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.GrafeasProjects/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasProjectsClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.GrafeasProjects/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasProjectsClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.GrafeasProjects/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasProjectsClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grafeas.v1alpha1.api.GrafeasProjects/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrafeasProjectsServer is the server API for GrafeasProjects service.
type GrafeasProjectsServer interface {
	// Creates a new project.
	CreateProject(context.Context, *CreateProjectRequest) (*empty.Empty, error)
	// Gets the specified project.
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	// Lists projects.
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Deletes the specified project.
	DeleteProject(context.Context, *DeleteProjectRequest) (*empty.Empty, error)
}

// UnimplementedGrafeasProjectsServer can be embedded to have forward compatible implementations.
type UnimplementedGrafeasProjectsServer struct {
}

func (*UnimplementedGrafeasProjectsServer) CreateProject(ctx context.Context, req *CreateProjectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedGrafeasProjectsServer) GetProject(ctx context.Context, req *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedGrafeasProjectsServer) ListProjects(ctx context.Context, req *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedGrafeasProjectsServer) DeleteProject(ctx context.Context, req *DeleteProjectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}

func RegisterGrafeasProjectsServer(s *grpc.Server, srv GrafeasProjectsServer) {
	s.RegisterService(&_GrafeasProjects_serviceDesc, srv)
}

func _GrafeasProjects_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasProjectsServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.GrafeasProjects/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasProjectsServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasProjects_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasProjectsServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.GrafeasProjects/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasProjectsServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasProjects_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasProjectsServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.GrafeasProjects/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasProjectsServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasProjects_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasProjectsServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1alpha1.api.GrafeasProjects/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasProjectsServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrafeasProjects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grafeas.v1alpha1.api.GrafeasProjects",
	HandlerType: (*GrafeasProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _GrafeasProjects_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _GrafeasProjects_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _GrafeasProjects_ListProjects_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _GrafeasProjects_DeleteProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1alpha1/proto/grafeas.proto",
}
