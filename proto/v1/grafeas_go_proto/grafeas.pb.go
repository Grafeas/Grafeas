// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/v1/grafeas.proto

package grafeas_go_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	attestation_go_proto "github.com/grafeas/grafeas/proto/v1/attestation_go_proto"
	build_go_proto "github.com/grafeas/grafeas/proto/v1/build_go_proto"
	common_go_proto "github.com/grafeas/grafeas/proto/v1/common_go_proto"
	deployment_go_proto "github.com/grafeas/grafeas/proto/v1/deployment_go_proto"
	discovery_go_proto "github.com/grafeas/grafeas/proto/v1/discovery_go_proto"
	image_go_proto "github.com/grafeas/grafeas/proto/v1/image_go_proto"
	package_go_proto "github.com/grafeas/grafeas/proto/v1/package_go_proto"
	provenance_go_proto "github.com/grafeas/grafeas/proto/v1/provenance_go_proto"
	vulnerability_go_proto "github.com/grafeas/grafeas/proto/v1/vulnerability_go_proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An instance of an analysis type that has been found on a resource.
type Occurrence struct {
	// Output only. The name of the occurrence in the form of
	// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Immutable. The resource for which the occurrence applies.
	Resource *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// Required. Immutable. The analysis note associated with this occurrence, in
	// the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be
	// used as a filter in list requests.
	NoteName string `protobuf:"bytes,3,opt,name=note_name,json=noteName,proto3" json:"note_name,omitempty"`
	// Output only. This explicitly denotes which of the occurrence details are
	// specified. This field can be used as a filter in list requests.
	Kind common_go_proto.NoteKind `protobuf:"varint,4,opt,name=kind,proto3,enum=grafeas.v1.NoteKind" json:"kind,omitempty"`
	// A description of actions that can be taken to remedy the note.
	Remediation string `protobuf:"bytes,5,opt,name=remediation,proto3" json:"remediation,omitempty"`
	// Output only. The time this occurrence was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time this occurrence was last updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Required. Immutable. Describes the details of the note kind found on this
	// resource.
	//
	// Types that are valid to be assigned to Details:
	//	*Occurrence_Vulnerability
	//	*Occurrence_Build
	//	*Occurrence_DerivedImage
	//	*Occurrence_Installation
	//	*Occurrence_Deployment
	//	*Occurrence_Discovered
	//	*Occurrence_Attestation
	Details              isOccurrence_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Occurrence) Reset()         { *m = Occurrence{} }
func (m *Occurrence) String() string { return proto.CompactTextString(m) }
func (*Occurrence) ProtoMessage()    {}
func (*Occurrence) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{0}
}

func (m *Occurrence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Occurrence.Unmarshal(m, b)
}
func (m *Occurrence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Occurrence.Marshal(b, m, deterministic)
}
func (m *Occurrence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Occurrence.Merge(m, src)
}
func (m *Occurrence) XXX_Size() int {
	return xxx_messageInfo_Occurrence.Size(m)
}
func (m *Occurrence) XXX_DiscardUnknown() {
	xxx_messageInfo_Occurrence.DiscardUnknown(m)
}

var xxx_messageInfo_Occurrence proto.InternalMessageInfo

func (m *Occurrence) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Occurrence) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Occurrence) GetNoteName() string {
	if m != nil {
		return m.NoteName
	}
	return ""
}

func (m *Occurrence) GetKind() common_go_proto.NoteKind {
	if m != nil {
		return m.Kind
	}
	return common_go_proto.NoteKind_NOTE_KIND_UNSPECIFIED
}

func (m *Occurrence) GetRemediation() string {
	if m != nil {
		return m.Remediation
	}
	return ""
}

func (m *Occurrence) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Occurrence) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type isOccurrence_Details interface {
	isOccurrence_Details()
}

type Occurrence_Vulnerability struct {
	Vulnerability *vulnerability_go_proto.Details `protobuf:"bytes,8,opt,name=vulnerability,proto3,oneof"`
}

type Occurrence_Build struct {
	Build *build_go_proto.Details `protobuf:"bytes,9,opt,name=build,proto3,oneof"`
}

type Occurrence_DerivedImage struct {
	DerivedImage *image_go_proto.Details `protobuf:"bytes,10,opt,name=derived_image,json=derivedImage,proto3,oneof"`
}

type Occurrence_Installation struct {
	Installation *package_go_proto.Details `protobuf:"bytes,11,opt,name=installation,proto3,oneof"`
}

type Occurrence_Deployment struct {
	Deployment *deployment_go_proto.Details `protobuf:"bytes,12,opt,name=deployment,proto3,oneof"`
}

type Occurrence_Discovered struct {
	Discovered *discovery_go_proto.Details `protobuf:"bytes,13,opt,name=discovered,proto3,oneof"`
}

type Occurrence_Attestation struct {
	Attestation *attestation_go_proto.Details `protobuf:"bytes,14,opt,name=attestation,proto3,oneof"`
}

func (*Occurrence_Vulnerability) isOccurrence_Details() {}

func (*Occurrence_Build) isOccurrence_Details() {}

func (*Occurrence_DerivedImage) isOccurrence_Details() {}

func (*Occurrence_Installation) isOccurrence_Details() {}

func (*Occurrence_Deployment) isOccurrence_Details() {}

func (*Occurrence_Discovered) isOccurrence_Details() {}

func (*Occurrence_Attestation) isOccurrence_Details() {}

func (m *Occurrence) GetDetails() isOccurrence_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Occurrence) GetVulnerability() *vulnerability_go_proto.Details {
	if x, ok := m.GetDetails().(*Occurrence_Vulnerability); ok {
		return x.Vulnerability
	}
	return nil
}

func (m *Occurrence) GetBuild() *build_go_proto.Details {
	if x, ok := m.GetDetails().(*Occurrence_Build); ok {
		return x.Build
	}
	return nil
}

func (m *Occurrence) GetDerivedImage() *image_go_proto.Details {
	if x, ok := m.GetDetails().(*Occurrence_DerivedImage); ok {
		return x.DerivedImage
	}
	return nil
}

func (m *Occurrence) GetInstallation() *package_go_proto.Details {
	if x, ok := m.GetDetails().(*Occurrence_Installation); ok {
		return x.Installation
	}
	return nil
}

func (m *Occurrence) GetDeployment() *deployment_go_proto.Details {
	if x, ok := m.GetDetails().(*Occurrence_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (m *Occurrence) GetDiscovered() *discovery_go_proto.Details {
	if x, ok := m.GetDetails().(*Occurrence_Discovered); ok {
		return x.Discovered
	}
	return nil
}

func (m *Occurrence) GetAttestation() *attestation_go_proto.Details {
	if x, ok := m.GetDetails().(*Occurrence_Attestation); ok {
		return x.Attestation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Occurrence) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Occurrence_Vulnerability)(nil),
		(*Occurrence_Build)(nil),
		(*Occurrence_DerivedImage)(nil),
		(*Occurrence_Installation)(nil),
		(*Occurrence_Deployment)(nil),
		(*Occurrence_Discovered)(nil),
		(*Occurrence_Attestation)(nil),
	}
}

// An entity that can have metadata. For example, a Docker image.
type Resource struct {
	// The name of the resource. For example, the name of a Docker image -
	// "Debian".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The unique URI of the resource. For example,
	// `https://gcr.io/project/image@sha256:foo` for a Docker image.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// The hash of the resource content. For example, the Docker digest.
	ContentHash          *provenance_go_proto.Hash `protobuf:"bytes,3,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{1}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resource) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Resource) GetContentHash() *provenance_go_proto.Hash {
	if m != nil {
		return m.ContentHash
	}
	return nil
}

// A type of analysis that can be done for a resource.
type Note struct {
	// Output only. The name of the note in the form of
	// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A one sentence description of this note.
	ShortDescription string `protobuf:"bytes,2,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	// A detailed description of this note.
	LongDescription string `protobuf:"bytes,3,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	// Output only. The type of analysis. This field can be used as a filter in
	// list requests.
	Kind common_go_proto.NoteKind `protobuf:"varint,4,opt,name=kind,proto3,enum=grafeas.v1.NoteKind" json:"kind,omitempty"`
	// URLs associated with this note.
	RelatedUrl []*common_go_proto.RelatedUrl `protobuf:"bytes,5,rep,name=related_url,json=relatedUrl,proto3" json:"related_url,omitempty"`
	// Time of expiration for this note. Empty if note does not expire.
	ExpirationTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	// Output only. The time this note was created. This field can be used as a
	// filter in list requests.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time this note was last updated. This field can be used as
	// a filter in list requests.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Other notes related to this note.
	RelatedNoteNames []string `protobuf:"bytes,9,rep,name=related_note_names,json=relatedNoteNames,proto3" json:"related_note_names,omitempty"`
	// Required. Immutable. The type of analysis this note represents.
	//
	// Types that are valid to be assigned to Type:
	//	*Note_Vulnerability
	//	*Note_Build
	//	*Note_BaseImage
	//	*Note_Package
	//	*Note_Deployable
	//	*Note_Discovery
	//	*Note_AttestationAuthority
	Type                 isNote_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Note) Reset()         { *m = Note{} }
func (m *Note) String() string { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()    {}
func (*Note) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{2}
}

func (m *Note) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Note.Unmarshal(m, b)
}
func (m *Note) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Note.Marshal(b, m, deterministic)
}
func (m *Note) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Note.Merge(m, src)
}
func (m *Note) XXX_Size() int {
	return xxx_messageInfo_Note.Size(m)
}
func (m *Note) XXX_DiscardUnknown() {
	xxx_messageInfo_Note.DiscardUnknown(m)
}

var xxx_messageInfo_Note proto.InternalMessageInfo

func (m *Note) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Note) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *Note) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func (m *Note) GetKind() common_go_proto.NoteKind {
	if m != nil {
		return m.Kind
	}
	return common_go_proto.NoteKind_NOTE_KIND_UNSPECIFIED
}

func (m *Note) GetRelatedUrl() []*common_go_proto.RelatedUrl {
	if m != nil {
		return m.RelatedUrl
	}
	return nil
}

func (m *Note) GetExpirationTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *Note) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Note) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Note) GetRelatedNoteNames() []string {
	if m != nil {
		return m.RelatedNoteNames
	}
	return nil
}

type isNote_Type interface {
	isNote_Type()
}

type Note_Vulnerability struct {
	Vulnerability *vulnerability_go_proto.Vulnerability `protobuf:"bytes,10,opt,name=vulnerability,proto3,oneof"`
}

type Note_Build struct {
	Build *build_go_proto.Build `protobuf:"bytes,11,opt,name=build,proto3,oneof"`
}

type Note_BaseImage struct {
	BaseImage *image_go_proto.Basis `protobuf:"bytes,12,opt,name=base_image,json=baseImage,proto3,oneof"`
}

type Note_Package struct {
	Package *package_go_proto.Package `protobuf:"bytes,13,opt,name=package,proto3,oneof"`
}

type Note_Deployable struct {
	Deployable *deployment_go_proto.Deployable `protobuf:"bytes,14,opt,name=deployable,proto3,oneof"`
}

type Note_Discovery struct {
	Discovery *discovery_go_proto.Discovery `protobuf:"bytes,15,opt,name=discovery,proto3,oneof"`
}

type Note_AttestationAuthority struct {
	AttestationAuthority *attestation_go_proto.Authority `protobuf:"bytes,16,opt,name=attestation_authority,json=attestationAuthority,proto3,oneof"`
}

func (*Note_Vulnerability) isNote_Type() {}

func (*Note_Build) isNote_Type() {}

func (*Note_BaseImage) isNote_Type() {}

func (*Note_Package) isNote_Type() {}

func (*Note_Deployable) isNote_Type() {}

func (*Note_Discovery) isNote_Type() {}

func (*Note_AttestationAuthority) isNote_Type() {}

func (m *Note) GetType() isNote_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Note) GetVulnerability() *vulnerability_go_proto.Vulnerability {
	if x, ok := m.GetType().(*Note_Vulnerability); ok {
		return x.Vulnerability
	}
	return nil
}

func (m *Note) GetBuild() *build_go_proto.Build {
	if x, ok := m.GetType().(*Note_Build); ok {
		return x.Build
	}
	return nil
}

func (m *Note) GetBaseImage() *image_go_proto.Basis {
	if x, ok := m.GetType().(*Note_BaseImage); ok {
		return x.BaseImage
	}
	return nil
}

func (m *Note) GetPackage() *package_go_proto.Package {
	if x, ok := m.GetType().(*Note_Package); ok {
		return x.Package
	}
	return nil
}

func (m *Note) GetDeployable() *deployment_go_proto.Deployable {
	if x, ok := m.GetType().(*Note_Deployable); ok {
		return x.Deployable
	}
	return nil
}

func (m *Note) GetDiscovery() *discovery_go_proto.Discovery {
	if x, ok := m.GetType().(*Note_Discovery); ok {
		return x.Discovery
	}
	return nil
}

func (m *Note) GetAttestationAuthority() *attestation_go_proto.Authority {
	if x, ok := m.GetType().(*Note_AttestationAuthority); ok {
		return x.AttestationAuthority
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Note) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Note_Vulnerability)(nil),
		(*Note_Build)(nil),
		(*Note_BaseImage)(nil),
		(*Note_Package)(nil),
		(*Note_Deployable)(nil),
		(*Note_Discovery)(nil),
		(*Note_AttestationAuthority)(nil),
	}
}

// Request to get an occurrence.
type GetOccurrenceRequest struct {
	// The name of the occurrence in the form of
	// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOccurrenceRequest) Reset()         { *m = GetOccurrenceRequest{} }
func (m *GetOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*GetOccurrenceRequest) ProtoMessage()    {}
func (*GetOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{3}
}

func (m *GetOccurrenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOccurrenceRequest.Unmarshal(m, b)
}
func (m *GetOccurrenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOccurrenceRequest.Marshal(b, m, deterministic)
}
func (m *GetOccurrenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOccurrenceRequest.Merge(m, src)
}
func (m *GetOccurrenceRequest) XXX_Size() int {
	return xxx_messageInfo_GetOccurrenceRequest.Size(m)
}
func (m *GetOccurrenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOccurrenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOccurrenceRequest proto.InternalMessageInfo

func (m *GetOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to list occurrences.
type ListOccurrencesRequest struct {
	// The name of the project to list occurrences for in the form of
	// `projects/[PROJECT_ID]`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of occurrences to return in the list. Must be positive. Max allowed
	// page size is 1000. If not specified, page size defaults to 20.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOccurrencesRequest) Reset()         { *m = ListOccurrencesRequest{} }
func (m *ListOccurrencesRequest) String() string { return proto.CompactTextString(m) }
func (*ListOccurrencesRequest) ProtoMessage()    {}
func (*ListOccurrencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{4}
}

func (m *ListOccurrencesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOccurrencesRequest.Unmarshal(m, b)
}
func (m *ListOccurrencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOccurrencesRequest.Marshal(b, m, deterministic)
}
func (m *ListOccurrencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOccurrencesRequest.Merge(m, src)
}
func (m *ListOccurrencesRequest) XXX_Size() int {
	return xxx_messageInfo_ListOccurrencesRequest.Size(m)
}
func (m *ListOccurrencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOccurrencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOccurrencesRequest proto.InternalMessageInfo

func (m *ListOccurrencesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListOccurrencesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListOccurrencesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListOccurrencesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response for listing occurrences.
type ListOccurrencesResponse struct {
	// The occurrences requested.
	Occurrences []*Occurrence `protobuf:"bytes,1,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	// The next pagination token in the list response. It should be used as
	// `page_token` for the following request. An empty value means no more
	// results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOccurrencesResponse) Reset()         { *m = ListOccurrencesResponse{} }
func (m *ListOccurrencesResponse) String() string { return proto.CompactTextString(m) }
func (*ListOccurrencesResponse) ProtoMessage()    {}
func (*ListOccurrencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{5}
}

func (m *ListOccurrencesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOccurrencesResponse.Unmarshal(m, b)
}
func (m *ListOccurrencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOccurrencesResponse.Marshal(b, m, deterministic)
}
func (m *ListOccurrencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOccurrencesResponse.Merge(m, src)
}
func (m *ListOccurrencesResponse) XXX_Size() int {
	return xxx_messageInfo_ListOccurrencesResponse.Size(m)
}
func (m *ListOccurrencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOccurrencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOccurrencesResponse proto.InternalMessageInfo

func (m *ListOccurrencesResponse) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

func (m *ListOccurrencesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request to delete a occurrence.
type DeleteOccurrenceRequest struct {
	// The name of the occurrence in the form of
	// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOccurrenceRequest) Reset()         { *m = DeleteOccurrenceRequest{} }
func (m *DeleteOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteOccurrenceRequest) ProtoMessage()    {}
func (*DeleteOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{6}
}

func (m *DeleteOccurrenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteOccurrenceRequest.Unmarshal(m, b)
}
func (m *DeleteOccurrenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteOccurrenceRequest.Marshal(b, m, deterministic)
}
func (m *DeleteOccurrenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOccurrenceRequest.Merge(m, src)
}
func (m *DeleteOccurrenceRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteOccurrenceRequest.Size(m)
}
func (m *DeleteOccurrenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOccurrenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOccurrenceRequest proto.InternalMessageInfo

func (m *DeleteOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to create a new occurrence.
type CreateOccurrenceRequest struct {
	// The name of the project in the form of `projects/[PROJECT_ID]`, under which
	// the occurrence is to be created.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The occurrence to create.
	Occurrence           *Occurrence `protobuf:"bytes,2,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateOccurrenceRequest) Reset()         { *m = CreateOccurrenceRequest{} }
func (m *CreateOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOccurrenceRequest) ProtoMessage()    {}
func (*CreateOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{7}
}

func (m *CreateOccurrenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOccurrenceRequest.Unmarshal(m, b)
}
func (m *CreateOccurrenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOccurrenceRequest.Marshal(b, m, deterministic)
}
func (m *CreateOccurrenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOccurrenceRequest.Merge(m, src)
}
func (m *CreateOccurrenceRequest) XXX_Size() int {
	return xxx_messageInfo_CreateOccurrenceRequest.Size(m)
}
func (m *CreateOccurrenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOccurrenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOccurrenceRequest proto.InternalMessageInfo

func (m *CreateOccurrenceRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateOccurrenceRequest) GetOccurrence() *Occurrence {
	if m != nil {
		return m.Occurrence
	}
	return nil
}

// Request to update an occurrence.
type UpdateOccurrenceRequest struct {
	// The name of the occurrence in the form of
	// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The updated occurrence.
	Occurrence *Occurrence `protobuf:"bytes,2,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// The fields to update.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateOccurrenceRequest) Reset()         { *m = UpdateOccurrenceRequest{} }
func (m *UpdateOccurrenceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOccurrenceRequest) ProtoMessage()    {}
func (*UpdateOccurrenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{8}
}

func (m *UpdateOccurrenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateOccurrenceRequest.Unmarshal(m, b)
}
func (m *UpdateOccurrenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateOccurrenceRequest.Marshal(b, m, deterministic)
}
func (m *UpdateOccurrenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOccurrenceRequest.Merge(m, src)
}
func (m *UpdateOccurrenceRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateOccurrenceRequest.Size(m)
}
func (m *UpdateOccurrenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOccurrenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOccurrenceRequest proto.InternalMessageInfo

func (m *UpdateOccurrenceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOccurrenceRequest) GetOccurrence() *Occurrence {
	if m != nil {
		return m.Occurrence
	}
	return nil
}

func (m *UpdateOccurrenceRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// Request to get a note.
type GetNoteRequest struct {
	// The name of the note in the form of
	// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNoteRequest) Reset()         { *m = GetNoteRequest{} }
func (m *GetNoteRequest) String() string { return proto.CompactTextString(m) }
func (*GetNoteRequest) ProtoMessage()    {}
func (*GetNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{9}
}

func (m *GetNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNoteRequest.Unmarshal(m, b)
}
func (m *GetNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNoteRequest.Marshal(b, m, deterministic)
}
func (m *GetNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNoteRequest.Merge(m, src)
}
func (m *GetNoteRequest) XXX_Size() int {
	return xxx_messageInfo_GetNoteRequest.Size(m)
}
func (m *GetNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNoteRequest proto.InternalMessageInfo

func (m *GetNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to get the note to which the specified occurrence is attached.
type GetOccurrenceNoteRequest struct {
	// The name of the occurrence in the form of
	// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOccurrenceNoteRequest) Reset()         { *m = GetOccurrenceNoteRequest{} }
func (m *GetOccurrenceNoteRequest) String() string { return proto.CompactTextString(m) }
func (*GetOccurrenceNoteRequest) ProtoMessage()    {}
func (*GetOccurrenceNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{10}
}

func (m *GetOccurrenceNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOccurrenceNoteRequest.Unmarshal(m, b)
}
func (m *GetOccurrenceNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOccurrenceNoteRequest.Marshal(b, m, deterministic)
}
func (m *GetOccurrenceNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOccurrenceNoteRequest.Merge(m, src)
}
func (m *GetOccurrenceNoteRequest) XXX_Size() int {
	return xxx_messageInfo_GetOccurrenceNoteRequest.Size(m)
}
func (m *GetOccurrenceNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOccurrenceNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOccurrenceNoteRequest proto.InternalMessageInfo

func (m *GetOccurrenceNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to list notes.
type ListNotesRequest struct {
	// The name of the project to list notes for in the form of
	// `projects/[PROJECT_ID]`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of notes to return in the list. Must be positive. Max allowed page
	// size is 1000. If not specified, page size defaults to 20.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNotesRequest) Reset()         { *m = ListNotesRequest{} }
func (m *ListNotesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNotesRequest) ProtoMessage()    {}
func (*ListNotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{11}
}

func (m *ListNotesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNotesRequest.Unmarshal(m, b)
}
func (m *ListNotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNotesRequest.Marshal(b, m, deterministic)
}
func (m *ListNotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNotesRequest.Merge(m, src)
}
func (m *ListNotesRequest) XXX_Size() int {
	return xxx_messageInfo_ListNotesRequest.Size(m)
}
func (m *ListNotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNotesRequest proto.InternalMessageInfo

func (m *ListNotesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListNotesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListNotesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNotesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response for listing notes.
type ListNotesResponse struct {
	// The notes requested.
	Notes []*Note `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
	// The next pagination token in the list response. It should be used as
	// `page_token` for the following request. An empty value means no more
	// results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNotesResponse) Reset()         { *m = ListNotesResponse{} }
func (m *ListNotesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNotesResponse) ProtoMessage()    {}
func (*ListNotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{12}
}

func (m *ListNotesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNotesResponse.Unmarshal(m, b)
}
func (m *ListNotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNotesResponse.Marshal(b, m, deterministic)
}
func (m *ListNotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNotesResponse.Merge(m, src)
}
func (m *ListNotesResponse) XXX_Size() int {
	return xxx_messageInfo_ListNotesResponse.Size(m)
}
func (m *ListNotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNotesResponse proto.InternalMessageInfo

func (m *ListNotesResponse) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *ListNotesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request to delete a note.
type DeleteNoteRequest struct {
	// The name of the note in the form of
	// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNoteRequest) Reset()         { *m = DeleteNoteRequest{} }
func (m *DeleteNoteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNoteRequest) ProtoMessage()    {}
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{13}
}

func (m *DeleteNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNoteRequest.Unmarshal(m, b)
}
func (m *DeleteNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNoteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNoteRequest.Merge(m, src)
}
func (m *DeleteNoteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteNoteRequest.Size(m)
}
func (m *DeleteNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNoteRequest proto.InternalMessageInfo

func (m *DeleteNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request to create a new note.
type CreateNoteRequest struct {
	// The name of the project in the form of `projects/[PROJECT_ID]`, under which
	// the note is to be created.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The ID to use for this note.
	NoteId string `protobuf:"bytes,2,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// The note to create.
	Note                 *Note    `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNoteRequest) Reset()         { *m = CreateNoteRequest{} }
func (m *CreateNoteRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNoteRequest) ProtoMessage()    {}
func (*CreateNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{14}
}

func (m *CreateNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNoteRequest.Unmarshal(m, b)
}
func (m *CreateNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNoteRequest.Marshal(b, m, deterministic)
}
func (m *CreateNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNoteRequest.Merge(m, src)
}
func (m *CreateNoteRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNoteRequest.Size(m)
}
func (m *CreateNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNoteRequest proto.InternalMessageInfo

func (m *CreateNoteRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateNoteRequest) GetNoteId() string {
	if m != nil {
		return m.NoteId
	}
	return ""
}

func (m *CreateNoteRequest) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

// Request to update a note.
type UpdateNoteRequest struct {
	// The name of the note in the form of
	// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The updated note.
	Note *Note `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	// The fields to update.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateNoteRequest) Reset()         { *m = UpdateNoteRequest{} }
func (m *UpdateNoteRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNoteRequest) ProtoMessage()    {}
func (*UpdateNoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{15}
}

func (m *UpdateNoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNoteRequest.Unmarshal(m, b)
}
func (m *UpdateNoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNoteRequest.Marshal(b, m, deterministic)
}
func (m *UpdateNoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNoteRequest.Merge(m, src)
}
func (m *UpdateNoteRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateNoteRequest.Size(m)
}
func (m *UpdateNoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNoteRequest proto.InternalMessageInfo

func (m *UpdateNoteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateNoteRequest) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

func (m *UpdateNoteRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// Request to list occurrences for a note.
type ListNoteOccurrencesRequest struct {
	// The name of the note to list occurrences for in the form of
	// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The filter expression.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Number of occurrences to return in the list.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	PageToken            string   `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNoteOccurrencesRequest) Reset()         { *m = ListNoteOccurrencesRequest{} }
func (m *ListNoteOccurrencesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNoteOccurrencesRequest) ProtoMessage()    {}
func (*ListNoteOccurrencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{16}
}

func (m *ListNoteOccurrencesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNoteOccurrencesRequest.Unmarshal(m, b)
}
func (m *ListNoteOccurrencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNoteOccurrencesRequest.Marshal(b, m, deterministic)
}
func (m *ListNoteOccurrencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNoteOccurrencesRequest.Merge(m, src)
}
func (m *ListNoteOccurrencesRequest) XXX_Size() int {
	return xxx_messageInfo_ListNoteOccurrencesRequest.Size(m)
}
func (m *ListNoteOccurrencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNoteOccurrencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNoteOccurrencesRequest proto.InternalMessageInfo

func (m *ListNoteOccurrencesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListNoteOccurrencesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListNoteOccurrencesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNoteOccurrencesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response for listing occurrences for a note.
type ListNoteOccurrencesResponse struct {
	// The occurrences attached to the specified note.
	Occurrences []*Occurrence `protobuf:"bytes,1,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	// Token to provide to skip to a particular spot in the list.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNoteOccurrencesResponse) Reset()         { *m = ListNoteOccurrencesResponse{} }
func (m *ListNoteOccurrencesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNoteOccurrencesResponse) ProtoMessage()    {}
func (*ListNoteOccurrencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{17}
}

func (m *ListNoteOccurrencesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNoteOccurrencesResponse.Unmarshal(m, b)
}
func (m *ListNoteOccurrencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNoteOccurrencesResponse.Marshal(b, m, deterministic)
}
func (m *ListNoteOccurrencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNoteOccurrencesResponse.Merge(m, src)
}
func (m *ListNoteOccurrencesResponse) XXX_Size() int {
	return xxx_messageInfo_ListNoteOccurrencesResponse.Size(m)
}
func (m *ListNoteOccurrencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNoteOccurrencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNoteOccurrencesResponse proto.InternalMessageInfo

func (m *ListNoteOccurrencesResponse) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

func (m *ListNoteOccurrencesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request to create notes in batch.
type BatchCreateNotesRequest struct {
	// The name of the project in the form of `projects/[PROJECT_ID]`, under which
	// the notes are to be created.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The notes to create. Max allowed length is 1000.
	Notes                map[string]*Note `protobuf:"bytes,2,rep,name=notes,proto3" json:"notes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BatchCreateNotesRequest) Reset()         { *m = BatchCreateNotesRequest{} }
func (m *BatchCreateNotesRequest) String() string { return proto.CompactTextString(m) }
func (*BatchCreateNotesRequest) ProtoMessage()    {}
func (*BatchCreateNotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{18}
}

func (m *BatchCreateNotesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateNotesRequest.Unmarshal(m, b)
}
func (m *BatchCreateNotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateNotesRequest.Marshal(b, m, deterministic)
}
func (m *BatchCreateNotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateNotesRequest.Merge(m, src)
}
func (m *BatchCreateNotesRequest) XXX_Size() int {
	return xxx_messageInfo_BatchCreateNotesRequest.Size(m)
}
func (m *BatchCreateNotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateNotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateNotesRequest proto.InternalMessageInfo

func (m *BatchCreateNotesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *BatchCreateNotesRequest) GetNotes() map[string]*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

// Response for creating notes in batch.
type BatchCreateNotesResponse struct {
	// The notes that were created.
	Notes                []*Note  `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchCreateNotesResponse) Reset()         { *m = BatchCreateNotesResponse{} }
func (m *BatchCreateNotesResponse) String() string { return proto.CompactTextString(m) }
func (*BatchCreateNotesResponse) ProtoMessage()    {}
func (*BatchCreateNotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{19}
}

func (m *BatchCreateNotesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateNotesResponse.Unmarshal(m, b)
}
func (m *BatchCreateNotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateNotesResponse.Marshal(b, m, deterministic)
}
func (m *BatchCreateNotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateNotesResponse.Merge(m, src)
}
func (m *BatchCreateNotesResponse) XXX_Size() int {
	return xxx_messageInfo_BatchCreateNotesResponse.Size(m)
}
func (m *BatchCreateNotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateNotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateNotesResponse proto.InternalMessageInfo

func (m *BatchCreateNotesResponse) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

// Request to create occurrences in batch.
type BatchCreateOccurrencesRequest struct {
	// The name of the project in the form of `projects/[PROJECT_ID]`, under which
	// the occurrences are to be created.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The occurrences to create. Max allowed length is 1000.
	Occurrences          []*Occurrence `protobuf:"bytes,2,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BatchCreateOccurrencesRequest) Reset()         { *m = BatchCreateOccurrencesRequest{} }
func (m *BatchCreateOccurrencesRequest) String() string { return proto.CompactTextString(m) }
func (*BatchCreateOccurrencesRequest) ProtoMessage()    {}
func (*BatchCreateOccurrencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{20}
}

func (m *BatchCreateOccurrencesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateOccurrencesRequest.Unmarshal(m, b)
}
func (m *BatchCreateOccurrencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateOccurrencesRequest.Marshal(b, m, deterministic)
}
func (m *BatchCreateOccurrencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateOccurrencesRequest.Merge(m, src)
}
func (m *BatchCreateOccurrencesRequest) XXX_Size() int {
	return xxx_messageInfo_BatchCreateOccurrencesRequest.Size(m)
}
func (m *BatchCreateOccurrencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateOccurrencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateOccurrencesRequest proto.InternalMessageInfo

func (m *BatchCreateOccurrencesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *BatchCreateOccurrencesRequest) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

// Response for creating occurrences in batch.
type BatchCreateOccurrencesResponse struct {
	// The occurrences that were created.
	Occurrences          []*Occurrence `protobuf:"bytes,1,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BatchCreateOccurrencesResponse) Reset()         { *m = BatchCreateOccurrencesResponse{} }
func (m *BatchCreateOccurrencesResponse) String() string { return proto.CompactTextString(m) }
func (*BatchCreateOccurrencesResponse) ProtoMessage()    {}
func (*BatchCreateOccurrencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{21}
}

func (m *BatchCreateOccurrencesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchCreateOccurrencesResponse.Unmarshal(m, b)
}
func (m *BatchCreateOccurrencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchCreateOccurrencesResponse.Marshal(b, m, deterministic)
}
func (m *BatchCreateOccurrencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateOccurrencesResponse.Merge(m, src)
}
func (m *BatchCreateOccurrencesResponse) XXX_Size() int {
	return xxx_messageInfo_BatchCreateOccurrencesResponse.Size(m)
}
func (m *BatchCreateOccurrencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateOccurrencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateOccurrencesResponse proto.InternalMessageInfo

func (m *BatchCreateOccurrencesResponse) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

// Request to get a vulnerability summary for some set of occurrences.
type GetVulnerabilityOccurrencesSummaryRequest struct {
	// The name of the project to get a vulnerability summary for in the form of
	// `projects/[PROJECT_ID]`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The filter expression.
	Filter               string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVulnerabilityOccurrencesSummaryRequest) Reset() {
	*m = GetVulnerabilityOccurrencesSummaryRequest{}
}
func (m *GetVulnerabilityOccurrencesSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*GetVulnerabilityOccurrencesSummaryRequest) ProtoMessage()    {}
func (*GetVulnerabilityOccurrencesSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{22}
}

func (m *GetVulnerabilityOccurrencesSummaryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVulnerabilityOccurrencesSummaryRequest.Unmarshal(m, b)
}
func (m *GetVulnerabilityOccurrencesSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVulnerabilityOccurrencesSummaryRequest.Marshal(b, m, deterministic)
}
func (m *GetVulnerabilityOccurrencesSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVulnerabilityOccurrencesSummaryRequest.Merge(m, src)
}
func (m *GetVulnerabilityOccurrencesSummaryRequest) XXX_Size() int {
	return xxx_messageInfo_GetVulnerabilityOccurrencesSummaryRequest.Size(m)
}
func (m *GetVulnerabilityOccurrencesSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVulnerabilityOccurrencesSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVulnerabilityOccurrencesSummaryRequest proto.InternalMessageInfo

func (m *GetVulnerabilityOccurrencesSummaryRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *GetVulnerabilityOccurrencesSummaryRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// A summary of how many vulnerability occurrences there are per resource and
// severity type.
type VulnerabilityOccurrencesSummary struct {
	// A listing by resource of the number of fixable and total vulnerabilities.
	Counts               []*VulnerabilityOccurrencesSummary_FixableTotalByDigest `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                `json:"-"`
	XXX_unrecognized     []byte                                                  `json:"-"`
	XXX_sizecache        int32                                                   `json:"-"`
}

func (m *VulnerabilityOccurrencesSummary) Reset()         { *m = VulnerabilityOccurrencesSummary{} }
func (m *VulnerabilityOccurrencesSummary) String() string { return proto.CompactTextString(m) }
func (*VulnerabilityOccurrencesSummary) ProtoMessage()    {}
func (*VulnerabilityOccurrencesSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{23}
}

func (m *VulnerabilityOccurrencesSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VulnerabilityOccurrencesSummary.Unmarshal(m, b)
}
func (m *VulnerabilityOccurrencesSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VulnerabilityOccurrencesSummary.Marshal(b, m, deterministic)
}
func (m *VulnerabilityOccurrencesSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityOccurrencesSummary.Merge(m, src)
}
func (m *VulnerabilityOccurrencesSummary) XXX_Size() int {
	return xxx_messageInfo_VulnerabilityOccurrencesSummary.Size(m)
}
func (m *VulnerabilityOccurrencesSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityOccurrencesSummary.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityOccurrencesSummary proto.InternalMessageInfo

func (m *VulnerabilityOccurrencesSummary) GetCounts() []*VulnerabilityOccurrencesSummary_FixableTotalByDigest {
	if m != nil {
		return m.Counts
	}
	return nil
}

// Per resource and severity counts of fixable and total vulnerabilities.
type VulnerabilityOccurrencesSummary_FixableTotalByDigest struct {
	// The affected resource.
	Resource *Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// The severity for this count. SEVERITY_UNSPECIFIED indicates total across
	// all severities.
	Severity vulnerability_go_proto.Severity `protobuf:"varint,2,opt,name=severity,proto3,enum=grafeas.v1.vulnerability.Severity" json:"severity,omitempty"`
	// The number of fixable vulnerabilities associated with this resource.
	FixableCount int64 `protobuf:"varint,3,opt,name=fixable_count,json=fixableCount,proto3" json:"fixable_count,omitempty"`
	// The total number of vulnerabilities associated with this resource.
	TotalCount           int64    `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) Reset() {
	*m = VulnerabilityOccurrencesSummary_FixableTotalByDigest{}
}
func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) String() string {
	return proto.CompactTextString(m)
}
func (*VulnerabilityOccurrencesSummary_FixableTotalByDigest) ProtoMessage() {}
func (*VulnerabilityOccurrencesSummary_FixableTotalByDigest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05419d4098548d0d, []int{23, 0}
}

func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VulnerabilityOccurrencesSummary_FixableTotalByDigest.Unmarshal(m, b)
}
func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VulnerabilityOccurrencesSummary_FixableTotalByDigest.Marshal(b, m, deterministic)
}
func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VulnerabilityOccurrencesSummary_FixableTotalByDigest.Merge(m, src)
}
func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) XXX_Size() int {
	return xxx_messageInfo_VulnerabilityOccurrencesSummary_FixableTotalByDigest.Size(m)
}
func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) XXX_DiscardUnknown() {
	xxx_messageInfo_VulnerabilityOccurrencesSummary_FixableTotalByDigest.DiscardUnknown(m)
}

var xxx_messageInfo_VulnerabilityOccurrencesSummary_FixableTotalByDigest proto.InternalMessageInfo

func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) GetSeverity() vulnerability_go_proto.Severity {
	if m != nil {
		return m.Severity
	}
	return vulnerability_go_proto.Severity_SEVERITY_UNSPECIFIED
}

func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) GetFixableCount() int64 {
	if m != nil {
		return m.FixableCount
	}
	return 0
}

func (m *VulnerabilityOccurrencesSummary_FixableTotalByDigest) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Occurrence)(nil), "grafeas.v1.Occurrence")
	proto.RegisterType((*Resource)(nil), "grafeas.v1.Resource")
	proto.RegisterType((*Note)(nil), "grafeas.v1.Note")
	proto.RegisterType((*GetOccurrenceRequest)(nil), "grafeas.v1.GetOccurrenceRequest")
	proto.RegisterType((*ListOccurrencesRequest)(nil), "grafeas.v1.ListOccurrencesRequest")
	proto.RegisterType((*ListOccurrencesResponse)(nil), "grafeas.v1.ListOccurrencesResponse")
	proto.RegisterType((*DeleteOccurrenceRequest)(nil), "grafeas.v1.DeleteOccurrenceRequest")
	proto.RegisterType((*CreateOccurrenceRequest)(nil), "grafeas.v1.CreateOccurrenceRequest")
	proto.RegisterType((*UpdateOccurrenceRequest)(nil), "grafeas.v1.UpdateOccurrenceRequest")
	proto.RegisterType((*GetNoteRequest)(nil), "grafeas.v1.GetNoteRequest")
	proto.RegisterType((*GetOccurrenceNoteRequest)(nil), "grafeas.v1.GetOccurrenceNoteRequest")
	proto.RegisterType((*ListNotesRequest)(nil), "grafeas.v1.ListNotesRequest")
	proto.RegisterType((*ListNotesResponse)(nil), "grafeas.v1.ListNotesResponse")
	proto.RegisterType((*DeleteNoteRequest)(nil), "grafeas.v1.DeleteNoteRequest")
	proto.RegisterType((*CreateNoteRequest)(nil), "grafeas.v1.CreateNoteRequest")
	proto.RegisterType((*UpdateNoteRequest)(nil), "grafeas.v1.UpdateNoteRequest")
	proto.RegisterType((*ListNoteOccurrencesRequest)(nil), "grafeas.v1.ListNoteOccurrencesRequest")
	proto.RegisterType((*ListNoteOccurrencesResponse)(nil), "grafeas.v1.ListNoteOccurrencesResponse")
	proto.RegisterType((*BatchCreateNotesRequest)(nil), "grafeas.v1.BatchCreateNotesRequest")
	proto.RegisterMapType((map[string]*Note)(nil), "grafeas.v1.BatchCreateNotesRequest.NotesEntry")
	proto.RegisterType((*BatchCreateNotesResponse)(nil), "grafeas.v1.BatchCreateNotesResponse")
	proto.RegisterType((*BatchCreateOccurrencesRequest)(nil), "grafeas.v1.BatchCreateOccurrencesRequest")
	proto.RegisterType((*BatchCreateOccurrencesResponse)(nil), "grafeas.v1.BatchCreateOccurrencesResponse")
	proto.RegisterType((*GetVulnerabilityOccurrencesSummaryRequest)(nil), "grafeas.v1.GetVulnerabilityOccurrencesSummaryRequest")
	proto.RegisterType((*VulnerabilityOccurrencesSummary)(nil), "grafeas.v1.VulnerabilityOccurrencesSummary")
	proto.RegisterType((*VulnerabilityOccurrencesSummary_FixableTotalByDigest)(nil), "grafeas.v1.VulnerabilityOccurrencesSummary.FixableTotalByDigest")
}

func init() { proto.RegisterFile("proto/v1/grafeas.proto", fileDescriptor_05419d4098548d0d) }

var fileDescriptor_05419d4098548d0d = []byte{
	// 1850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x5b, 0x6f, 0xdb, 0xc8,
	0x15, 0x0e, 0xe5, 0xab, 0x8e, 0x7c, 0x91, 0xa7, 0x5e, 0x9b, 0x2b, 0xc7, 0x6b, 0x2d, 0xe3, 0x4d,
	0x7c, 0x69, 0xa5, 0xda, 0x4d, 0x1b, 0xc3, 0x45, 0x77, 0x1d, 0xd9, 0xbb, 0x76, 0xda, 0x6e, 0x36,
	0x60, 0xb2, 0x8b, 0xc5, 0x16, 0xa8, 0x40, 0x51, 0x63, 0x99, 0x36, 0x45, 0x72, 0xc9, 0x91, 0x10,
	0x25, 0x4d, 0x0a, 0x14, 0x01, 0x5a, 0xb4, 0x8f, 0x79, 0xea, 0x53, 0x81, 0xbc, 0xf6, 0x67, 0xf4,
	0xad, 0x28, 0xfa, 0xd2, 0x9f, 0xd0, 0xfe, 0x90, 0x62, 0x86, 0x43, 0x72, 0x78, 0x93, 0xe4, 0x04,
	0xed, 0xbe, 0x24, 0x9c, 0x73, 0x9f, 0x73, 0xce, 0x77, 0xe6, 0x08, 0x86, 0x15, 0xc7, 0xb5, 0x89,
	0x5d, 0xef, 0xef, 0xd5, 0x3b, 0xae, 0x76, 0x8e, 0x35, 0xaf, 0xc6, 0x08, 0x08, 0x82, 0x63, 0x7f,
	0xaf, 0x72, 0xb3, 0x63, 0xdb, 0x1d, 0x13, 0xd7, 0x35, 0xc7, 0xa8, 0x6b, 0x96, 0x65, 0x13, 0x8d,
	0x18, 0xb6, 0xc5, 0x25, 0x2b, 0x6b, 0x9c, 0xcb, 0x4e, 0xad, 0xde, 0x79, 0x1d, 0x77, 0x1d, 0x32,
	0xe0, 0xcc, 0x6a, 0x92, 0x79, 0x6e, 0x60, 0xb3, 0xdd, 0xec, 0x6a, 0xde, 0x15, 0x97, 0xd8, 0x48,
	0x4a, 0x10, 0xa3, 0x8b, 0x3d, 0xa2, 0x75, 0x1d, 0x2e, 0x50, 0x09, 0x23, 0xd4, 0x08, 0xa1, 0x1c,
	0xea, 0x9c, 0xf3, 0x96, 0x43, 0x5e, 0xab, 0x67, 0x98, 0x6d, 0x4e, 0x7d, 0x2f, 0xa4, 0xea, 0x76,
	0xb7, 0x1b, 0x0a, 0xbf, 0x1f, 0x92, 0xdb, 0xd8, 0x31, 0xed, 0x41, 0x17, 0x5b, 0x84, 0xb3, 0xe4,
	0x88, 0x65, 0x78, 0xba, 0xdd, 0xc7, 0xee, 0x20, 0xe5, 0xc1, 0xe8, 0x6a, 0x1d, 0xcc, 0xa9, 0x51,
	0xd6, 0x1c, 0x4d, 0xbf, 0x8a, 0xe8, 0x91, 0x0b, 0xc7, 0xb5, 0xfb, 0xd8, 0xd2, 0x2c, 0x3d, 0x60,
	0xdd, 0x0c, 0x59, 0xfd, 0x9e, 0x69, 0x61, 0x57, 0x6b, 0x19, 0xa6, 0x11, 0xe4, 0x49, 0xf9, 0xd3,
	0x34, 0xc0, 0x17, 0xba, 0xde, 0x73, 0x5d, 0x6c, 0xe9, 0x18, 0x21, 0x98, 0xb4, 0xb4, 0x2e, 0x96,
	0xa5, 0xaa, 0xb4, 0x55, 0x54, 0xd9, 0x37, 0xfa, 0x21, 0xcc, 0xba, 0xd8, 0xb3, 0x7b, 0xae, 0x8e,
	0xe5, 0x42, 0x55, 0xda, 0x2a, 0xed, 0x2f, 0xd7, 0xa2, 0x22, 0xd5, 0x54, 0xce, 0x53, 0x43, 0x29,
	0xb4, 0x06, 0x45, 0xcb, 0x26, 0xb8, 0xc9, 0x4c, 0x4d, 0x30, 0x53, 0xb3, 0x94, 0xf0, 0x90, 0x9a,
	0xdb, 0x82, 0xc9, 0x2b, 0xc3, 0x6a, 0xcb, 0x93, 0x55, 0x69, 0x6b, 0x21, 0x6e, 0xea, 0xa1, 0x4d,
	0xf0, 0x2f, 0x0c, 0xab, 0xad, 0x32, 0x09, 0x54, 0x85, 0x92, 0x8b, 0xbb, 0xb8, 0x6d, 0xb0, 0xcc,
	0xcb, 0x53, 0xcc, 0x90, 0x48, 0x42, 0x3f, 0x85, 0x92, 0xee, 0x62, 0x8d, 0xe0, 0x26, 0x2d, 0x9e,
	0x3c, 0xcd, 0xa2, 0xab, 0xd4, 0xfc, 0xca, 0xd6, 0x82, 0xca, 0xd6, 0x9e, 0x04, 0x95, 0x55, 0xc1,
	0x17, 0xa7, 0x04, 0xaa, 0xdc, 0x73, 0xda, 0xa1, 0xf2, 0xcc, 0x68, 0x65, 0x5f, 0x9c, 0x29, 0x3f,
	0x80, 0xf9, 0x58, 0x3a, 0xe5, 0x59, 0xa6, 0xfe, 0xa1, 0x78, 0x9d, 0x78, 0xbe, 0x4f, 0x30, 0xd1,
	0x0c, 0xd3, 0x3b, 0xbb, 0xa1, 0xc6, 0x35, 0xd1, 0x1e, 0x4c, 0xb1, 0x26, 0x92, 0x8b, 0xcc, 0xc4,
	0xfb, 0xa2, 0x09, 0xbf, 0xbb, 0x22, 0x55, 0x5f, 0x12, 0x1d, 0xc1, 0x7c, 0x1b, 0xbb, 0x46, 0x1f,
	0xb7, 0x9b, 0xac, 0x3b, 0x64, 0x48, 0xab, 0xfa, 0x6d, 0x13, 0xa9, 0xce, 0x71, 0x8d, 0x07, 0x94,
	0x8e, 0xee, 0xc3, 0x9c, 0x61, 0x79, 0x44, 0x33, 0x4d, 0x3f, 0xb9, 0x25, 0x66, 0x60, 0x4d, 0x34,
	0x10, 0x74, 0x98, 0x60, 0x42, 0x54, 0x41, 0x47, 0x00, 0x51, 0x3f, 0xcb, 0x73, 0xcc, 0xc0, 0x07,
	0xa2, 0x01, 0xa1, 0xdb, 0x23, 0x1b, 0x82, 0x0e, 0xfa, 0x04, 0x20, 0x68, 0x7b, 0xdc, 0x96, 0xe7,
	0x99, 0x85, 0xf5, 0x98, 0x85, 0x10, 0x14, 0xa2, 0x81, 0x50, 0x05, 0x1d, 0x43, 0x49, 0xc0, 0xa6,
	0xbc, 0xc0, 0x2c, 0x6c, 0x88, 0x16, 0x44, 0xe8, 0x46, 0x36, 0x44, 0xad, 0x46, 0x11, 0x66, 0xda,
	0x3e, 0x47, 0x71, 0x60, 0x36, 0x68, 0xe7, 0x4c, 0x28, 0x94, 0x61, 0xa2, 0xe7, 0x1a, 0x0c, 0x05,
	0x45, 0x95, 0x7e, 0xa2, 0x8f, 0x61, 0x4e, 0xb7, 0x2d, 0x82, 0x2d, 0xd2, 0xbc, 0xd0, 0xbc, 0x0b,
	0xd6, 0xed, 0xc9, 0x3c, 0x46, 0x88, 0x3c, 0xd3, 0xbc, 0x0b, 0xb5, 0xc4, 0x15, 0xe8, 0x41, 0xf9,
	0xcb, 0x0c, 0x4c, 0xd2, 0xb6, 0xcf, 0x74, 0xb7, 0x0b, 0x4b, 0xde, 0x85, 0xed, 0x92, 0x66, 0x1b,
	0x7b, 0xba, 0x6b, 0x38, 0xec, 0x92, 0xbe, 0xf3, 0x32, 0x63, 0x9c, 0x44, 0x74, 0xb4, 0x0d, 0x65,
	0xd3, 0xb6, 0x3a, 0x31, 0x59, 0x1f, 0x7b, 0x8b, 0x94, 0x2e, 0x8a, 0x8e, 0x0f, 0xc1, 0x7b, 0x14,
	0x82, 0xa6, 0x46, 0x70, 0xbb, 0xd9, 0x73, 0x4d, 0x79, 0xaa, 0x3a, 0xb1, 0x55, 0xda, 0x5f, 0x89,
	0xc3, 0x9f, 0xb1, 0xbf, 0x74, 0x4d, 0x15, 0xdc, 0xf0, 0x1b, 0x1d, 0xc3, 0x22, 0x7e, 0xea, 0x18,
	0x2e, 0x4b, 0xf1, 0xb8, 0xe8, 0x5c, 0x88, 0x54, 0x02, 0x84, 0x8a, 0xf0, 0x9e, 0x79, 0x17, 0x78,
	0xcf, 0x5e, 0x0b, 0xde, 0xdf, 0x07, 0x14, 0xdc, 0x3b, 0x9c, 0x64, 0x9e, 0x5c, 0xac, 0x4e, 0xd0,
	0xd4, 0x73, 0xce, 0x43, 0x3e, 0xd1, 0x3c, 0xf4, 0x45, 0x72, 0x18, 0xf8, 0x70, 0xbc, 0x93, 0x3f,
	0x0c, 0xbe, 0x12, 0x4f, 0xe9, 0x91, 0x50, 0x0f, 0x46, 0x82, 0x0f, 0xcb, 0xd5, 0xf4, 0x48, 0x68,
	0xd0, 0x7f, 0xa3, 0x81, 0x70, 0x00, 0xd0, 0xd2, 0x3c, 0xcc, 0xa7, 0xc1, 0x5c, 0x5a, 0xcb, 0x9f,
	0x06, 0x0d, 0xcd, 0x33, 0x68, 0xff, 0x17, 0xa9, 0xb0, 0x3f, 0x08, 0xee, 0xc1, 0x0c, 0x07, 0x3a,
	0x07, 0x60, 0xe6, 0x0c, 0x78, 0xe4, 0xff, 0x7f, 0x76, 0x43, 0x0d, 0xa4, 0xd1, 0x71, 0x00, 0x7f,
	0xad, 0x65, 0x62, 0x0e, 0xbd, 0x0f, 0x73, 0xe1, 0x1f, 0x08, 0x46, 0x13, 0x80, 0x9e, 0xd0, 0x27,
	0x50, 0x0c, 0x31, 0x2e, 0x2f, 0xa6, 0xe1, 0x2b, 0x0c, 0x80, 0xe0, 0x8b, 0x86, 0x1f, 0x92, 0xd1,
	0xd7, 0xf0, 0x9e, 0x80, 0xe5, 0xa6, 0xd6, 0x23, 0x17, 0xb6, 0x4b, 0x4b, 0x50, 0x4e, 0x07, 0x24,
	0xce, 0x82, 0xfb, 0x81, 0xe0, 0xd9, 0x0d, 0x75, 0x59, 0x60, 0x84, 0xf4, 0xc6, 0x34, 0x4c, 0x92,
	0x81, 0x83, 0x95, 0x1d, 0x58, 0x3e, 0xc5, 0x24, 0x7a, 0x23, 0x55, 0xfc, 0x6d, 0x0f, 0x7b, 0x24,
	0x0b, 0xb0, 0xca, 0x2b, 0x09, 0x56, 0x7e, 0x69, 0x78, 0x82, 0xb4, 0x17, 0x88, 0xaf, 0xc0, 0xb4,
	0xa3, 0xb9, 0x74, 0x52, 0xfa, 0x0a, 0xfc, 0x44, 0xe9, 0xe7, 0x86, 0x49, 0xb0, 0xcb, 0x81, 0xcd,
	0x4f, 0xf4, 0x0d, 0x75, 0xb4, 0x0e, 0x6e, 0x7a, 0xc6, 0x33, 0xff, 0x0d, 0x9d, 0x52, 0x67, 0x29,
	0xe1, 0xb1, 0xf1, 0x0c, 0xa3, 0x75, 0x00, 0xc6, 0x24, 0xf6, 0x15, 0xb6, 0x18, 0x8c, 0x8b, 0x2a,
	0x13, 0x7f, 0x42, 0x09, 0xca, 0x73, 0x58, 0x4d, 0x45, 0xe1, 0x39, 0xb6, 0xe5, 0x61, 0x74, 0x00,
	0x25, 0x3b, 0x22, 0xcb, 0x52, 0x1a, 0xd0, 0xc2, 0x4d, 0x45, 0x51, 0x74, 0x1b, 0x16, 0x2d, 0xfc,
	0x94, 0x34, 0x05, 0xc7, 0x7e, 0xc4, 0xf3, 0x94, 0xfc, 0x28, 0x74, 0xfe, 0x03, 0x58, 0x3d, 0xc1,
	0x26, 0x26, 0x78, 0xbc, 0x94, 0x19, 0xb0, 0x7a, 0xcc, 0x40, 0x9b, 0x16, 0xcf, 0x4b, 0xd9, 0x4f,
	0x00, 0xa2, 0xc0, 0xf8, 0x4a, 0x92, 0x77, 0x05, 0x41, 0x52, 0x79, 0x23, 0xc1, 0xea, 0x97, 0x0c,
	0xe3, 0x63, 0x85, 0xf6, 0xb6, 0x7e, 0x84, 0xc9, 0x43, 0xd7, 0x4d, 0xfe, 0x24, 0xa4, 0x27, 0xcf,
	0x67, 0x74, 0x23, 0xfd, 0x5c, 0xf3, 0xae, 0x82, 0xc9, 0x43, 0xbf, 0x95, 0x4d, 0x58, 0x38, 0xc5,
	0x84, 0xce, 0x96, 0x61, 0x59, 0xab, 0x81, 0x1c, 0x6b, 0xca, 0x51, 0xf2, 0x2f, 0xa1, 0x4c, 0x3b,
	0x82, 0x8a, 0x7d, 0x27, 0x1d, 0xa9, 0xc3, 0x92, 0xe0, 0x9f, 0xf7, 0xe2, 0x6d, 0x98, 0xa2, 0xc3,
	0x35, 0xe8, 0xc2, 0x72, 0xf2, 0x1d, 0x52, 0x7d, 0xf6, 0xd8, 0x9d, 0x77, 0x07, 0x96, 0xfc, 0xce,
	0x1b, 0x95, 0x8d, 0x4b, 0x58, 0xf2, 0x7b, 0x4e, 0x14, 0xcc, 0x4b, 0xc7, 0x2a, 0xcc, 0xb0, 0x27,
	0xc0, 0x68, 0x07, 0xf9, 0xa0, 0xc7, 0x07, 0x6d, 0xb4, 0x09, 0x93, 0xf4, 0x8b, 0xd7, 0x37, 0x1d,
	0x3d, 0xe3, 0x2a, 0x7f, 0x94, 0x60, 0xc9, 0x6f, 0xba, 0x11, 0x51, 0x85, 0xf6, 0x0a, 0xc3, 0xec,
	0xbd, 0x5b, 0x73, 0xbd, 0x92, 0xa0, 0x12, 0xd4, 0x21, 0x63, 0x46, 0x65, 0x45, 0xf5, 0xbf, 0xe8,
	0x86, 0xdf, 0xc2, 0x5a, 0x66, 0x14, 0xff, 0xb7, 0x19, 0xf5, 0x37, 0x09, 0x56, 0x1b, 0x1a, 0xd1,
	0x2f, 0xa2, 0x36, 0x18, 0x09, 0x8b, 0x93, 0xa0, 0x5b, 0x0b, 0x2c, 0x9e, 0x9a, 0x18, 0x4f, 0x8e,
	0x2d, 0x56, 0x37, 0xef, 0x53, 0x8b, 0xb8, 0x03, 0xde, 0xcb, 0x95, 0x9f, 0x03, 0x44, 0x44, 0xba,
	0x4f, 0x5e, 0xe1, 0x01, 0x77, 0x44, 0x3f, 0x29, 0x26, 0xfa, 0x9a, 0xd9, 0xcb, 0xef, 0x02, 0x9f,
	0x7d, 0x58, 0x38, 0x90, 0x94, 0x06, 0xc8, 0x69, 0xc7, 0xd7, 0xc3, 0x96, 0xf2, 0x2d, 0xac, 0x0b,
	0x36, 0xae, 0xf1, 0x6e, 0x25, 0x8a, 0x54, 0x18, 0xbb, 0x48, 0xca, 0x37, 0xf0, 0x41, 0x9e, 0xcb,
	0x77, 0x6d, 0x00, 0xe5, 0x57, 0xb0, 0x7d, 0x8a, 0x49, 0x6c, 0xbb, 0x12, 0x1c, 0x3c, 0xee, 0x75,
	0xbb, 0x9a, 0x3b, 0x78, 0xcb, 0x01, 0xa8, 0xfc, 0xa3, 0x00, 0x1b, 0x23, 0x4c, 0xa3, 0xaf, 0x61,
	0x5a, 0xb7, 0x7b, 0x16, 0x09, 0xa2, 0x3e, 0x12, 0xa3, 0x1e, 0xa1, 0x5c, 0xfb, 0xcc, 0x78, 0x4a,
	0xb7, 0xa2, 0x27, 0x36, 0xd1, 0xcc, 0xc6, 0xe0, 0xc4, 0xe8, 0x60, 0x8f, 0xa8, 0xdc, 0x5e, 0xe5,
	0x9f, 0x12, 0x2c, 0x67, 0x09, 0xc4, 0x7e, 0x9f, 0x4b, 0x63, 0xfd, 0x3e, 0xff, 0x18, 0x66, 0x3d,
	0xdc, 0xc7, 0x6c, 0x4f, 0x2a, 0xb0, 0xdf, 0x00, 0x4a, 0xfe, 0xaa, 0xfa, 0x98, 0x4b, 0xaa, 0xa1,
	0x0e, 0xba, 0x05, 0xf3, 0xe7, 0x7e, 0x24, 0x4d, 0x16, 0x1c, 0xc3, 0xff, 0x84, 0x3a, 0xc7, 0x89,
	0xc7, 0x94, 0x86, 0x36, 0xa0, 0x44, 0x68, 0x9c, 0x5c, 0x64, 0x92, 0x89, 0x00, 0x23, 0x31, 0x81,
	0xfd, 0x7f, 0x2f, 0x42, 0xf1, 0xd4, 0xf7, 0xfa, 0xd5, 0x1e, 0xea, 0xc3, 0x7c, 0xec, 0x45, 0x43,
	0x55, 0x31, 0xa4, 0xac, 0x0d, 0xac, 0x92, 0xd3, 0x11, 0xca, 0xee, 0xef, 0xfe, 0xf5, 0x9f, 0xd7,
	0x85, 0x8f, 0xd0, 0xad, 0x7a, 0x7f, 0xaf, 0xfe, 0x9c, 0x4e, 0xb1, 0x9f, 0x39, 0xae, 0x7d, 0x89,
	0x75, 0xe2, 0xd5, 0x77, 0xea, 0x42, 0xbb, 0xd4, 0x77, 0x5e, 0xa0, 0xdf, 0x4b, 0xb0, 0x98, 0x58,
	0x96, 0x50, 0x2c, 0x1b, 0xd9, 0xfb, 0x5c, 0xe5, 0xd6, 0x50, 0x19, 0xbf, 0x91, 0x13, 0x91, 0xf8,
	0xed, 0x25, 0xc4, 0xf2, 0x42, 0x0c, 0x06, 0xfd, 0x06, 0xca, 0xc9, 0xc5, 0x09, 0xc5, 0xbc, 0xe4,
	0xac, 0x55, 0x34, 0x0f, 0x89, 0xe9, 0xff, 0x69, 0xd7, 0x21, 0x83, 0xc0, 0xfb, 0xce, 0x58, 0x79,
	0xf8, 0x83, 0x04, 0xe5, 0x24, 0x22, 0xe3, 0xee, 0x73, 0xd6, 0xb4, 0xdc, 0x32, 0xdc, 0x63, 0xee,
	0xf7, 0x94, 0x71, 0x2e, 0x7f, 0x28, 0xee, 0x4f, 0x7f, 0x95, 0x60, 0x25, 0x7b, 0x42, 0xa0, 0xed,
	0x9c, 0xa9, 0x9b, 0x51, 0xa0, 0x9d, 0x71, 0x44, 0x79, 0x9d, 0x0e, 0x59, 0xa8, 0x77, 0x95, 0xfa,
	0x38, 0xa1, 0xb6, 0x22, 0x5b, 0x87, 0xd2, 0x0e, 0x4b, 0x5c, 0x72, 0xab, 0x8c, 0x27, 0x2e, 0x67,
	0xe7, 0x1c, 0x95, 0xb8, 0xfd, 0x71, 0xea, 0x16, 0x4b, 0xdc, 0x4b, 0x58, 0x4a, 0x6d, 0x85, 0x68,
	0x33, 0x17, 0x47, 0xc2, 0x42, 0x52, 0x49, 0x3d, 0x10, 0xca, 0x1e, 0x8b, 0x62, 0x17, 0x6d, 0x8f,
	0x11, 0x45, 0xdd, 0x5f, 0xd4, 0x7e, 0x0d, 0x33, 0x7c, 0x77, 0x45, 0x95, 0x84, 0xd7, 0xe1, 0xbe,
	0x3e, 0x62, 0xbe, 0x36, 0xd0, 0x7a, 0xa6, 0x2f, 0x66, 0x9c, 0xf6, 0xa8, 0x0d, 0xc5, 0x70, 0x8b,
	0x44, 0x37, 0x93, 0x00, 0x14, 0x5f, 0xde, 0xca, 0x7a, 0x0e, 0x97, 0x17, 0x3c, 0xee, 0x30, 0xa3,
	0xe0, 0xfe, 0x85, 0x2e, 0x01, 0xa2, 0x8d, 0x12, 0xad, 0xa7, 0xc1, 0x28, 0x5e, 0x2b, 0x0f, 0x86,
	0xdc, 0xd7, 0xce, 0x88, 0xcb, 0x5d, 0x02, 0x44, 0x0f, 0x79, 0xdc, 0x57, 0x6a, 0x59, 0xcd, 0x48,
	0x21, 0x07, 0xbb, 0x32, 0xfc, 0x46, 0x87, 0xfe, 0x12, 0xf9, 0x5a, 0x82, 0x72, 0x72, 0x75, 0x88,
	0xf7, 0x6c, 0xce, 0x46, 0x53, 0xd9, 0x1c, 0x2e, 0xc4, 0xd3, 0x7b, 0x97, 0x05, 0x53, 0x53, 0xb6,
	0x87, 0x07, 0x93, 0x40, 0xd2, 0x25, 0x40, 0xb4, 0x29, 0xc7, 0x33, 0x90, 0xda, 0xa0, 0xf3, 0x33,
	0xb0, 0x3f, 0x3c, 0xcf, 0x3c, 0x03, 0x7f, 0x96, 0xe0, 0x7b, 0x19, 0x3b, 0x28, 0xba, 0x9d, 0xd5,
	0x37, 0x19, 0xd3, 0xe5, 0xce, 0x48, 0x39, 0x9e, 0x8a, 0xe1, 0x30, 0x0a, 0xa2, 0x8a, 0x3d, 0x04,
	0x7f, 0x97, 0x40, 0x19, 0xbd, 0xc5, 0xa0, 0x1f, 0x27, 0x20, 0x36, 0xde, 0xd6, 0x53, 0xd9, 0xbd,
	0xc6, 0x46, 0xa2, 0x1c, 0xb1, 0xe8, 0x0f, 0xd1, 0xc1, 0x38, 0x83, 0x31, 0xb6, 0x37, 0x70, 0x0b,
	0x8d, 0xcf, 0x61, 0xde, 0xb0, 0x05, 0x97, 0x8f, 0xa4, 0x6f, 0xee, 0x76, 0x0c, 0x72, 0xd1, 0x6b,
	0xd5, 0x74, 0xbb, 0x1b, 0xfc, 0xf1, 0x27, 0xfc, 0x3f, 0xf9, 0x57, 0xa1, 0x66, 0xc7, 0x6e, 0x32,
	0xda, 0x9b, 0xc2, 0xc4, 0xa9, 0x7a, 0xbf, 0x35, 0xcd, 0x0e, 0x3f, 0xfa, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0xa6, 0xb7, 0xe1, 0x3f, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrafeasV1Client is the client API for GrafeasV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrafeasV1Client interface {
	// Gets the specified occurrence.
	GetOccurrence(ctx context.Context, in *GetOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	// Lists occurrences for the specified project.
	ListOccurrences(ctx context.Context, in *ListOccurrencesRequest, opts ...grpc.CallOption) (*ListOccurrencesResponse, error)
	// Deletes the specified occurrence. For example, use this method to delete an
	// occurrence when the occurrence is no longer applicable for the given
	// resource.
	DeleteOccurrence(ctx context.Context, in *DeleteOccurrenceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new occurrence.
	CreateOccurrence(ctx context.Context, in *CreateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	// Creates new occurrences in batch.
	BatchCreateOccurrences(ctx context.Context, in *BatchCreateOccurrencesRequest, opts ...grpc.CallOption) (*BatchCreateOccurrencesResponse, error)
	// Updates the specified occurrence.
	UpdateOccurrence(ctx context.Context, in *UpdateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error)
	// Gets the note attached to the specified occurrence. Consumer projects can
	// use this method to get a note that belongs to a provider project.
	GetOccurrenceNote(ctx context.Context, in *GetOccurrenceNoteRequest, opts ...grpc.CallOption) (*Note, error)
	// Gets the specified note.
	GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error)
	// Lists notes for the specified project.
	ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error)
	// Deletes the specified note.
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new note.
	CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*Note, error)
	// Creates new notes in batch.
	BatchCreateNotes(ctx context.Context, in *BatchCreateNotesRequest, opts ...grpc.CallOption) (*BatchCreateNotesResponse, error)
	// Updates the specified note.
	UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*Note, error)
	// Lists occurrences referencing the specified note. Provider projects can use
	// this method to get all occurrences across consumer projects referencing the
	// specified note.
	ListNoteOccurrences(ctx context.Context, in *ListNoteOccurrencesRequest, opts ...grpc.CallOption) (*ListNoteOccurrencesResponse, error)
	// Gets a summary of the number and severity of occurrences.
	GetVulnerabilityOccurrencesSummary(ctx context.Context, in *GetVulnerabilityOccurrencesSummaryRequest, opts ...grpc.CallOption) (*VulnerabilityOccurrencesSummary, error)
}

type grafeasV1Client struct {
	cc *grpc.ClientConn
}

func NewGrafeasV1Client(cc *grpc.ClientConn) GrafeasV1Client {
	return &grafeasV1Client{cc}
}

func (c *grafeasV1Client) GetOccurrence(ctx context.Context, in *GetOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/GetOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) ListOccurrences(ctx context.Context, in *ListOccurrencesRequest, opts ...grpc.CallOption) (*ListOccurrencesResponse, error) {
	out := new(ListOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/ListOccurrences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) DeleteOccurrence(ctx context.Context, in *DeleteOccurrenceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/DeleteOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) CreateOccurrence(ctx context.Context, in *CreateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/CreateOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) BatchCreateOccurrences(ctx context.Context, in *BatchCreateOccurrencesRequest, opts ...grpc.CallOption) (*BatchCreateOccurrencesResponse, error) {
	out := new(BatchCreateOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/BatchCreateOccurrences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) UpdateOccurrence(ctx context.Context, in *UpdateOccurrenceRequest, opts ...grpc.CallOption) (*Occurrence, error) {
	out := new(Occurrence)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/UpdateOccurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) GetOccurrenceNote(ctx context.Context, in *GetOccurrenceNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/GetOccurrenceNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/GetNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error) {
	out := new(ListNotesResponse)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/ListNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/CreateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) BatchCreateNotes(ctx context.Context, in *BatchCreateNotesRequest, opts ...grpc.CallOption) (*BatchCreateNotesResponse, error) {
	out := new(BatchCreateNotesResponse)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/BatchCreateNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/UpdateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) ListNoteOccurrences(ctx context.Context, in *ListNoteOccurrencesRequest, opts ...grpc.CallOption) (*ListNoteOccurrencesResponse, error) {
	out := new(ListNoteOccurrencesResponse)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/ListNoteOccurrences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grafeasV1Client) GetVulnerabilityOccurrencesSummary(ctx context.Context, in *GetVulnerabilityOccurrencesSummaryRequest, opts ...grpc.CallOption) (*VulnerabilityOccurrencesSummary, error) {
	out := new(VulnerabilityOccurrencesSummary)
	err := c.cc.Invoke(ctx, "/grafeas.v1.GrafeasV1/GetVulnerabilityOccurrencesSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrafeasV1Server is the server API for GrafeasV1 service.
type GrafeasV1Server interface {
	// Gets the specified occurrence.
	GetOccurrence(context.Context, *GetOccurrenceRequest) (*Occurrence, error)
	// Lists occurrences for the specified project.
	ListOccurrences(context.Context, *ListOccurrencesRequest) (*ListOccurrencesResponse, error)
	// Deletes the specified occurrence. For example, use this method to delete an
	// occurrence when the occurrence is no longer applicable for the given
	// resource.
	DeleteOccurrence(context.Context, *DeleteOccurrenceRequest) (*empty.Empty, error)
	// Creates a new occurrence.
	CreateOccurrence(context.Context, *CreateOccurrenceRequest) (*Occurrence, error)
	// Creates new occurrences in batch.
	BatchCreateOccurrences(context.Context, *BatchCreateOccurrencesRequest) (*BatchCreateOccurrencesResponse, error)
	// Updates the specified occurrence.
	UpdateOccurrence(context.Context, *UpdateOccurrenceRequest) (*Occurrence, error)
	// Gets the note attached to the specified occurrence. Consumer projects can
	// use this method to get a note that belongs to a provider project.
	GetOccurrenceNote(context.Context, *GetOccurrenceNoteRequest) (*Note, error)
	// Gets the specified note.
	GetNote(context.Context, *GetNoteRequest) (*Note, error)
	// Lists notes for the specified project.
	ListNotes(context.Context, *ListNotesRequest) (*ListNotesResponse, error)
	// Deletes the specified note.
	DeleteNote(context.Context, *DeleteNoteRequest) (*empty.Empty, error)
	// Creates a new note.
	CreateNote(context.Context, *CreateNoteRequest) (*Note, error)
	// Creates new notes in batch.
	BatchCreateNotes(context.Context, *BatchCreateNotesRequest) (*BatchCreateNotesResponse, error)
	// Updates the specified note.
	UpdateNote(context.Context, *UpdateNoteRequest) (*Note, error)
	// Lists occurrences referencing the specified note. Provider projects can use
	// this method to get all occurrences across consumer projects referencing the
	// specified note.
	ListNoteOccurrences(context.Context, *ListNoteOccurrencesRequest) (*ListNoteOccurrencesResponse, error)
	// Gets a summary of the number and severity of occurrences.
	GetVulnerabilityOccurrencesSummary(context.Context, *GetVulnerabilityOccurrencesSummaryRequest) (*VulnerabilityOccurrencesSummary, error)
}

// UnimplementedGrafeasV1Server can be embedded to have forward compatible implementations.
type UnimplementedGrafeasV1Server struct {
}

func (*UnimplementedGrafeasV1Server) GetOccurrence(ctx context.Context, req *GetOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOccurrence not implemented")
}
func (*UnimplementedGrafeasV1Server) ListOccurrences(ctx context.Context, req *ListOccurrencesRequest) (*ListOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOccurrences not implemented")
}
func (*UnimplementedGrafeasV1Server) DeleteOccurrence(ctx context.Context, req *DeleteOccurrenceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOccurrence not implemented")
}
func (*UnimplementedGrafeasV1Server) CreateOccurrence(ctx context.Context, req *CreateOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOccurrence not implemented")
}
func (*UnimplementedGrafeasV1Server) BatchCreateOccurrences(ctx context.Context, req *BatchCreateOccurrencesRequest) (*BatchCreateOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateOccurrences not implemented")
}
func (*UnimplementedGrafeasV1Server) UpdateOccurrence(ctx context.Context, req *UpdateOccurrenceRequest) (*Occurrence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOccurrence not implemented")
}
func (*UnimplementedGrafeasV1Server) GetOccurrenceNote(ctx context.Context, req *GetOccurrenceNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOccurrenceNote not implemented")
}
func (*UnimplementedGrafeasV1Server) GetNote(ctx context.Context, req *GetNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (*UnimplementedGrafeasV1Server) ListNotes(ctx context.Context, req *ListNotesRequest) (*ListNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotes not implemented")
}
func (*UnimplementedGrafeasV1Server) DeleteNote(ctx context.Context, req *DeleteNoteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (*UnimplementedGrafeasV1Server) CreateNote(ctx context.Context, req *CreateNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (*UnimplementedGrafeasV1Server) BatchCreateNotes(ctx context.Context, req *BatchCreateNotesRequest) (*BatchCreateNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateNotes not implemented")
}
func (*UnimplementedGrafeasV1Server) UpdateNote(ctx context.Context, req *UpdateNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (*UnimplementedGrafeasV1Server) ListNoteOccurrences(ctx context.Context, req *ListNoteOccurrencesRequest) (*ListNoteOccurrencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNoteOccurrences not implemented")
}
func (*UnimplementedGrafeasV1Server) GetVulnerabilityOccurrencesSummary(ctx context.Context, req *GetVulnerabilityOccurrencesSummaryRequest) (*VulnerabilityOccurrencesSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnerabilityOccurrencesSummary not implemented")
}

func RegisterGrafeasV1Server(s *grpc.Server, srv GrafeasV1Server) {
	s.RegisterService(&_GrafeasV1_serviceDesc, srv)
}

func _GrafeasV1_GetOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).GetOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/GetOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).GetOccurrence(ctx, req.(*GetOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_ListOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOccurrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).ListOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/ListOccurrences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).ListOccurrences(ctx, req.(*ListOccurrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_DeleteOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).DeleteOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/DeleteOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).DeleteOccurrence(ctx, req.(*DeleteOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_CreateOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).CreateOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/CreateOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).CreateOccurrence(ctx, req.(*CreateOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_BatchCreateOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateOccurrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).BatchCreateOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/BatchCreateOccurrences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).BatchCreateOccurrences(ctx, req.(*BatchCreateOccurrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_UpdateOccurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOccurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).UpdateOccurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/UpdateOccurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).UpdateOccurrence(ctx, req.(*UpdateOccurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_GetOccurrenceNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOccurrenceNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).GetOccurrenceNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/GetOccurrenceNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).GetOccurrenceNote(ctx, req.(*GetOccurrenceNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/GetNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).GetNote(ctx, req.(*GetNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_ListNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).ListNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/ListNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).ListNotes(ctx, req.(*ListNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/CreateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).CreateNote(ctx, req.(*CreateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_BatchCreateNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).BatchCreateNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/BatchCreateNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).BatchCreateNotes(ctx, req.(*BatchCreateNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).UpdateNote(ctx, req.(*UpdateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_ListNoteOccurrences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoteOccurrencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).ListNoteOccurrences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/ListNoteOccurrences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).ListNoteOccurrences(ctx, req.(*ListNoteOccurrencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrafeasV1_GetVulnerabilityOccurrencesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVulnerabilityOccurrencesSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrafeasV1Server).GetVulnerabilityOccurrencesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grafeas.v1.GrafeasV1/GetVulnerabilityOccurrencesSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrafeasV1Server).GetVulnerabilityOccurrencesSummary(ctx, req.(*GetVulnerabilityOccurrencesSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrafeasV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grafeas.v1.GrafeasV1",
	HandlerType: (*GrafeasV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOccurrence",
			Handler:    _GrafeasV1_GetOccurrence_Handler,
		},
		{
			MethodName: "ListOccurrences",
			Handler:    _GrafeasV1_ListOccurrences_Handler,
		},
		{
			MethodName: "DeleteOccurrence",
			Handler:    _GrafeasV1_DeleteOccurrence_Handler,
		},
		{
			MethodName: "CreateOccurrence",
			Handler:    _GrafeasV1_CreateOccurrence_Handler,
		},
		{
			MethodName: "BatchCreateOccurrences",
			Handler:    _GrafeasV1_BatchCreateOccurrences_Handler,
		},
		{
			MethodName: "UpdateOccurrence",
			Handler:    _GrafeasV1_UpdateOccurrence_Handler,
		},
		{
			MethodName: "GetOccurrenceNote",
			Handler:    _GrafeasV1_GetOccurrenceNote_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _GrafeasV1_GetNote_Handler,
		},
		{
			MethodName: "ListNotes",
			Handler:    _GrafeasV1_ListNotes_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _GrafeasV1_DeleteNote_Handler,
		},
		{
			MethodName: "CreateNote",
			Handler:    _GrafeasV1_CreateNote_Handler,
		},
		{
			MethodName: "BatchCreateNotes",
			Handler:    _GrafeasV1_BatchCreateNotes_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _GrafeasV1_UpdateNote_Handler,
		},
		{
			MethodName: "ListNoteOccurrences",
			Handler:    _GrafeasV1_ListNoteOccurrences_Handler,
		},
		{
			MethodName: "GetVulnerabilityOccurrencesSummary",
			Handler:    _GrafeasV1_GetVulnerabilityOccurrencesSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/grafeas.proto",
}
